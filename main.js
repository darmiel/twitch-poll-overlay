(()=>{var e={982:(e,t,s)=>{"use strict";s.d(t,{Z:()=>a});var n=s(537),i=s.n(n),o=s(645),r=s.n(o)()(i());r.push([e.id,"","",{version:3,sources:[],names:[],mappings:"",sourceRoot:""}]);const a=r},645:e=>{"use strict";e.exports=function(e){var t=[];return t.toString=function(){return this.map((function(t){var s="",n=void 0!==t[5];return t[4]&&(s+="@supports (".concat(t[4],") {")),t[2]&&(s+="@media ".concat(t[2]," {")),n&&(s+="@layer".concat(t[5].length>0?" ".concat(t[5]):""," {")),s+=e(t),n&&(s+="}"),t[2]&&(s+="}"),t[4]&&(s+="}"),s})).join("")},t.i=function(e,s,n,i,o){"string"==typeof e&&(e=[[null,e,void 0]]);var r={};if(n)for(var a=0;a<this.length;a++){var c=this[a][0];null!=c&&(r[c]=!0)}for(var l=0;l<e.length;l++){var h=[].concat(e[l]);n&&r[h[0]]||(void 0!==o&&(void 0===h[5]||(h[1]="@layer".concat(h[5].length>0?" ".concat(h[5]):""," {").concat(h[1],"}")),h[5]=o),s&&(h[2]?(h[1]="@media ".concat(h[2]," {").concat(h[1],"}"),h[2]=s):h[2]=s),i&&(h[4]?(h[1]="@supports (".concat(h[4],") {").concat(h[1],"}"),h[4]=i):h[4]="".concat(i)),t.push(h))}},t}},537:e=>{"use strict";e.exports=function(e){var t=e[1],s=e[3];if(!s)return t;if("function"==typeof btoa){var n=btoa(unescape(encodeURIComponent(JSON.stringify(s)))),i="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(n),o="/*# ".concat(i," */"),r=s.sources.map((function(e){return"/*# sourceURL=".concat(s.sourceRoot||"").concat(e," */")}));return[t].concat(r).concat([o]).join("\n")}return[t].join("\n")}},187:e=>{"use strict";var t,s="object"==typeof Reflect?Reflect:null,n=s&&"function"==typeof s.apply?s.apply:function(e,t,s){return Function.prototype.apply.call(e,t,s)};t=s&&"function"==typeof s.ownKeys?s.ownKeys:Object.getOwnPropertySymbols?function(e){return Object.getOwnPropertyNames(e).concat(Object.getOwnPropertySymbols(e))}:function(e){return Object.getOwnPropertyNames(e)};var i=Number.isNaN||function(e){return e!=e};function o(){o.init.call(this)}e.exports=o,e.exports.once=function(e,t){return new Promise((function(s,n){function i(s){e.removeListener(t,o),n(s)}function o(){"function"==typeof e.removeListener&&e.removeListener("error",i),s([].slice.call(arguments))}f(e,t,o,{once:!0}),"error"!==t&&function(e,t,s){"function"==typeof e.on&&f(e,"error",t,{once:!0})}(e,i)}))},o.EventEmitter=o,o.prototype._events=void 0,o.prototype._eventsCount=0,o.prototype._maxListeners=void 0;var r=10;function a(e){if("function"!=typeof e)throw new TypeError('The "listener" argument must be of type Function. Received type '+typeof e)}function c(e){return void 0===e._maxListeners?o.defaultMaxListeners:e._maxListeners}function l(e,t,s,n){var i,o,r,l;if(a(s),void 0===(o=e._events)?(o=e._events=Object.create(null),e._eventsCount=0):(void 0!==o.newListener&&(e.emit("newListener",t,s.listener?s.listener:s),o=e._events),r=o[t]),void 0===r)r=o[t]=s,++e._eventsCount;else if("function"==typeof r?r=o[t]=n?[s,r]:[r,s]:n?r.unshift(s):r.push(s),(i=c(e))>0&&r.length>i&&!r.warned){r.warned=!0;var h=new Error("Possible EventEmitter memory leak detected. "+r.length+" "+String(t)+" listeners added. Use emitter.setMaxListeners() to increase limit");h.name="MaxListenersExceededWarning",h.emitter=e,h.type=t,h.count=r.length,l=h,console&&console.warn&&console.warn(l)}return e}function h(){if(!this.fired)return this.target.removeListener(this.type,this.wrapFn),this.fired=!0,0===arguments.length?this.listener.call(this.target):this.listener.apply(this.target,arguments)}function u(e,t,s){var n={fired:!1,wrapFn:void 0,target:e,type:t,listener:s},i=h.bind(n);return i.listener=s,n.wrapFn=i,i}function m(e,t,s){var n=e._events;if(void 0===n)return[];var i=n[t];return void 0===i?[]:"function"==typeof i?s?[i.listener||i]:[i]:s?function(e){for(var t=new Array(e.length),s=0;s<t.length;++s)t[s]=e[s].listener||e[s];return t}(i):d(i,i.length)}function p(e){var t=this._events;if(void 0!==t){var s=t[e];if("function"==typeof s)return 1;if(void 0!==s)return s.length}return 0}function d(e,t){for(var s=new Array(t),n=0;n<t;++n)s[n]=e[n];return s}function f(e,t,s,n){if("function"==typeof e.on)n.once?e.once(t,s):e.on(t,s);else{if("function"!=typeof e.addEventListener)throw new TypeError('The "emitter" argument must be of type EventEmitter. Received type '+typeof e);e.addEventListener(t,(function i(o){n.once&&e.removeEventListener(t,i),s(o)}))}}Object.defineProperty(o,"defaultMaxListeners",{enumerable:!0,get:function(){return r},set:function(e){if("number"!=typeof e||e<0||i(e))throw new RangeError('The value of "defaultMaxListeners" is out of range. It must be a non-negative number. Received '+e+".");r=e}}),o.init=function(){void 0!==this._events&&this._events!==Object.getPrototypeOf(this)._events||(this._events=Object.create(null),this._eventsCount=0),this._maxListeners=this._maxListeners||void 0},o.prototype.setMaxListeners=function(e){if("number"!=typeof e||e<0||i(e))throw new RangeError('The value of "n" is out of range. It must be a non-negative number. Received '+e+".");return this._maxListeners=e,this},o.prototype.getMaxListeners=function(){return c(this)},o.prototype.emit=function(e){for(var t=[],s=1;s<arguments.length;s++)t.push(arguments[s]);var i="error"===e,o=this._events;if(void 0!==o)i=i&&void 0===o.error;else if(!i)return!1;if(i){var r;if(t.length>0&&(r=t[0]),r instanceof Error)throw r;var a=new Error("Unhandled error."+(r?" ("+r.message+")":""));throw a.context=r,a}var c=o[e];if(void 0===c)return!1;if("function"==typeof c)n(c,this,t);else{var l=c.length,h=d(c,l);for(s=0;s<l;++s)n(h[s],this,t)}return!0},o.prototype.addListener=function(e,t){return l(this,e,t,!1)},o.prototype.on=o.prototype.addListener,o.prototype.prependListener=function(e,t){return l(this,e,t,!0)},o.prototype.once=function(e,t){return a(t),this.on(e,u(this,e,t)),this},o.prototype.prependOnceListener=function(e,t){return a(t),this.prependListener(e,u(this,e,t)),this},o.prototype.removeListener=function(e,t){var s,n,i,o,r;if(a(t),void 0===(n=this._events))return this;if(void 0===(s=n[e]))return this;if(s===t||s.listener===t)0==--this._eventsCount?this._events=Object.create(null):(delete n[e],n.removeListener&&this.emit("removeListener",e,s.listener||t));else if("function"!=typeof s){for(i=-1,o=s.length-1;o>=0;o--)if(s[o]===t||s[o].listener===t){r=s[o].listener,i=o;break}if(i<0)return this;0===i?s.shift():function(e,t){for(;t+1<e.length;t++)e[t]=e[t+1];e.pop()}(s,i),1===s.length&&(n[e]=s[0]),void 0!==n.removeListener&&this.emit("removeListener",e,r||t)}return this},o.prototype.off=o.prototype.removeListener,o.prototype.removeAllListeners=function(e){var t,s,n;if(void 0===(s=this._events))return this;if(void 0===s.removeListener)return 0===arguments.length?(this._events=Object.create(null),this._eventsCount=0):void 0!==s[e]&&(0==--this._eventsCount?this._events=Object.create(null):delete s[e]),this;if(0===arguments.length){var i,o=Object.keys(s);for(n=0;n<o.length;++n)"removeListener"!==(i=o[n])&&this.removeAllListeners(i);return this.removeAllListeners("removeListener"),this._events=Object.create(null),this._eventsCount=0,this}if("function"==typeof(t=s[e]))this.removeListener(e,t);else if(void 0!==t)for(n=t.length-1;n>=0;n--)this.removeListener(e,t[n]);return this},o.prototype.listeners=function(e){return m(this,e,!0)},o.prototype.rawListeners=function(e){return m(this,e,!1)},o.listenerCount=function(e,t){return"function"==typeof e.listenerCount?e.listenerCount(t):p.call(e,t)},o.prototype.listenerCount=p,o.prototype.eventNames=function(){return this._eventsCount>0?t(this._events):[]}},626:(e,t,s)=>{"use strict";s.r(t),s.d(t,{default:()=>n});const n="./31cfb2f0ac4f2117919ffd17ceb5045f.png"},478:(e,t,s)=>{"use strict";s.r(t),s.d(t,{default:()=>n});const n="./e0457b5fe828bb92809c99905ae4df36.png"},816:(e,t,s)=>{"use strict";s.r(t),s.d(t,{default:()=>a});var n=s(91),i=s.n(n),o=new URL(s(349),s.b),r=new URL(s(544),s.b);const a='<!DOCTYPE html> <html lang="en"> <head> <meta charset="UTF-8"/> <meta name="viewport" content="width=device-width,initial-scale=1"/> <title>Builder</title> <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.0.0-beta1/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-giJF6kkoqNQ00vy+HMDP7azOuL0xtbfIcaT9wjKHr8RbDVddVHyTfAAsrekwKmP1" crossorigin="anonymous"/> <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.0.0-beta1/dist/js/bootstrap.bundle.min.js" integrity="sha384-ygbV9kiqUc6oa4msXn9868pTtWMgiQaeYH7/t7LECLbyPA2x65Kgf80OJFdroafW" crossorigin="anonymous"><\/script> <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.5.1/jquery.min.js"><\/script> <style></style> </head> <body> <header> <nav class="navbar navbar-expand-md navbar-dark bg-dark"> <a class="navbar-brand" href="#">Builder</a> </nav> </header> <main role="main" class="container"> <h1 class="mt-5">Poll Overlay Builder</h1> <p class="lead"> Here you can easily customize the overlay. <br/> When you\'re done, press the button at the bottom, and then use the output URL as the web browser URL in your stream program. </p> <hr/> <form id="form"> <div class="form-group"> <label for="channel">Channel:</label> <input type="text" class="form-control" id="channel" name="channel" placeholder="d2aniel" required/> <small id="channelNotice" class="form-text text-muted">Enter here the channel name only. Without <code>https://twitch.tv/</code></small> </div> <div class="form-group"> <br/> <p class="form-check-label">Type:</p> <div class="form-check form-check-inline"> <input class="form-check-input" type="radio" name="type" id="type_bar" value="bar" checked="checked"/> <label class="form-check-label" for="type_bar"> <img src="'+i()(o)+'" alt="Bar"/> </label> </div> <div class="form-check form-check-inline"> <input class="form-check-input" type="radio" name="type" id="type_pie" value="pie"/> <label class="form-check-label" for="type_pie"> <img src="'+i()(r)+'" alt="Pie"/> </label> </div> </div> <hr/> <h3>Advanced:</h3> <div class="form-group"> <label for="timeout">Timeout:</label> <input type="number" class="form-control" id="timeout" name="timeout" value="10"/> </div> <div class="form-group"> <label for="requiredPings">Required Reactions:</label> <input type="number" class="form-control" id="requiredPings" name="requiredPings" value="3"/> </div> <small id="timeout_requiredpings_notice" class="form-text text-muted"> <ul> <li> The overlay will be <strong>shown</strong> if more than <code class="sminf_reqp">{Required Pings}</code> reactions were detected in <code class="sminf_to">{Timeout}</code> seconds </li> <li> The overlay will be <strong>hidden</strong> if less than <code class="sminf_reqp">{Required Pings}</code> reactions were detected in <code class="sminf_to">{Timeout}</code> seconds </li> </ul> <script>const reqp=$("#requiredPings"),to=$("#timeout");function update(){$(".sminf_reqp").each((function(){$(this).html(reqp.val())})),$(".sminf_to").each((function(){$(this).html(to.val())}))}reqp.on("keydown",update).on("change",update),to.on("keydown",update).on("change",update)<\/script> </small> <hr/> <button type="submit" class="btn btn-primary">🔨</button> </form> <div id="output" style="display:none"> <hr/> <h2>Output:</h2> <input type="text" class="form-control" id="output_txt" name="channel" placeholder="(( Error ))" readonly="readonly"/> </div> <script>$("#form").on("submit",(t=>{t.preventDefault();const s=$("#form").serialize(),o=$("#output");"none"==o.css("display")&&(console.log("Has display: none!"),o.css("display","unset"));const e=$("#output_txt");let n=window.location.href;n.toLowerCase().endsWith("builder.html")&&(n=n.substring(0,n.length-13)),e.val(`${n}/?${s}`)}))<\/script> </main> </body> </html> '},91:e=>{"use strict";e.exports=function(e,t){return t||(t={}),e?(e=String(e.__esModule?e.default:e),t.hash&&(e+=t.hash),t.maybeNeedQuotes&&/[\t\n\f\r "'=<>`]/.test(e)?'"'.concat(e,'"'):e):e}},153:(e,t,s)=>{"use strict";s.r(t),s.d(t,{default:()=>_});var n=s(379),i=s.n(n),o=s(795),r=s.n(o),a=s(569),c=s.n(a),l=s(565),h=s.n(l),u=s(216),m=s.n(u),p=s(589),d=s.n(p),f=s(982),g={};g.styleTagTransform=d(),g.setAttributes=h(),g.insert=c().bind(null,"head"),g.domAPI=r(),g.insertStyleElement=m(),i()(f.Z,g);const _=f.Z&&f.Z.locals?f.Z.locals:void 0},379:e=>{"use strict";var t=[];function s(e){for(var s=-1,n=0;n<t.length;n++)if(t[n].identifier===e){s=n;break}return s}function n(e,n){for(var o={},r=[],a=0;a<e.length;a++){var c=e[a],l=n.base?c[0]+n.base:c[0],h=o[l]||0,u="".concat(l," ").concat(h);o[l]=h+1;var m=s(u),p={css:c[1],media:c[2],sourceMap:c[3],supports:c[4],layer:c[5]};if(-1!==m)t[m].references++,t[m].updater(p);else{var d=i(p,n);n.byIndex=a,t.splice(a,0,{identifier:u,updater:d,references:1})}r.push(u)}return r}function i(e,t){var s=t.domAPI(t);return s.update(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap&&t.supports===e.supports&&t.layer===e.layer)return;s.update(e=t)}else s.remove()}}e.exports=function(e,i){var o=n(e=e||[],i=i||{});return function(e){e=e||[];for(var r=0;r<o.length;r++){var a=s(o[r]);t[a].references--}for(var c=n(e,i),l=0;l<o.length;l++){var h=s(o[l]);0===t[h].references&&(t[h].updater(),t.splice(h,1))}o=c}}},569:e=>{"use strict";var t={};e.exports=function(e,s){var n=function(e){if(void 0===t[e]){var s=document.querySelector(e);if(window.HTMLIFrameElement&&s instanceof window.HTMLIFrameElement)try{s=s.contentDocument.head}catch(e){s=null}t[e]=s}return t[e]}(e);if(!n)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");n.appendChild(s)}},216:e=>{"use strict";e.exports=function(e){var t=document.createElement("style");return e.setAttributes(t,e.attributes),e.insert(t,e.options),t}},565:(e,t,s)=>{"use strict";e.exports=function(e){var t=s.nc;t&&e.setAttribute("nonce",t)}},795:e=>{"use strict";e.exports=function(e){var t=e.insertStyleElement(e);return{update:function(s){!function(e,t,s){var n="";s.supports&&(n+="@supports (".concat(s.supports,") {")),s.media&&(n+="@media ".concat(s.media," {"));var i=void 0!==s.layer;i&&(n+="@layer".concat(s.layer.length>0?" ".concat(s.layer):""," {")),n+=s.css,i&&(n+="}"),s.media&&(n+="}"),s.supports&&(n+="}");var o=s.sourceMap;o&&"undefined"!=typeof btoa&&(n+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(o))))," */")),t.styleTagTransform(n,e,t.options)}(t,e,s)},remove:function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(t)}}}},589:e=>{"use strict";e.exports=function(e,t){if(t.styleSheet)t.styleSheet.cssText=e;else{for(;t.firstChild;)t.removeChild(t.firstChild);t.appendChild(document.createTextNode(e))}}},993:(e,t,s)=>{const n=s(839);e.exports={client:n,Client:n}},681:(e,t,s)=>{const n=s(604),i=s(49);e.exports=function(e,t){let s=void 0!==e.url?e.url:e.uri;if(i.isURL(s)||(s=`https://api.twitch.tv/kraken${"/"===s[0]?s:`/${s}`}`),i.isNode()){const i=Object.assign({method:"GET",json:!0},e);i.qs&&(s+=`?${new URLSearchParams(i.qs)}`);const o={};"fetchAgent"in this.opts.connection&&(o.agent=this.opts.connection.fetchAgent);const r=n(s,{...o,method:i.method,headers:i.headers,body:i.body});let a={};r.then((e=>(a={statusCode:e.status,headers:e.headers},i.json?e.json():e.text()))).then((e=>t(null,a,e)),(e=>t(e,a,null)))}else{const n=Object.assign({method:"GET",headers:{}},e,{url:s}),i=new XMLHttpRequest;i.open(n.method,n.url,!0);for(const e in n.headers)i.setRequestHeader(e,n.headers[e]);i.responseType="json",i.addEventListener("load",(e=>{4===i.readyState&&(200!==i.status?t(i.status,null,null):t(null,null,i.response))})),i.send()}}},839:(e,t,s)=>{const n=void 0!==s.g?s.g:"undefined"!=typeof window?window:{},i=n.WebSocket||s(726),o=n.fetch||s(604),r=s(681),a=s(641),c=s(378).EventEmitter,l=s(352),h=s(549),u=s(776),m=s(49);let p=!1;const d=function e(t){if(this instanceof e==0)return new e(t);this.opts=m.get(t,{}),this.opts.channels=this.opts.channels||[],this.opts.connection=this.opts.connection||{},this.opts.identity=this.opts.identity||{},this.opts.options=this.opts.options||{},this.clientId=m.get(this.opts.options.clientId,null),this._globalDefaultChannel=m.channel(m.get(this.opts.options.globalDefaultChannel,"#tmijs")),this._skipMembership=m.get(this.opts.options.skipMembership,!1),this._skipUpdatingEmotesets=m.get(this.opts.options.skipUpdatingEmotesets,!1),this._updateEmotesetsTimer=null,this._updateEmotesetsTimerDelay=m.get(this.opts.options.updateEmotesetsTimer,6e4),this.maxReconnectAttempts=m.get(this.opts.connection.maxReconnectAttempts,1/0),this.maxReconnectInterval=m.get(this.opts.connection.maxReconnectInterval,3e4),this.reconnect=m.get(this.opts.connection.reconnect,!0),this.reconnectDecay=m.get(this.opts.connection.reconnectDecay,1.5),this.reconnectInterval=m.get(this.opts.connection.reconnectInterval,1e3),this.reconnecting=!1,this.reconnections=0,this.reconnectTimer=this.reconnectInterval,this.secure=m.get(this.opts.connection.secure,!this.opts.connection.server&&!this.opts.connection.port),this.emotes="",this.emotesets={},this.channels=[],this.currentLatency=0,this.globaluserstate={},this.lastJoined="",this.latency=new Date,this.moderators={},this.pingLoop=null,this.pingTimeout=null,this.reason="",this.username="",this.userstate={},this.wasCloseCalled=!1,this.ws=null;let s="error";this.opts.options.debug&&(s="info"),this.log=this.opts.logger||l;try{l.setLevel(s)}catch(e){}this.opts.channels.forEach(((e,t,s)=>s[t]=m.channel(e))),c.call(this),this.setMaxListeners(0)};m.inherits(d,c);for(const e in a)d.prototype[e]=a[e];d.prototype.emits=function(e,t){for(let s=0;s<e.length;s++){const n=s<t.length?t[s]:t[t.length-1];this.emit.apply(this,[e[s]].concat(n))}},d.prototype.api=function(...e){p||(this.log.warn("Client.prototype.api is deprecated and will be removed for version 2.0.0"),p=!0),r(...e)},d.prototype.handleMessage=function(e){if(!e)return;this.listenerCount("raw_message")&&this.emit("raw_message",JSON.parse(JSON.stringify(e)),e);const t=m.channel(m.get(e.params[0],null));let s=m.get(e.params[1],null);const n=m.get(e.tags["msg-id"],null),i=e.tags=h.badges(h.badgeInfo(h.emotes(e.tags)));for(const e in i){if("emote-sets"===e||"ban-duration"===e||"bits"===e)continue;let t=i[e];"boolean"==typeof t?t=null:"1"===t?t=!0:"0"===t?t=!1:"string"==typeof t&&(t=m.unescapeIRC(t)),i[e]=t}if(null===e.prefix)switch(e.command){case"PING":this.emit("ping"),this._isConnected()&&this.ws.send("PONG");break;case"PONG":{const e=new Date;this.currentLatency=(e.getTime()-this.latency.getTime())/1e3,this.emits(["pong","_promisePing"],[[this.currentLatency]]),clearTimeout(this.pingTimeout);break}default:this.log.warn(`Could not parse message with no prefix:\n${JSON.stringify(e,null,4)}`)}else if("tmi.twitch.tv"===e.prefix)switch(e.command){case"002":case"003":case"004":case"372":case"375":case"CAP":case"SERVERCHANGE":break;case"001":this.username=e.params[0];break;case"376":{this.log.info("Connected to server."),this.userstate[this._globalDefaultChannel]={},this.emits(["connected","_promiseConnect"],[[this.server,this.port],[null]]),this.reconnections=0,this.reconnectTimer=this.reconnectInterval,this.pingLoop=setInterval((()=>{this._isConnected()&&this.ws.send("PING"),this.latency=new Date,this.pingTimeout=setTimeout((()=>{null!==this.ws&&(this.wasCloseCalled=!1,this.log.error("Ping timeout."),this.ws.close(),clearInterval(this.pingLoop),clearTimeout(this.pingTimeout),clearTimeout(this._updateEmotesetsTimer))}),m.get(this.opts.connection.timeout,9999))}),6e4);let e=m.get(this.opts.options.joinInterval,2e3);e<300&&(e=300);const t=new u(e),s=[...new Set([...this.opts.channels,...this.channels])];this.channels=[];for(let e=0;e<s.length;e++){const n=s[e];t.add((()=>{this._isConnected()&&this.join(n).catch((e=>this.log.error(e)))}))}t.next();break}case"NOTICE":{const i=[null],o=[t,n,s],r=[t,!0],a=[t,!1],c=[o,i],l=[o,[n]],h=`[${t}] ${s}`;switch(n){case"subs_on":this.log.info(`[${t}] This room is now in subscribers-only mode.`),this.emits(["subscriber","subscribers","_promiseSubscribers"],[r,r,i]);break;case"subs_off":this.log.info(`[${t}] This room is no longer in subscribers-only mode.`),this.emits(["subscriber","subscribers","_promiseSubscribersoff"],[a,a,i]);break;case"emote_only_on":this.log.info(`[${t}] This room is now in emote-only mode.`),this.emits(["emoteonly","_promiseEmoteonly"],[r,i]);break;case"emote_only_off":this.log.info(`[${t}] This room is no longer in emote-only mode.`),this.emits(["emoteonly","_promiseEmoteonlyoff"],[a,i]);break;case"slow_on":case"slow_off":case"followers_on_zero":case"followers_on":case"followers_off":case"host_on":case"host_off":break;case"r9k_on":this.log.info(`[${t}] This room is now in r9k mode.`),this.emits(["r9kmode","r9kbeta","_promiseR9kbeta"],[r,r,i]);break;case"r9k_off":this.log.info(`[${t}] This room is no longer in r9k mode.`),this.emits(["r9kmode","r9kbeta","_promiseR9kbetaoff"],[a,a,i]);break;case"room_mods":{const e=s.split(": "),n=(e.length>1?e[1]:"").toLowerCase().split(", ").filter((e=>e));this.emits(["_promiseMods","mods"],[[null,n],[t,n]]);break}case"no_mods":this.emits(["_promiseMods","mods"],[[null,[]],[t,[]]]);break;case"vips_success":{s.endsWith(".")&&(s=s.slice(0,-1));const e=s.split(": "),n=(e.length>1?e[1]:"").toLowerCase().split(", ").filter((e=>e));this.emits(["_promiseVips","vips"],[[null,n],[t,n]]);break}case"no_vips":this.emits(["_promiseVips","vips"],[[null,[]],[t,[]]]);break;case"already_banned":case"bad_ban_admin":case"bad_ban_anon":case"bad_ban_broadcaster":case"bad_ban_global_mod":case"bad_ban_mod":case"bad_ban_self":case"bad_ban_staff":case"usage_ban":this.log.info(h),this.emits(["notice","_promiseBan"],l);break;case"ban_success":this.log.info(h),this.emits(["notice","_promiseBan"],c);break;case"usage_clear":this.log.info(h),this.emits(["notice","_promiseClear"],l);break;case"usage_mods":this.log.info(h),this.emits(["notice","_promiseMods"],[o,[n,[]]]);break;case"mod_success":this.log.info(h),this.emits(["notice","_promiseMod"],c);break;case"usage_vips":this.log.info(h),this.emits(["notice","_promiseVips"],[o,[n,[]]]);break;case"usage_vip":case"bad_vip_grantee_banned":case"bad_vip_grantee_already_vip":case"bad_vip_max_vips_reached":case"bad_vip_achievement_incomplete":this.log.info(h),this.emits(["notice","_promiseVip"],[o,[n,[]]]);break;case"vip_success":this.log.info(h),this.emits(["notice","_promiseVip"],c);break;case"usage_mod":case"bad_mod_banned":case"bad_mod_mod":this.log.info(h),this.emits(["notice","_promiseMod"],l);break;case"unmod_success":this.log.info(h),this.emits(["notice","_promiseUnmod"],c);break;case"unvip_success":this.log.info(h),this.emits(["notice","_promiseUnvip"],c);break;case"usage_unmod":case"bad_unmod_mod":this.log.info(h),this.emits(["notice","_promiseUnmod"],l);break;case"usage_unvip":case"bad_unvip_grantee_not_vip":this.log.info(h),this.emits(["notice","_promiseUnvip"],l);break;case"color_changed":this.log.info(h),this.emits(["notice","_promiseColor"],c);break;case"usage_color":case"turbo_only_color":this.log.info(h),this.emits(["notice","_promiseColor"],l);break;case"commercial_success":this.log.info(h),this.emits(["notice","_promiseCommercial"],c);break;case"usage_commercial":case"bad_commercial_error":this.log.info(h),this.emits(["notice","_promiseCommercial"],l);break;case"hosts_remaining":{this.log.info(h);const e=isNaN(s[0])?0:parseInt(s[0]);this.emits(["notice","_promiseHost"],[o,[null,~~e]]);break}case"bad_host_hosting":case"bad_host_rate_exceeded":case"bad_host_error":case"usage_host":this.log.info(h),this.emits(["notice","_promiseHost"],[o,[n,null]]);break;case"already_r9k_on":case"usage_r9k_on":this.log.info(h),this.emits(["notice","_promiseR9kbeta"],l);break;case"already_r9k_off":case"usage_r9k_off":this.log.info(h),this.emits(["notice","_promiseR9kbetaoff"],l);break;case"timeout_success":this.log.info(h),this.emits(["notice","_promiseTimeout"],c);break;case"delete_message_success":this.log.info(`[${t} ${s}]`),this.emits(["notice","_promiseDeletemessage"],c);break;case"already_subs_off":case"usage_subs_off":this.log.info(h),this.emits(["notice","_promiseSubscribersoff"],l);break;case"already_subs_on":case"usage_subs_on":this.log.info(h),this.emits(["notice","_promiseSubscribers"],l);break;case"already_emote_only_off":case"usage_emote_only_off":this.log.info(h),this.emits(["notice","_promiseEmoteonlyoff"],l);break;case"already_emote_only_on":case"usage_emote_only_on":this.log.info(h),this.emits(["notice","_promiseEmoteonly"],l);break;case"usage_slow_on":this.log.info(h),this.emits(["notice","_promiseSlow"],l);break;case"usage_slow_off":this.log.info(h),this.emits(["notice","_promiseSlowoff"],l);break;case"usage_timeout":case"bad_timeout_admin":case"bad_timeout_anon":case"bad_timeout_broadcaster":case"bad_timeout_duration":case"bad_timeout_global_mod":case"bad_timeout_mod":case"bad_timeout_self":case"bad_timeout_staff":this.log.info(h),this.emits(["notice","_promiseTimeout"],l);break;case"untimeout_success":case"unban_success":this.log.info(h),this.emits(["notice","_promiseUnban"],c);break;case"usage_unban":case"bad_unban_no_ban":this.log.info(h),this.emits(["notice","_promiseUnban"],l);break;case"usage_delete":case"bad_delete_message_error":case"bad_delete_message_broadcaster":case"bad_delete_message_mod":this.log.info(h),this.emits(["notice","_promiseDeletemessage"],l);break;case"usage_unhost":case"not_hosting":this.log.info(h),this.emits(["notice","_promiseUnhost"],l);break;case"whisper_invalid_login":case"whisper_invalid_self":case"whisper_limit_per_min":case"whisper_limit_per_sec":case"whisper_restricted":case"whisper_restricted_recipient":this.log.info(h),this.emits(["notice","_promiseWhisper"],l);break;case"no_permission":case"msg_banned":case"msg_room_not_found":case"msg_channel_suspended":case"tos_ban":case"invalid_user":this.log.info(h),this.emits(["notice","_promiseBan","_promiseClear","_promiseUnban","_promiseTimeout","_promiseDeletemessage","_promiseMods","_promiseMod","_promiseUnmod","_promiseVips","_promiseVip","_promiseUnvip","_promiseCommercial","_promiseHost","_promiseUnhost","_promiseJoin","_promisePart","_promiseR9kbeta","_promiseR9kbetaoff","_promiseSlow","_promiseSlowoff","_promiseFollowers","_promiseFollowersoff","_promiseSubscribers","_promiseSubscribersoff","_promiseEmoteonly","_promiseEmoteonlyoff","_promiseWhisper"],[o,[n,t]]);break;case"msg_rejected":case"msg_rejected_mandatory":this.log.info(h),this.emit("automod",t,n,s);break;case"unrecognized_cmd":case"cmds_available":case"host_target_went_offline":case"msg_censored_broadcaster":case"msg_duplicate":case"msg_emoteonly":case"msg_verified_email":case"msg_ratelimit":case"msg_subsonly":case"msg_timedout":case"msg_bad_characters":case"msg_channel_blocked":case"msg_facebook":case"msg_followersonly":case"msg_followersonly_followed":case"msg_followersonly_zero":case"msg_slowmode":case"msg_suspended":case"no_help":case"usage_disconnect":case"usage_help":case"usage_me":case"unavailable_command":this.log.info(h),this.emit("notice",t,n,s);break;default:s.includes("Login unsuccessful")||s.includes("Login authentication failed")||s.includes("Error logging in")||s.includes("Improperly formatted auth")?(this.wasCloseCalled=!1,this.reconnect=!1,this.reason=s,this.log.error(this.reason),this.ws.close()):s.includes("Invalid NICK")?(this.wasCloseCalled=!1,this.reconnect=!1,this.reason="Invalid NICK.",this.log.error(this.reason),this.ws.close()):(this.log.warn(`Could not parse NOTICE from tmi.twitch.tv:\n${JSON.stringify(e,null,4)}`),this.emit("notice",t,n,s))}break}case"USERNOTICE":{const e=i["display-name"]||i.login,o=i["msg-param-sub-plan"]||"",r=m.unescapeIRC(m.get(i["msg-param-sub-plan-name"],""))||null,a={prime:o.includes("Prime"),plan:o,planName:r},c=~~(i["msg-param-streak-months"]||0),l=i["msg-param-recipient-display-name"]||i["msg-param-recipient-user-name"],h=~~i["msg-param-mass-gift-count"];switch(i["message-type"]=n,n){case"resub":this.emits(["resub","subanniversary"],[[t,e,c,s,i,a]]);break;case"sub":this.emits(["subscription","sub"],[[t,e,a,s,i]]);break;case"subgift":this.emit("subgift",t,e,c,l,a,i);break;case"anonsubgift":this.emit("anonsubgift",t,c,l,a,i);break;case"submysterygift":this.emit("submysterygift",t,e,h,a,i);break;case"anonsubmysterygift":this.emit("anonsubmysterygift",t,h,a,i);break;case"primepaidupgrade":this.emit("primepaidupgrade",t,e,a,i);break;case"giftpaidupgrade":{const s=i["msg-param-sender-name"]||i["msg-param-sender-login"];this.emit("giftpaidupgrade",t,e,s,i);break}case"anongiftpaidupgrade":this.emit("anongiftpaidupgrade",t,e,i);break;case"raid":{const e=i["msg-param-displayName"]||i["msg-param-login"],s=+i["msg-param-viewerCount"];this.emit("raided",t,e,s,i);break}case"ritual":{const n=i["msg-param-ritual-name"];"new_chatter"===n?this.emit("newchatter",t,e,i,s):this.emit("ritual",n,t,e,i,s);break}default:this.emit("usernotice",n,t,i,s)}break}case"HOSTTARGET":{const e=s.split(" "),n=~~e[1]||0;"-"===e[0]?(this.log.info(`[${t}] Exited host mode.`),this.emits(["unhost","_promiseUnhost"],[[t,n],[null]])):(this.log.info(`[${t}] Now hosting ${e[0]} for ${n} viewer(s).`),this.emit("hosting",t,e[0],n));break}case"CLEARCHAT":if(e.params.length>1){const n=m.get(e.tags["ban-duration"],null);null===n?(this.log.info(`[${t}] ${s} has been banned.`),this.emit("ban",t,s,null,e.tags)):(this.log.info(`[${t}] ${s} has been timed out for ${n} seconds.`),this.emit("timeout",t,s,null,~~n,e.tags))}else this.log.info(`[${t}] Chat was cleared by a moderator.`),this.emits(["clearchat","_promiseClear"],[[t],[null]]);break;case"CLEARMSG":if(e.params.length>1){const e=s,n=i.login;i["message-type"]="messagedeleted",this.log.info(`[${t}] ${n}'s message has been deleted.`),this.emit("messagedeleted",t,n,e,i)}break;case"RECONNECT":this.log.info("Received RECONNECT request from Twitch.."),this.log.info(`Disconnecting and reconnecting in ${Math.round(this.reconnectTimer/1e3)} seconds..`),this.disconnect().catch((e=>this.log.error(e))),setTimeout((()=>this.connect().catch((e=>this.log.error(e)))),this.reconnectTimer);break;case"USERSTATE":e.tags.username=this.username,"mod"===e.tags["user-type"]&&(this.moderators[t]||(this.moderators[t]=[]),this.moderators[t].includes(this.username)||this.moderators[t].push(this.username)),m.isJustinfan(this.getUsername())||this.userstate[t]||(this.userstate[t]=i,this.lastJoined=t,this.channels.push(t),this.log.info(`Joined ${t}`),this.emit("join",t,m.username(this.getUsername()),!0)),e.tags["emote-sets"]!==this.emotes&&this._updateEmoteset(e.tags["emote-sets"]),this.userstate[t]=i;break;case"GLOBALUSERSTATE":this.globaluserstate=i,this.emit("globaluserstate",i),void 0!==e.tags["emote-sets"]&&this._updateEmoteset(e.tags["emote-sets"]);break;case"ROOMSTATE":if(m.channel(this.lastJoined)===t&&this.emit("_promiseJoin",null,t),e.tags.channel=t,this.emit("roomstate",t,e.tags),!m.hasOwn(e.tags,"subs-only")){if(m.hasOwn(e.tags,"slow"))if("boolean"!=typeof e.tags.slow||e.tags.slow){const s=[t,!0,~~e.tags.slow];this.log.info(`[${t}] This room is now in slow mode.`),this.emits(["slow","slowmode","_promiseSlow"],[s,s,[null]])}else{const e=[t,!1,0];this.log.info(`[${t}] This room is no longer in slow mode.`),this.emits(["slow","slowmode","_promiseSlowoff"],[e,e,[null]])}if(m.hasOwn(e.tags,"followers-only"))if("-1"===e.tags["followers-only"]){const e=[t,!1,0];this.log.info(`[${t}] This room is no longer in followers-only mode.`),this.emits(["followersonly","followersmode","_promiseFollowersoff"],[e,e,[null]])}else{const s=[t,!0,~~e.tags["followers-only"]];this.log.info(`[${t}] This room is now in follower-only mode.`),this.emits(["followersonly","followersmode","_promiseFollowers"],[s,s,[null]])}}break;default:this.log.warn(`Could not parse message from tmi.twitch.tv:\n${JSON.stringify(e,null,4)}`)}else if("jtv"===e.prefix)"MODE"===e.command?"+o"===s?(this.moderators[t]||(this.moderators[t]=[]),this.moderators[t].includes(e.params[2])||this.moderators[t].push(e.params[2]),this.emit("mod",t,e.params[2])):"-o"===s&&(this.moderators[t]||(this.moderators[t]=[]),this.moderators[t].filter((t=>t!==e.params[2])),this.emit("unmod",t,e.params[2])):this.log.warn(`Could not parse message from jtv:\n${JSON.stringify(e,null,4)}`);else switch(e.command){case"353":this.emit("names",e.params[2],e.params[3].split(" "));break;case"366":break;case"JOIN":{const s=e.prefix.split("!")[0];m.isJustinfan(this.getUsername())&&this.username===s&&(this.lastJoined=t,this.channels.push(t),this.log.info(`Joined ${t}`),this.emit("join",t,s,!0)),this.username!==s&&this.emit("join",t,s,!1);break}case"PART":{let s=!1;const n=e.prefix.split("!")[0];if(this.username===n){s=!0,this.userstate[t]&&delete this.userstate[t];let e=this.channels.indexOf(t);-1!==e&&this.channels.splice(e,1),e=this.opts.channels.indexOf(t),-1!==e&&this.opts.channels.splice(e,1),this.log.info(`Left ${t}`),this.emit("_promisePart",null)}this.emit("part",t,n,s);break}case"WHISPER":{const t=e.prefix.split("!")[0];this.log.info(`[WHISPER] <${t}>: ${s}`),m.hasOwn(e.tags,"username")||(e.tags.username=t),e.tags["message-type"]="whisper";const n=m.channel(e.tags.username);this.emits(["whisper","message"],[[n,e.tags,s,!1]]);break}case"PRIVMSG":if(e.tags.username=e.prefix.split("!")[0],"jtv"===e.tags.username){const e=m.username(s.split(" ")[0]),n=s.includes("auto");if(s.includes("hosting you for")){const i=m.extractNumber(s);this.emit("hosted",t,e,i,n)}else s.includes("hosting you")&&this.emit("hosted",t,e,0,n)}else{const n=m.get(this.opts.options.messagesLogLevel,"info"),i=m.actionMessage(s);if(e.tags["message-type"]=i?"action":"chat",s=i?i[1]:s,m.hasOwn(e.tags,"bits"))this.emit("cheer",t,e.tags,s);else{if(m.hasOwn(e.tags,"msg-id")){if("highlighted-message"===e.tags["msg-id"]){const n=e.tags["msg-id"];this.emit("redeem",t,e.tags.username,n,e.tags,s)}else if("skip-subs-mode-message"===e.tags["msg-id"]){const n=e.tags["msg-id"];this.emit("redeem",t,e.tags.username,n,e.tags,s)}}else if(m.hasOwn(e.tags,"custom-reward-id")){const n=e.tags["custom-reward-id"];this.emit("redeem",t,e.tags.username,n,e.tags,s)}i?(this.log[n](`[${t}] *<${e.tags.username}>: ${s}`),this.emits(["action","message"],[[t,e.tags,s,!1]])):(this.log[n](`[${t}] <${e.tags.username}>: ${s}`),this.emits(["chat","message"],[[t,e.tags,s,!1]]))}}break;default:this.log.warn(`Could not parse message:\n${JSON.stringify(e,null,4)}`)}},d.prototype.connect=function(){return new Promise(((e,t)=>{this.server=m.get(this.opts.connection.server,"irc-ws.chat.twitch.tv"),this.port=m.get(this.opts.connection.port,80),this.secure&&(this.port=443),443===this.port&&(this.secure=!0),this.reconnectTimer=this.reconnectTimer*this.reconnectDecay,this.reconnectTimer>=this.maxReconnectInterval&&(this.reconnectTimer=this.maxReconnectInterval),this._openConnection(),this.once("_promiseConnect",(s=>{s?t(s):e([this.server,~~this.port])}))}))},d.prototype._openConnection=function(){const e=`${this.secure?"wss":"ws"}://${this.server}:${this.port}/`,t={};"agent"in this.opts.connection&&(t.agent=this.opts.connection.agent),this.ws=new i(e,"irc",t),this.ws.onmessage=this._onMessage.bind(this),this.ws.onerror=this._onError.bind(this),this.ws.onclose=this._onClose.bind(this),this.ws.onopen=this._onOpen.bind(this)},d.prototype._onOpen=function(){this._isConnected()&&(this.log.info(`Connecting to ${this.server} on port ${this.port}..`),this.emit("connecting",this.server,~~this.port),this.username=m.get(this.opts.identity.username,m.justinfan()),this._getToken().then((e=>{const t=m.password(e);this.log.info("Sending authentication to server.."),this.emit("logon");let s="twitch.tv/tags twitch.tv/commands";this._skipMembership||(s+=" twitch.tv/membership"),this.ws.send("CAP REQ :"+s),t?this.ws.send(`PASS ${t}`):m.isJustinfan(this.username)&&this.ws.send("PASS SCHMOOPIIE"),this.ws.send(`NICK ${this.username}`)})).catch((e=>{this.emits(["_promiseConnect","disconnected"],[[e],["Could not get a token."]])})))},d.prototype._getToken=function(){const e=this.opts.identity.password;let t;return"function"==typeof e?(t=e(),t instanceof Promise?t:Promise.resolve(t)):Promise.resolve(e)},d.prototype._onMessage=function(e){e.data.trim().split("\r\n").forEach((e=>{const t=h.msg(e);t&&this.handleMessage(t)}))},d.prototype._onError=function(){this.moderators={},this.userstate={},this.globaluserstate={},clearInterval(this.pingLoop),clearTimeout(this.pingTimeout),clearTimeout(this._updateEmotesetsTimer),this.reason=null===this.ws?"Connection closed.":"Unable to connect.",this.emits(["_promiseConnect","disconnected"],[[this.reason]]),this.reconnect&&this.reconnections===this.maxReconnectAttempts&&(this.emit("maxreconnect"),this.log.error("Maximum reconnection attempts reached.")),this.reconnect&&!this.reconnecting&&this.reconnections<=this.maxReconnectAttempts-1&&(this.reconnecting=!0,this.reconnections=this.reconnections+1,this.log.error(`Reconnecting in ${Math.round(this.reconnectTimer/1e3)} seconds..`),this.emit("reconnect"),setTimeout((()=>{this.reconnecting=!1,this.connect().catch((e=>this.log.error(e)))}),this.reconnectTimer)),this.ws=null},d.prototype._onClose=function(){this.moderators={},this.userstate={},this.globaluserstate={},clearInterval(this.pingLoop),clearTimeout(this.pingTimeout),clearTimeout(this._updateEmotesetsTimer),this.wasCloseCalled?(this.wasCloseCalled=!1,this.reason="Connection closed.",this.log.info(this.reason),this.emits(["_promiseConnect","_promiseDisconnect","disconnected"],[[this.reason],[null],[this.reason]])):(this.emits(["_promiseConnect","disconnected"],[[this.reason]]),this.reconnect&&this.reconnections===this.maxReconnectAttempts&&(this.emit("maxreconnect"),this.log.error("Maximum reconnection attempts reached.")),this.reconnect&&!this.reconnecting&&this.reconnections<=this.maxReconnectAttempts-1&&(this.reconnecting=!0,this.reconnections=this.reconnections+1,this.log.error(`Could not connect to server. Reconnecting in ${Math.round(this.reconnectTimer/1e3)} seconds..`),this.emit("reconnect"),setTimeout((()=>{this.reconnecting=!1,this.connect().catch((e=>this.log.error(e)))}),this.reconnectTimer))),this.ws=null},d.prototype._getPromiseDelay=function(){return this.currentLatency<=600?600:this.currentLatency+100},d.prototype._sendCommand=function(e,t,s,n){return new Promise(((i,o)=>{if(!this._isConnected())return o("Not connected to server.");if(null!==e&&"number"!=typeof e||(null===e&&(e=this._getPromiseDelay()),m.promiseDelay(e).then((()=>o("No response from Twitch.")))),null!==t){const e=m.channel(t);this.log.info(`[${e}] Executing command: ${s}`),this.ws.send(`PRIVMSG ${e} :${s}`)}else this.log.info(`Executing command: ${s}`),this.ws.send(s);"function"==typeof n?n(i,o):i()}))},d.prototype._sendMessage=function(e,t,s,n){return new Promise(((i,o)=>{if(!this._isConnected())return o("Not connected to server.");if(m.isJustinfan(this.getUsername()))return o("Cannot send anonymous messages.");const r=m.channel(t);if(this.userstate[r]||(this.userstate[r]={}),s.length>=500){const n=m.splitLine(s,500);s=n[0],setTimeout((()=>{this._sendMessage(e,t,n[1],(()=>{}))}),350)}this.ws.send(`PRIVMSG ${r} :${s}`);const a={};Object.keys(this.emotesets).forEach((e=>this.emotesets[e].forEach((e=>(m.isRegex(e.code)?h.emoteRegex:h.emoteString)(s,e.code,e.id,a)))));const c=Object.assign(this.userstate[r],h.emotes({emotes:h.transformEmotes(a)||null})),l=m.get(this.opts.options.messagesLogLevel,"info"),u=m.actionMessage(s);u?(c["message-type"]="action",this.log[l](`[${r}] *<${this.getUsername()}>: ${u[1]}`),this.emits(["action","message"],[[r,c,u[1],!0]])):(c["message-type"]="chat",this.log[l](`[${r}] <${this.getUsername()}>: ${s}`),this.emits(["chat","message"],[[r,c,s,!0]])),"function"==typeof n?n(i,o):i()}))},d.prototype._updateEmoteset=function(e){let t=void 0!==e;if(t&&(e===this.emotes?t=!1:this.emotes=e),this._skipUpdatingEmotesets)return void(t&&this.emit("emotesets",e,{}));const s=()=>{this._updateEmotesetsTimerDelay>0&&(clearTimeout(this._updateEmotesetsTimer),this._updateEmotesetsTimer=setTimeout((()=>this._updateEmoteset(e)),this._updateEmotesetsTimerDelay))};this._getToken().then((t=>{const s=`https://api.twitch.tv/kraken/chat/emoticon_images?emotesets=${e}`,n={};return"fetchAgent"in this.opts.connection&&(n.agent=this.opts.connection.fetchAgent),o(s,{...n,headers:{Accept:"application/vnd.twitchtv.v5+json",Authorization:`OAuth ${m.token(t)}`,"Client-ID":this.clientId}})})).then((e=>e.json())).then((t=>{this.emotesets=t.emoticon_sets||{},this.emit("emotesets",e,this.emotesets),s()})).catch((()=>s()))},d.prototype.getUsername=function(){return this.username},d.prototype.getOptions=function(){return this.opts},d.prototype.getChannels=function(){return this.channels},d.prototype.isMod=function(e,t){const s=m.channel(e);return this.moderators[s]||(this.moderators[s]=[]),this.moderators[s].includes(m.username(t))},d.prototype.readyState=function(){return null===this.ws?"CLOSED":["CONNECTING","OPEN","CLOSING","CLOSED"][this.ws.readyState]},d.prototype._isConnected=function(){return null!==this.ws&&1===this.ws.readyState},d.prototype.disconnect=function(){return new Promise(((e,t)=>{null!==this.ws&&3!==this.ws.readyState?(this.wasCloseCalled=!0,this.log.info("Disconnecting from server.."),this.ws.close(),this.once("_promiseDisconnect",(()=>e([this.server,~~this.port])))):(this.log.error("Cannot disconnect from server. Socket is not opened or connection is already closing."),t("Cannot disconnect from server. Socket is not opened or connection is already closing."))}))},d.prototype.off=d.prototype.removeListener,e.exports&&(e.exports=d),"undefined"!=typeof window&&(window.tmi={client:d,Client:d})},641:(e,t,s)=>{const n=s(49);function i(e,t){return e=n.channel(e),t=n.get(t,30),this._sendCommand(null,e,`/followers ${t}`,((s,n)=>{this.once("_promiseFollowers",(i=>{i?n(i):s([e,~~t])}))}))}function o(e){return e=n.channel(e),this._sendCommand(null,e,"/followersoff",((t,s)=>{this.once("_promiseFollowersoff",(n=>{n?s(n):t([e])}))}))}function r(e){return e=n.channel(e),this._sendCommand(null,null,`PART ${e}`,((t,s)=>{this.once("_promisePart",(n=>{n?s(n):t([e])}))}))}function a(e){return e=n.channel(e),this._sendCommand(null,e,"/r9kbeta",((t,s)=>{this.once("_promiseR9kbeta",(n=>{n?s(n):t([e])}))}))}function c(e){return e=n.channel(e),this._sendCommand(null,e,"/r9kbetaoff",((t,s)=>{this.once("_promiseR9kbetaoff",(n=>{n?s(n):t([e])}))}))}function l(e,t){return e=n.channel(e),t=n.get(t,300),this._sendCommand(null,e,`/slow ${t}`,((s,n)=>{this.once("_promiseSlow",(i=>{i?n(i):s([e,~~t])}))}))}function h(e){return e=n.channel(e),this._sendCommand(null,e,"/slowoff",((t,s)=>{this.once("_promiseSlowoff",(n=>{n?s(n):t([e])}))}))}e.exports={action(e,t){return e=n.channel(e),t=`ACTION ${t}`,this._sendMessage(this._getPromiseDelay(),e,t,((s,n)=>{s([e,t])}))},ban(e,t,s){return e=n.channel(e),t=n.username(t),s=n.get(s,""),this._sendCommand(null,e,`/ban ${t} ${s}`,((n,i)=>{this.once("_promiseBan",(o=>{o?i(o):n([e,t,s])}))}))},clear(e){return e=n.channel(e),this._sendCommand(null,e,"/clear",((t,s)=>{this.once("_promiseClear",(n=>{n?s(n):t([e])}))}))},color(e,t){return t=n.get(t,e),this._sendCommand(null,"#tmijs",`/color ${t}`,((e,s)=>{this.once("_promiseColor",(n=>{n?s(n):e([t])}))}))},commercial(e,t){return e=n.channel(e),t=n.get(t,30),this._sendCommand(null,e,`/commercial ${t}`,((s,n)=>{this.once("_promiseCommercial",(i=>{i?n(i):s([e,~~t])}))}))},deletemessage(e,t){return e=n.channel(e),this._sendCommand(null,e,`/delete ${t}`,((t,s)=>{this.once("_promiseDeletemessage",(n=>{n?s(n):t([e])}))}))},emoteonly(e){return e=n.channel(e),this._sendCommand(null,e,"/emoteonly",((t,s)=>{this.once("_promiseEmoteonly",(n=>{n?s(n):t([e])}))}))},emoteonlyoff(e){return e=n.channel(e),this._sendCommand(null,e,"/emoteonlyoff",((t,s)=>{this.once("_promiseEmoteonlyoff",(n=>{n?s(n):t([e])}))}))},followersonly:i,followersmode:i,followersonlyoff:o,followersmodeoff:o,host(e,t){return e=n.channel(e),t=n.username(t),this._sendCommand(2e3,e,`/host ${t}`,((s,n)=>{this.once("_promiseHost",((i,o)=>{i?n(i):s([e,t,~~o])}))}))},join(e){return e=n.channel(e),this._sendCommand(void 0,null,`JOIN ${e}`,((t,s)=>{const i="_promiseJoin";let o=!1;const r=(a,c)=>{e===n.channel(c)&&(this.removeListener(i,r),o=!0,a?s(a):t([e]))};this.on(i,r);const a=this._getPromiseDelay();n.promiseDelay(a).then((()=>{o||this.emit(i,"No response from Twitch.",e)}))}))},mod(e,t){return e=n.channel(e),t=n.username(t),this._sendCommand(null,e,`/mod ${t}`,((s,n)=>{this.once("_promiseMod",(i=>{i?n(i):s([e,t])}))}))},mods(e){return e=n.channel(e),this._sendCommand(null,e,"/mods",((t,s)=>{this.once("_promiseMods",((n,i)=>{n?s(n):(i.forEach((t=>{this.moderators[e]||(this.moderators[e]=[]),this.moderators[e].includes(t)||this.moderators[e].push(t)})),t(i))}))}))},part:r,leave:r,ping(){return this._sendCommand(null,null,"PING",((e,t)=>{this.latency=new Date,this.pingTimeout=setTimeout((()=>{null!==this.ws&&(this.wasCloseCalled=!1,this.log.error("Ping timeout."),this.ws.close(),clearInterval(this.pingLoop),clearTimeout(this.pingTimeout))}),n.get(this.opts.connection.timeout,9999)),this.once("_promisePing",(t=>e([parseFloat(t)])))}))},r9kbeta:a,r9kmode:a,r9kbetaoff:c,r9kmodeoff:c,raw(e){return this._sendCommand(null,null,e,((t,s)=>{t([e])}))},say(e,t){return e=n.channel(e),t.startsWith(".")&&!t.startsWith("..")||t.startsWith("/")||t.startsWith("\\")?"me "===t.substr(1,3)?this.action(e,t.substr(4)):this._sendCommand(null,e,t,((s,n)=>{s([e,t])})):this._sendMessage(this._getPromiseDelay(),e,t,((s,n)=>{s([e,t])}))},slow:l,slowmode:l,slowoff:h,slowmodeoff:h,subscribers(e){return e=n.channel(e),this._sendCommand(null,e,"/subscribers",((t,s)=>{this.once("_promiseSubscribers",(n=>{n?s(n):t([e])}))}))},subscribersoff(e){return e=n.channel(e),this._sendCommand(null,e,"/subscribersoff",((t,s)=>{this.once("_promiseSubscribersoff",(n=>{n?s(n):t([e])}))}))},timeout(e,t,s,i){return e=n.channel(e),t=n.username(t),null===s||n.isInteger(s)||(i=s,s=300),s=n.get(s,300),i=n.get(i,""),this._sendCommand(null,e,`/timeout ${t} ${s} ${i}`,((n,o)=>{this.once("_promiseTimeout",(r=>{r?o(r):n([e,t,~~s,i])}))}))},unban(e,t){return e=n.channel(e),t=n.username(t),this._sendCommand(null,e,`/unban ${t}`,((s,n)=>{this.once("_promiseUnban",(i=>{i?n(i):s([e,t])}))}))},unhost(e){return e=n.channel(e),this._sendCommand(2e3,e,"/unhost",((t,s)=>{this.once("_promiseUnhost",(n=>{n?s(n):t([e])}))}))},unmod(e,t){return e=n.channel(e),t=n.username(t),this._sendCommand(null,e,`/unmod ${t}`,((s,n)=>{this.once("_promiseUnmod",(i=>{i?n(i):s([e,t])}))}))},unvip(e,t){return e=n.channel(e),t=n.username(t),this._sendCommand(null,e,`/unvip ${t}`,((s,n)=>{this.once("_promiseUnvip",(i=>{i?n(i):s([e,t])}))}))},vip(e,t){return e=n.channel(e),t=n.username(t),this._sendCommand(null,e,`/vip ${t}`,((s,n)=>{this.once("_promiseVip",(i=>{i?n(i):s([e,t])}))}))},vips(e){return e=n.channel(e),this._sendCommand(null,e,"/vips",((e,t)=>{this.once("_promiseVips",((s,n)=>{s?t(s):e(n)}))}))},whisper(e,t){return(e=n.username(e))===this.getUsername()?Promise.reject("Cannot send a whisper to the same account."):this._sendCommand(null,"#tmijs",`/w ${e} ${t}`,((e,t)=>{this.once("_promiseWhisper",(e=>{e&&t(e)}))})).catch((s=>{if(s&&"string"==typeof s&&0!==s.indexOf("No response from Twitch."))throw s;const i=n.channel(e),o=Object.assign({"message-type":"whisper","message-id":null,"thread-id":null,username:this.getUsername()},this.globaluserstate);return this.emits(["whisper","message"],[[i,o,t,!0],[i,o,t,!0]]),[e,t]}))}}},378:e=>{function t(){this._events=this._events||{},this._maxListeners=this._maxListeners||void 0}function s(e){return"function"==typeof e}function n(e){return"object"==typeof e&&null!==e}function i(e){return void 0===e}e.exports=t,t.EventEmitter=t,t.prototype._events=void 0,t.prototype._maxListeners=void 0,t.defaultMaxListeners=10,t.prototype.setMaxListeners=function(e){if("number"!=typeof e||e<0||isNaN(e))throw TypeError("n must be a positive number");return this._maxListeners=e,this},t.prototype.emit=function(e){var t,o,r,a,c,l;if(this._events||(this._events={}),"error"===e&&(!this._events.error||n(this._events.error)&&!this._events.error.length)){if((t=arguments[1])instanceof Error)throw t;throw TypeError('Uncaught, unspecified "error" event.')}if(i(o=this._events[e]))return!1;if(s(o))switch(arguments.length){case 1:o.call(this);break;case 2:o.call(this,arguments[1]);break;case 3:o.call(this,arguments[1],arguments[2]);break;default:a=Array.prototype.slice.call(arguments,1),o.apply(this,a)}else if(n(o))for(a=Array.prototype.slice.call(arguments,1),r=(l=o.slice()).length,c=0;c<r;c++)l[c].apply(this,a);return!0},t.prototype.addListener=function(e,o){var r;if(!s(o))throw TypeError("listener must be a function");return this._events||(this._events={}),this._events.newListener&&this.emit("newListener",e,s(o.listener)?o.listener:o),this._events[e]?n(this._events[e])?this._events[e].push(o):this._events[e]=[this._events[e],o]:this._events[e]=o,n(this._events[e])&&!this._events[e].warned&&(r=i(this._maxListeners)?t.defaultMaxListeners:this._maxListeners)&&r>0&&this._events[e].length>r&&(this._events[e].warned=!0,console.error("(node) warning: possible EventEmitter memory leak detected. %d listeners added. Use emitter.setMaxListeners() to increase limit.",this._events[e].length),"function"==typeof console.trace&&console.trace()),this},t.prototype.on=t.prototype.addListener,t.prototype.once=function(e,t){if(!s(t))throw TypeError("listener must be a function");var n=!1;if(this._events.hasOwnProperty(e)&&"_"===e.charAt(0)){var i=1,o=e;for(var r in this._events)this._events.hasOwnProperty(r)&&r.startsWith(o)&&i++;e+=i}function a(){"_"!==e.charAt(0)||isNaN(e.substr(e.length-1))||(e=e.substring(0,e.length-1)),this.removeListener(e,a),n||(n=!0,t.apply(this,arguments))}return a.listener=t,this.on(e,a),this},t.prototype.removeListener=function(e,t){var i,o,r,a;if(!s(t))throw TypeError("listener must be a function");if(!this._events||!this._events[e])return this;if(r=(i=this._events[e]).length,o=-1,i===t||s(i.listener)&&i.listener===t){if(delete this._events[e],this._events.hasOwnProperty(e+"2")&&"_"===e.charAt(0)){var c=e;for(var l in this._events)this._events.hasOwnProperty(l)&&l.startsWith(c)&&(isNaN(parseInt(l.substr(l.length-1)))||(this._events[e+parseInt(l.substr(l.length-1)-1)]=this._events[l],delete this._events[l]));this._events[e]=this._events[e+"1"],delete this._events[e+"1"]}this._events.removeListener&&this.emit("removeListener",e,t)}else if(n(i)){for(a=r;a-- >0;)if(i[a]===t||i[a].listener&&i[a].listener===t){o=a;break}if(o<0)return this;1===i.length?(i.length=0,delete this._events[e]):i.splice(o,1),this._events.removeListener&&this.emit("removeListener",e,t)}return this},t.prototype.removeAllListeners=function(e){var t,n;if(!this._events)return this;if(!this._events.removeListener)return 0===arguments.length?this._events={}:this._events[e]&&delete this._events[e],this;if(0===arguments.length){for(t in this._events)"removeListener"!==t&&this.removeAllListeners(t);return this.removeAllListeners("removeListener"),this._events={},this}if(s(n=this._events[e]))this.removeListener(e,n);else if(n)for(;n.length;)this.removeListener(e,n[n.length-1]);return delete this._events[e],this},t.prototype.listeners=function(e){return this._events&&this._events[e]?s(this._events[e])?[this._events[e]]:this._events[e].slice():[]},t.prototype.listenerCount=function(e){if(this._events){var t=this._events[e];if(s(t))return 1;if(t)return t.length}return 0},t.listenerCount=function(e,t){return e.listenerCount(t)}},352:(e,t,s)=>{const n=s(49);let i="info";const o={trace:0,debug:1,info:2,warn:3,error:4,fatal:5};function r(e){return function(t){o[e]>=o[i]&&console.log(`[${n.formatDate(new Date)}] ${e}: ${t}`)}}e.exports={setLevel(e){i=e},trace:r("trace"),debug:r("debug"),info:r("info"),warn:r("warn"),error:r("error"),fatal:r("fatal")}},549:(e,t,s)=>{const n=s(49),i=/\S+/g;function o(e,t,s=",",n="/",i){const o=e[t];if(void 0===o)return e;const r="string"==typeof o;if(e[t+"-raw"]=r?o:null,!0===o)return e[t]=null,e;if(e[t]={},r){const r=o.split(s);for(let s=0;s<r.length;s++){const o=r[s].split(n);let a=o[1];void 0!==i&&a&&(a=a.split(i)),e[t][o[0]]=a||null}}return e}e.exports={badges:e=>o(e,"badges"),badgeInfo:e=>o(e,"badge-info"),emotes:e=>o(e,"emotes","/",":",","),emoteRegex(e,t,s,o){i.lastIndex=0;const r=new RegExp("(\\b|^|\\s)"+n.unescapeHtml(t)+"(\\b|$|\\s)");let a;for(;null!==(a=i.exec(e));)r.test(a[0])&&(o[s]=o[s]||[],o[s].push([a.index,i.lastIndex-1]))},emoteString(e,t,s,o){let r;for(i.lastIndex=0;null!==(r=i.exec(e));)r[0]===n.unescapeHtml(t)&&(o[s]=o[s]||[],o[s].push([r.index,i.lastIndex-1]))},transformEmotes(e){let t="";return Object.keys(e).forEach((s=>{t=`${t+s}:`,e[s].forEach((e=>t=`${t+e.join("-")},`)),t=`${t.slice(0,-1)}/`})),t.slice(0,-1)},formTags(e){const t=[];for(const s in e){const i=n.escapeIRC(e[s]);t.push(`${s}=${i}`)}return`@${t.join(";")}`},msg(e){const t={raw:e,tags:{},prefix:null,command:null,params:[]};let s=0,n=0;if(64===e.charCodeAt(0)){if(n=e.indexOf(" "),-1===n)return null;const i=e.slice(1,n).split(";");for(let e=0;e<i.length;e++){const s=i[e],n=s.split("=");t.tags[n[0]]=s.substring(s.indexOf("=")+1)||!0}s=n+1}for(;32===e.charCodeAt(s);)s++;if(58===e.charCodeAt(s)){if(n=e.indexOf(" ",s),-1===n)return null;for(t.prefix=e.slice(s+1,n),s=n+1;32===e.charCodeAt(s);)s++}if(n=e.indexOf(" ",s),-1===n)return e.length>s?(t.command=e.slice(s),t):null;for(t.command=e.slice(s,n),s=n+1;32===e.charCodeAt(s);)s++;for(;s<e.length;){if(n=e.indexOf(" ",s),58===e.charCodeAt(s)){t.params.push(e.slice(s+1));break}if(-1===n){if(-1===n){t.params.push(e.slice(s));break}}else for(t.params.push(e.slice(s,n)),s=n+1;32===e.charCodeAt(s);)s++}return t}}},776:e=>{e.exports=class{constructor(e){this.queue=[],this.index=0,this.defaultDelay=void 0===e?3e3:e}add(e,t){this.queue.push({fn:e,delay:t})}next(){const e=this.index++,t=this.queue[e];if(!t)return;const s=this.queue[this.index];if(t.fn(),s){const e=void 0===s.delay?this.defaultDelay:s.delay;setTimeout((()=>this.next()),e)}}}},49:e=>{const t=/^\u0001ACTION ([^\u0001]+)\u0001$/,s=/^(justinfan)(\d+$)/,n=/\\([sn:r\\])/g,i=/([ \n;\r\\])/g,o={s:" ",n:"",":":";",r:""},r={" ":"s","\n":"n",";":":","\r":"r"},a=new RegExp("^(?:(?:https?|ftp)://)(?:\\S+(?::\\S*)?@)?(?:(?!(?:10|127)(?:\\.\\d{1,3}){3})(?!(?:169\\.254|192\\.168)(?:\\.\\d{1,3}){2})(?!172\\.(?:1[6-9]|2\\d|3[0-1])(?:\\.\\d{1,3}){2})(?:[1-9]\\d?|1\\d\\d|2[01]\\d|22[0-3])(?:\\.(?:1?\\d{1,2}|2[0-4]\\d|25[0-5])){2}(?:\\.(?:[1-9]\\d?|1\\d\\d|2[0-4]\\d|25[0-4]))|(?:(?:[a-z\\u00a1-\\uffff0-9]-*)*[a-z\\u00a1-\\uffff0-9]+)(?:\\.(?:[a-z\\u00a1-\\uffff0-9]-*)*[a-z\\u00a1-\\uffff0-9]+)*(?:\\.(?:[a-z\\u00a1-\\uffff]{2,}))\\.?)(?::\\d{2,5})?(?:[/?#]\\S*)?$","i"),c=/[|\\^$*+?:#]/,l=e.exports={get:(e,t)=>void 0===e?t:e,hasOwn:(e,t)=>({}.hasOwnProperty.call(e,t)),promiseDelay:e=>new Promise((t=>setTimeout(t,e))),isFinite:e=>isFinite(e)&&!isNaN(parseFloat(e)),toNumber(e,t){if(null===e)return 0;const s=Math.pow(10,l.isFinite(t)?t:0);return Math.round(e*s)/s},isInteger:e=>!isNaN(l.toNumber(e,0)),isRegex:e=>c.test(e),isURL:e=>a.test(e),justinfan:()=>`justinfan${Math.floor(8e4*Math.random()+1e3)}`,isJustinfan:e=>s.test(e),channel(e){const t=(e||"").toLowerCase();return"#"===t[0]?t:"#"+t},username(e){const t=(e||"").toLowerCase();return"#"===t[0]?t.slice(1):t},token:e=>e?e.toLowerCase().replace("oauth:",""):"",password(e){const t=l.token(e);return t?`oauth:${t}`:""},actionMessage:e=>e.match(t),replaceAll(e,t){if(null==e)return null;for(const s in t)e=e.replace(new RegExp(s,"g"),t[s]);return e},unescapeHtml:e=>e.replace(/\\&amp\\;/g,"&").replace(/\\&lt\\;/g,"<").replace(/\\&gt\\;/g,">").replace(/\\&quot\\;/g,'"').replace(/\\&#039\\;/g,"'"),unescapeIRC:e=>e&&"string"==typeof e&&e.includes("\\")?e.replace(n,((e,t)=>t in o?o[t]:t)):e,escapeIRC:e=>e&&"string"==typeof e?e.replace(i,((e,t)=>t in r?`\\${r[t]}`:t)):e,addWord:(e,t)=>e.length?e+" "+t:e+t,splitLine(e,t){let s=e.substring(0,t).lastIndexOf(" ");return-1===s&&(s=t-1),[e.substring(0,s),e.substring(s+1)]},extractNumber(e){const t=e.split(" ");for(let e=0;e<t.length;e++)if(l.isInteger(t[e]))return~~t[e];return 0},formatDate(e){let t=e.getHours(),s=e.getMinutes();return t=(t<10?"0":"")+t,s=(s<10?"0":"")+s,`${t}:${s}`},inherits(e,t){e.super_=t;const s=function(){};s.prototype=t.prototype,e.prototype=new s,e.prototype.constructor=e},isNode(){try{return"object"==typeof process&&"[object process]"===Object.prototype.toString.call(process)}catch(e){}return!1}}},842:function(e,t,s){"use strict";var n,i=this&&this.__extends||(n=function(e,t){return n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var s in t)Object.prototype.hasOwnProperty.call(t,s)&&(e[s]=t[s])},n(e,t)},function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Class extends value "+String(t)+" is not a constructor or null");function s(){this.constructor=e}n(e,t),e.prototype=null===t?Object.create(t):(s.prototype=t.prototype,new s)});Object.defineProperty(t,"__esModule",{value:!0}),t.CanvasAnimation=t.FadeDirection=t.Animation=void 0;var o,r=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return i(t,e),t}(s(187).EventEmitter);t.Animation=r,function(e){e[e.IN=0]="IN",e[e.OUT=1]="OUT"}(o=t.FadeDirection||(t.FadeDirection={}));var a=function(e){function t(t){var s=e.call(this)||this;s.elementId=t;var n=document.getElementById(s.elementId);if(!(n instanceof HTMLCanvasElement))throw new Error("Canvas not found.");return s.canvas=n,s}return i(t,e),t.prototype.cancelInterval=function(){null!=this.intervalTimer&&(window.clearInterval(this.intervalTimer),this.intervalTimer=null,this.emit("cancelInterval"))},t.prototype.cancelTimer=function(){null!=this.timeoutTimer&&(window.clearTimeout(this.timeoutTimer),this.timeoutTimer=null,this.emit("cancelInterval"))},t.prototype.cancelAnimations=function(){this.cancelInterval(),this.cancelTimer()},t.prototype.fade=function(e,t,s){var n=this;this.cancelInterval();var i=0;this.intervalTimer=window.setInterval((function(){var r=(i+=t)/e;if(s==o.OUT&&(r=1-r),n.canvas.style.opacity="".concat(r),i>=e)return n.cancelInterval(),void n.emit("fadeEnd",e,t,s)}),t)},t.prototype.fadeIn=function(e,t){this.fade(e,t,o.IN)},t.prototype.fadeOut=function(e,t){this.fade(e,t,o.OUT)},t}(r);t.CanvasAnimation=a},877:function(e,t,s){"use strict";var n,i=this&&this.__extends||(n=function(e,t){return n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var s in t)Object.prototype.hasOwnProperty.call(t,s)&&(e[s]=t[s])},n(e,t)},function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Class extends value "+String(t)+" is not a constructor or null");function s(){this.constructor=e}n(e,t),e.prototype=null===t?Object.create(t):(s.prototype=t.prototype,new s)}),o=this&&this.__assign||function(){return o=Object.assign||function(e){for(var t,s=1,n=arguments.length;s<n;s++)for(var i in t=arguments[s])Object.prototype.hasOwnProperty.call(t,i)&&(e[i]=t[i]);return e},o.apply(this,arguments)};Object.defineProperty(t,"__esModule",{value:!0}),t.Bar=t.FONT_DYNAMIC=void 0;var r=s(256),a=s(613);t.FONT_DYNAMIC=-1;var c={elementId:"",barMarginHeight:10,barMarginWidth:10,strokeMarginHeight:5,strokeMarginWidth:5,valueColors:r.colors,strokeColor:"#34495e",strokeIterations:1,fontSize:-1,fontFamily:"courier",fontSizeFactor:1.8,fontColorFactor:.65,textRound:!0},l=function(e){function t(t){var s=e.call(this,t)||this;return s.properties=t,s.properties=o(o({},c),s.properties),console.log(s.properties),s}return i(t,e),t.prototype.init=function(){},t.prototype.draw=function(e,t,s){void 0===t&&(t=!0),void 0===s&&(s=!0),s&&this.clear();var n=this.properties,i=this.width-2*n.barMarginWidth,o=this.height-2*n.barMarginHeight,a=n.fontSize;-1===a&&(a=o*(2/3));var c=a/n.fontSizeFactor;this.ctx.font="".concat(Math.round(a),"px ").concat(n.fontFamily),this.ctx.strokeStyle=n.strokeColor;for(var l=0;l<n.strokeIterations;l++)this.ctx.beginPath(),this.ctx.rect(this.x+n.barMarginWidth-n.strokeMarginWidth-l,this.y+n.barMarginHeight-n.strokeMarginHeight-l,i+2*n.strokeMarginWidth+l,o+2*n.strokeMarginHeight+l),this.ctx.stroke(),this.ctx.closePath();for(var h=e.reduce((function(e,t){return e+t})),u=n.barMarginWidth,m=0;m<e.length;m++){var p=e[m]/h;if(0!=p){var d=i*p;if(this.ctx.fillStyle=n.valueColors[m%n.valueColors.length],this.ctx.beginPath(),this.ctx.rect(this.x+u,this.y+n.barMarginHeight,d,o),this.ctx.fill(),this.ctx.closePath(),t){var f;f=n.textRound?"".concat(Math.round(100*p),"%"):"".concat(100*p,"%"),this.ctx.beginPath(),this.ctx.fillStyle=(0,r.darkenHexColor)(this.ctx.fillStyle,n.fontColorFactor),this.ctx.fillText(f,this.x+u+d/2-c*f.length/2,this.y+n.barMarginHeight+o/2+c/2),this.ctx.closePath()}u+=d}}},t.prototype.clear=function(){this.ctx.clearRect(this.x,this.y,this.width,this.height)},t}(a.Chart);t.Bar=l},613:(e,t)=>{"use strict";var s;Object.defineProperty(t,"__esModule",{value:!0}),t.Chart=t.ChartType=void 0,(s=t.ChartType||(t.ChartType={})).BAR="bar",s.PIE="pie";t.Chart=function(e){var t,s,n,i,o,r,a;this.canvasElementId=null!==(t=e.elementId)&&void 0!==t?t:"canvas",this.x=null!==(s=e.x)&&void 0!==s?s:0,this.y=null!==(n=e.y)&&void 0!==n?n:0,this.width=null!==(i=e.width)&&void 0!==i?i:-1,this.height=null!==(o=e.height)&&void 0!==o?o:-1,-1===this.width?this.width=document.defaultView.innerWidth:-2===this.x&&(this.x=document.defaultView.innerWidth/2-this.width/2),-1==this.height?this.height=document.defaultView.innerHeight:-2===this.x&&(this.y=document.defaultView.innerHeight/2-this.height/2);var c=document.getElementById(this.canvasElementId);if(null!=c){this.canvas=c;var l=this.canvas.getContext("2d");null!=l?(this.ctx=l,this.canvas.height=this.height,this.canvas.width=this.width,"none"!=(null!==(r=e.background)&&void 0!==r?r:"#2c3e50")&&(this.canvas.style.background=null!==(a=e.background)&&void 0!==a?a:"#2c3e50"),this.error||this.init(),console.log(e)):this.error="Context not found."}else this.error="Canvas not found."}},18:function(e,t,s){"use strict";var n,i=this&&this.__extends||(n=function(e,t){return n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var s in t)Object.prototype.hasOwnProperty.call(t,s)&&(e[s]=t[s])},n(e,t)},function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Class extends value "+String(t)+" is not a constructor or null");function s(){this.constructor=e}n(e,t),e.prototype=null===t?Object.create(t):(s.prototype=t.prototype,new s)}),o=this&&this.__assign||function(){return o=Object.assign||function(e){for(var t,s=1,n=arguments.length;s<n;s++)for(var i in t=arguments[s])Object.prototype.hasOwnProperty.call(t,i)&&(e[i]=t[i]);return e},o.apply(this,arguments)};Object.defineProperty(t,"__esModule",{value:!0}),t.Pie=t.LOCATION_CENTER=void 0;var r=s(613),a=s(256);t.LOCATION_CENTER=-1;var c={elementId:"",fontSize:25,round:!0,radiusFactor:4.5,fontFamily:"courier",fontColorFactor:.65},l=function(e){function t(t){var s=e.call(this,t)||this;return s.properties=t,s.properties=o(o({},c),s.properties),-1===s.x&&(s.x=s.width/2),-1===s.y&&(s.y=s.height/2),s.r=Math.min(s.height,s.width)/s.properties.radiusFactor,s}return i(t,e),t.prototype.init=function(){},t.prototype.draw=function(e,t,s){void 0===t&&(t=!0),void 0===s&&(s=!0),s&&this.clear();var n=this.properties,i=e.reduce((function(e,t){return e+t}));this.endAngle=0;for(var o=0;o<e.length;o++){var r=e[o]/i*100;if(0!=r){var c=a.colors[o%a.colors.length],l=Math.PI/50*r;this.ctx.beginPath(),this.ctx.moveTo(this.x,this.y),this.ctx.arc(this.x,this.y,this.r,this.endAngle-.5*Math.PI,this.endAngle+l-.5*Math.PI),this.ctx.fillStyle=c,this.ctx.fill(),this.ctx.closePath();var h=this.endAngle+l/2;if(t){this.ctx.fillStyle=(0,a.darkenHexColor)(this.ctx.fillStyle,n.fontColorFactor),this.ctx.font=n.fontSize+"px "+n.fontFamily;var u,m=15*(u=n.round?"".concat(Math.round(r),"%"):"".concat(r,"$")).length,p=this.r-50,d=this.x+(Math.sin(h)*p+m/2*(Math.sin(h)-1)),f=this.y-(Math.cos(h)*p+7.5*(Math.cos(h)-1));this.ctx.fillText(u,d,f)}this.endAngle+=l}}},t.prototype.clear=function(){this.ctx.clearRect(0,0,this.width,this.height)},t}(r.Chart);t.Pie=l},131:function(e,t,s){"use strict";var n,i=this&&this.__extends||(n=function(e,t){return n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var s in t)Object.prototype.hasOwnProperty.call(t,s)&&(e[s]=t[s])},n(e,t)},function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Class extends value "+String(t)+" is not a constructor or null");function s(){this.constructor=e}n(e,t),e.prototype=null===t?Object.create(t):(s.prototype=t.prototype,new s)});Object.defineProperty(t,"__esModule",{value:!0}),t.Chat=void 0;var o=function(e){function t(t){var s=e.call(this)||this;return s.channel=t,s}return i(t,e),t.prototype.onMessage=function(e){this.on("message",e)},t.prototype.emitMessage=function(e,t){this.emit("message",e,t)},t}(s(187).EventEmitter);t.Chat=o},320:function(e,t,s){"use strict";var n,i=this&&this.__extends||(n=function(e,t){return n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var s in t)Object.prototype.hasOwnProperty.call(t,s)&&(e[s]=t[s])},n(e,t)},function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Class extends value "+String(t)+" is not a constructor or null");function s(){this.constructor=e}n(e,t),e.prototype=null===t?Object.create(t):(s.prototype=t.prototype,new s)});Object.defineProperty(t,"__esModule",{value:!0}),t.TwitchChat=void 0;var o=s(131),r=s(993),a=function(e){function t(t){var s=e.call(this,t)||this;return s.client=(0,r.Client)({connection:{secure:!0,reconnect:!0},channels:[s.channel]}),console.log("[Chat] Connecting to channel: "+t),s.client.connect(),console.log("[Chat] Connected!"),s.client.on("message",(function(e,t,n,i){s.emitMessage(t.username,n)})),s}return i(t,e),t}(o.Chat);t.TwitchChat=a},256:(e,t)=>{"use strict";function s(e,t,s,n){return void 0===n&&(n=!0),(n?"#":"")+(16777215&(e<<16|t<<8|s)).toString(16)}function n(e){e.startsWith("#")&&(e=e.substring(1));var t=parseInt(e,16);return[t>>16&255,t>>8&255,255&t]}function i(e,t,n,i){return s(e=Math.max(0,e*i),t=Math.max(0,t*i),n=Math.max(0,n*i))}Object.defineProperty(t,"__esModule",{value:!0}),t.darkenHexColor=t.darkenRGBColor=t.Hex2RGB=t.RGB2Hex=t.colors=void 0,t.colors=["#3498db","#f1c40f","#e74c3c","#3498db","#2ecc71","#1abc9c","#9b59b6","#f1c40f","#e67e22","#e74c3c","#ecf0f1"],t.RGB2Hex=s,t.Hex2RGB=n,t.darkenRGBColor=i,t.darkenHexColor=function(e,t){var s=n(e);return i(s[0],s[1],s[2],t)}},824:function(e,t,s){"use strict";var n,i=this&&this.__extends||(n=function(e,t){return n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var s in t)Object.prototype.hasOwnProperty.call(t,s)&&(e[s]=t[s])},n(e,t)},function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Class extends value "+String(t)+" is not a constructor or null");function s(){this.constructor=e}n(e,t),e.prototype=null===t?Object.create(t):(s.prototype=t.prototype,new s)});Object.defineProperty(t,"__esModule",{value:!0}),t.Job=void 0;var o=function(e){function t(t,s){void 0===t&&(t=10),void 0===s&&(s=1);var n=e.call(this)||this;return n.timeout=t,n.requiredPings=s,n.current=0,n.currentPing=0,n}return i(t,e),t.prototype.onTime=function(){this.current++,this.current>=this.timeout&&(this.stopTimer(),this.emit("cancel"))},t.prototype.ping=function(){var e=this;this.currentPing++,this.currentPing<this.requiredPings||(this.current=0,this.currentPing=0,null==this.timer&&(this.timer=window.setInterval((function(){return e.onTime()}),1e3),this.emit("start")))},t.prototype.stopTimer=function(){this.isActive()&&(window.clearInterval(this.timer),this.timer=null),this.current=0,this.currentPing=0},t.prototype.isActive=function(){return null!=this.timer},t}(s(187).EventEmitter);t.Job=o},834:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.reactions=t.getReactionByMessage=t.getReactionByKeyword=t.getReaction=t.updateReactions=void 0;var s=[{sorting:0,display:"+1",keywords:["+1","1","yes","ye","ja","sure","yay"]},{sorting:2,display:"~",keywords:["2"]},{sorting:3,display:"-1",keywords:["-1","0","no","nein","nay"]}];function n(e){e=e.toLowerCase();for(var t=0;t<s.length;t++)for(var n=s[t],i=0;i<n.keywords.length;i++)if(n.keywords[i]==e)return n;return null}function i(e){var t=e.split(" ");if(0==t.length)return null;if(1==t.length)return n(t[0]);for(var i=new Set,o=0;o<t.length;o++)for(var r=t[o].toLowerCase(),a=0;a<s.length;a++)for(var c=s[a],l=0;l<c.keywords.length;l++)c.keywords[l]==r&&i.add(c);return 1==i.size?i.values().next().value:null}t.reactions=s,t.updateReactions=function(e){t.reactions=s=e},t.getReaction=function(e,t){return void 0===t&&(t=!1),t?n(e):i(e)},t.getReactionByKeyword=n,t.getReactionByMessage=i},653:function(e,t,s){"use strict";var n=this&&this.__assign||function(){return n=Object.assign||function(e){for(var t,s=1,n=arguments.length;s<n;s++)for(var i in t=arguments[s])Object.prototype.hasOwnProperty.call(t,i)&&(e[i]=t[i]);return e},n.apply(this,arguments)};Object.defineProperty(t,"__esModule",{value:!0}),t.settings=t.Settings=void 0;var i=s(613),o=s(877),r=s(18),a=s(834),c=function(){function e(){var e=this;this.channel=null,this.timeout=10,this.requiredPings=5,this.type=i.ChartType.BAR,this.afid=500,this.afis=25,this.afod=500,this.afos=25,this.background="none",this.elementId="canvas",this.reactionsJson="";var t=new URLSearchParams(window.location.search);console.log("Loading settings ..."),t.forEach((function(t,s,n){try{e[s]=t}catch(e){throw new Error(e)}}))}return e.prototype.buildChart=function(){return l.type===i.ChartType.PIE?(console.log("Building pie"),new r.Pie(n(n({},this),{x:-1,y:-1,radiusFactor:2}))):(console.log("Building bar"),new o.Bar(n(n({},this),{barMarginHeight:0,barMarginWidth:0,strokeMarginHeight:0,strokeMarginWidth:0})))},e}();t.Settings=c;var l=new c;if(t.settings=l,l.reactionsJson.trim().length>0){var h=JSON.parse(l.reactionsJson);(0,a.updateReactions)(h),console.log("Using custom reactions:",h,"=>",a.reactions)}},651:function(e,t,s){"use strict";var n,i=this&&this.__extends||(n=function(e,t){return n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var s in t)Object.prototype.hasOwnProperty.call(t,s)&&(e[s]=t[s])},n(e,t)},function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Class extends value "+String(t)+" is not a constructor or null");function s(){this.constructor=e}n(e,t),e.prototype=null===t?Object.create(t):(s.prototype=t.prototype,new s)});Object.defineProperty(t,"__esModule",{value:!0}),t.ReactionStorage=t.UpdateMode=void 0;var o,r=s(187),a=s(834);!function(e){e[e.INCREMENT=1]="INCREMENT",e[e.DECREMENT=-1]="DECREMENT"}(o=t.UpdateMode||(t.UpdateMode={}));var c=function(e){function t(t,s,n){void 0===n&&(n=!0);var i=e.call(this)||this;return i.chat=t,i.job=s,i.duplicationChecking=n,i.users=new Map,i.reactions=new Map,i.chat.onMessage((function(e,t){i.onMessage(e,t)})),i}return i(t,e),t.prototype.onMessage=function(e,t){if(null!=e&&null!=t){var s=(0,a.getReaction)(t,!0);console.log("Found Reaction:",s),null!=s&&(this.job.ping(),this.react(e,s))}else console.log("[Storage]","Null:",e,"or",t)},t.prototype.getReaction=function(e){var t;return null!==(t=this.reactions.get(e))&&void 0!==t?t:0},t.prototype.updateReaction=function(e,t){var s=this.getReaction(e);switch(t){case o.INCREMENT:s++;break;case o.DECREMENT:s--}return this.reactions.set(e,s),this.emit("update",e,s,t),s},t.prototype.react=function(e,t){if(1==this.duplicationChecking){if(this.users.has(e)){var s=this.users.get(e);if(s==t)return;this.updateReaction(s,o.DECREMENT)}this.users.set(e,t)}this.updateReaction(t,o.INCREMENT),this.emit("reaction",e,t)},t.prototype.resetStorage=function(){this.users.clear(),this.reactions.clear(),console.log("[Storage]","Reset users and reactions!")},t.prototype.getValues=function(){var e=this,t=[],s=new Map;a.reactions.forEach((function(n){s.set(n.sorting,e.getReaction(n)),t.push(n.sorting)}));for(var n=0;n<t.length;n++)for(var i=0;i<t.length;i++)if(n!=i){var o=t[n],r=t[i];o<r&&(t[n]=r,t[i]=o)}var c=[];for(n=0;n<t.length;n++)c.push(s.get(t[n]));return c},t.prototype.drawChart=function(e){var t=this.getValues();e.draw(t,!0,!0)},t}(r.EventEmitter);t.ReactionStorage=c},349:(e,t,s)=>{"use strict";e.exports=s.p+"493e23b8ff7eb48f868d.png"},544:(e,t,s)=>{"use strict";e.exports=s.p+"5c859ceabc772f74b6f8.png"},604:()=>{},726:()=>{}},t={};function s(n){var i=t[n];if(void 0!==i)return i.exports;var o=t[n]={id:n,exports:{}};return e[n].call(o.exports,o,o.exports,s),o.exports}s.m=e,s.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return s.d(t,{a:t}),t},s.d=(e,t)=>{for(var n in t)s.o(t,n)&&!s.o(e,n)&&Object.defineProperty(e,n,{enumerable:!0,get:t[n]})},s.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),s.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),s.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},(()=>{var e;s.g.importScripts&&(e=s.g.location+"");var t=s.g.document;if(!e&&t&&(t.currentScript&&(e=t.currentScript.src),!e)){var n=t.getElementsByTagName("script");n.length&&(e=n[n.length-1].src)}if(!e)throw new Error("Automatic publicPath is not supported in this browser");e=e.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),s.p=e})(),s.b=document.baseURI||self.location.href,s.nc=void 0,(()=>{"use strict";s(153),s(626),s(478),s(816);var e=s(824),t=s(320),n=s(651),i=s(842),o=s(653);console.log(o.settings);var r=new e.Job(o.settings.timeout,o.settings.requiredPings),a=new t.TwitchChat(o.settings.channel),c=o.settings.buildChart(),l=new n.ReactionStorage(a,r),h=new i.CanvasAnimation(o.settings.elementId);h.on("fadeEnd",(function(e,t,s){console.log("fadeEnd:",e,t,s),s==i.FadeDirection.OUT&&c.clear()})),l.on("update",(function(e,t,s){console.log("on: update =",t,s,r.isActive(),s==n.UpdateMode.INCREMENT),s==n.UpdateMode.INCREMENT&&r.isActive()&&l.drawChart(c)})),r.on("start",(function(){console.log("Job started!"),l.drawChart(c),h.fade(o.settings.afid,o.settings.afis,i.FadeDirection.IN)})),r.on("cancel",(function(){console.log("Job canceled!"),l.resetStorage(),h.fade(o.settings.afod,o.settings.afos,i.FadeDirection.OUT)}))})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,