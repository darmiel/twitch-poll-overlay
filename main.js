(()=>{var e={982:(e,t,s)=>{"use strict";s.d(t,{Z:()=>a});var i=s(15),n=s.n(i),o=s(645),r=s.n(o)()(n());r.push([e.id,"","",{version:3,sources:[],names:[],mappings:"",sourceRoot:""}]);const a=r},645:e=>{"use strict";e.exports=function(e){var t=[];return t.toString=function(){return this.map((function(t){var s=e(t);return t[2]?"@media ".concat(t[2]," {").concat(s,"}"):s})).join("")},t.i=function(e,s,i){"string"==typeof e&&(e=[[null,e,""]]);var n={};if(i)for(var o=0;o<this.length;o++){var r=this[o][0];null!=r&&(n[r]=!0)}for(var a=0;a<e.length;a++){var c=[].concat(e[a]);i&&n[c[0]]||(s&&(c[2]?c[2]="".concat(s," and ").concat(c[2]):c[2]=s),t.push(c))}},t}},15:e=>{"use strict";function t(e,t){(null==t||t>e.length)&&(t=e.length);for(var s=0,i=new Array(t);s<t;s++)i[s]=e[s];return i}e.exports=function(e){var s,i,n=(i=4,function(e){if(Array.isArray(e))return e}(s=e)||function(e,t){if("undefined"!=typeof Symbol&&Symbol.iterator in Object(e)){var s=[],i=!0,n=!1,o=void 0;try{for(var r,a=e[Symbol.iterator]();!(i=(r=a.next()).done)&&(s.push(r.value),!t||s.length!==t);i=!0);}catch(e){n=!0,o=e}finally{try{i||null==a.return||a.return()}finally{if(n)throw o}}return s}}(s,i)||function(e,s){if(e){if("string"==typeof e)return t(e,s);var i=Object.prototype.toString.call(e).slice(8,-1);return"Object"===i&&e.constructor&&(i=e.constructor.name),"Map"===i||"Set"===i?Array.from(e):"Arguments"===i||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(i)?t(e,s):void 0}}(s,i)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),o=n[1],r=n[3];if("function"==typeof btoa){var a=btoa(unescape(encodeURIComponent(JSON.stringify(r)))),c="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(a),h="/*# ".concat(c," */"),l=r.sources.map((function(e){return"/*# sourceURL=".concat(r.sourceRoot||"").concat(e," */")}));return[o].concat(l).concat([h]).join("\n")}return[o].join("\n")}},379:(e,t,s)=>{"use strict";var i,n=function(){var e={};return function(t){if(void 0===e[t]){var s=document.querySelector(t);if(window.HTMLIFrameElement&&s instanceof window.HTMLIFrameElement)try{s=s.contentDocument.head}catch(e){s=null}e[t]=s}return e[t]}}(),o=[];function r(e){for(var t=-1,s=0;s<o.length;s++)if(o[s].identifier===e){t=s;break}return t}function a(e,t){for(var s={},i=[],n=0;n<e.length;n++){var a=e[n],c=t.base?a[0]+t.base:a[0],h=s[c]||0,l="".concat(c," ").concat(h);s[c]=h+1;var m=r(l),u={css:a[1],media:a[2],sourceMap:a[3]};-1!==m?(o[m].references++,o[m].updater(u)):o.push({identifier:l,updater:f(u,t),references:1}),i.push(l)}return i}function c(e){var t=document.createElement("style"),i=e.attributes||{};if(void 0===i.nonce){var o=s.nc;o&&(i.nonce=o)}if(Object.keys(i).forEach((function(e){t.setAttribute(e,i[e])})),"function"==typeof e.insert)e.insert(t);else{var r=n(e.insert||"head");if(!r)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");r.appendChild(t)}return t}var h,l=(h=[],function(e,t){return h[e]=t,h.filter(Boolean).join("\n")});function m(e,t,s,i){var n=s?"":i.media?"@media ".concat(i.media," {").concat(i.css,"}"):i.css;if(e.styleSheet)e.styleSheet.cssText=l(t,n);else{var o=document.createTextNode(n),r=e.childNodes;r[t]&&e.removeChild(r[t]),r.length?e.insertBefore(o,r[t]):e.appendChild(o)}}function u(e,t,s){var i=s.css,n=s.media,o=s.sourceMap;if(n?e.setAttribute("media",n):e.removeAttribute("media"),o&&"undefined"!=typeof btoa&&(i+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(o))))," */")),e.styleSheet)e.styleSheet.cssText=i;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(i))}}var d=null,p=0;function f(e,t){var s,i,n;if(t.singleton){var o=p++;s=d||(d=c(t)),i=m.bind(null,s,o,!1),n=m.bind(null,s,o,!0)}else s=c(t),i=u.bind(null,s,t),n=function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(s)};return i(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap)return;i(e=t)}else n()}}e.exports=function(e,t){(t=t||{}).singleton||"boolean"==typeof t.singleton||(t.singleton=(void 0===i&&(i=Boolean(window&&document&&document.all&&!window.atob)),i));var s=a(e=e||[],t);return function(e){if(e=e||[],"[object Array]"===Object.prototype.toString.call(e)){for(var i=0;i<s.length;i++){var n=r(s[i]);o[n].references--}for(var c=a(e,t),h=0;h<s.length;h++){var l=r(s[h]);0===o[l].references&&(o[l].updater(),o.splice(l,1))}s=c}}}},993:(e,t,s)=>{e.exports={client:s(839),Client:s(839)}},681:(e,t,s)=>{var i=s(887),n=s(49);e.exports=function(e,t){var s=null===n.get(e.url,null)?n.get(e.uri,null):n.get(e.url,null);if(n.isURL(s)||(s="https://api.twitch.tv/kraken"+("/"===s[0]?s:`/${s}`)),n.isNode())i(n.merge({method:"GET",json:!0},e,{url:s}),t);else if(n.isExtension()||n.isReactNative()){e=n.merge({url:s,method:"GET",headers:{}},e);var o=new XMLHttpRequest;for(var r in o.open(e.method,e.url,!0),e.headers)o.setRequestHeader(r,e.headers[r]);o.responseType="json",o.addEventListener("load",(e=>{4==o.readyState&&(200!=o.status?t(o.status,null,null):t(null,null,o.response))})),o.send()}else{var a=`jsonp_callback_${Math.round(1e5*Math.random())}`;window[a]=function(e){delete window[a],document.body.removeChild(c),t(null,null,e)};var c=document.createElement("script");c.src=`${s}${s.includes("?")?"&":"?"}callback=${a}`,document.body.appendChild(c)}}},839:(e,t,s)=>{var i=s(681),n=s(641),o=s(378).EventEmitter,r=s(352),a=s(549),c=s(776),h=s.g.WebSocket||s.g.MozWebSocket||s(418),l=s(49),m=function e(t){if(this instanceof e==0)return new e(t);this.setMaxListeners(0),this.opts=l.get(t,{}),this.opts.channels=this.opts.channels||[],this.opts.connection=this.opts.connection||{},this.opts.identity=this.opts.identity||{},this.opts.options=this.opts.options||{},this.clientId=l.get(this.opts.options.clientId,null),this.maxReconnectAttempts=l.get(this.opts.connection.maxReconnectAttempts,1/0),this.maxReconnectInterval=l.get(this.opts.connection.maxReconnectInterval,3e4),this.reconnect=l.get(this.opts.connection.reconnect,!1),this.reconnectDecay=l.get(this.opts.connection.reconnectDecay,1.5),this.reconnectInterval=l.get(this.opts.connection.reconnectInterval,1e3),this.reconnecting=!1,this.reconnections=0,this.reconnectTimer=this.reconnectInterval,this.secure=l.get(this.opts.connection.secure,!1),this.emotes="",this.emotesets={},this.channels=[],this.currentLatency=0,this.globaluserstate={},this.lastJoined="",this.latency=new Date,this.moderators={},this.pingLoop=null,this.pingTimeout=null,this.reason="",this.username="",this.userstate={},this.wasCloseCalled=!1,this.ws=null;var s="error";this.opts.options.debug&&(s="info"),this.log=this.opts.logger||r;try{r.setLevel(s)}catch(e){}this.opts.channels.forEach((function(e,t,s){s[t]=l.channel(e)})),o.call(this)};for(var u in l.inherits(m,o),m.prototype.api=i,n)m.prototype[u]=n[u];m.prototype.handleMessage=function(e){if(!l.isNull(e)){this.emit("raw_message",JSON.parse(JSON.stringify(e)),e);var t=l.channel(l.get(e.params[0],null)),s=l.get(e.params[1],null),i=l.get(e.tags["msg-id"],null);if(e.tags=a.badges(a.badgeInfo(a.emotes(e.tags))),e.tags){var n=e.tags;for(var o in n)if("emote-sets"!==o&&"ban-duration"!==o&&"bits"!==o){var r=n[o];l.isBoolean(r)?r=null:"1"===r?r=!0:"0"===r?r=!1:l.isString(r)&&(r=l.unescapeIRC(r)),n[o]=r}}if(l.isNull(e.prefix))switch(e.command){case"PING":this.emit("ping"),l.isNull(this.ws)||1!==this.ws.readyState||this.ws.send("PONG");break;case"PONG":var h=new Date;this.currentLatency=(h.getTime()-this.latency.getTime())/1e3,this.emits(["pong","_promisePing"],[[this.currentLatency]]),clearTimeout(this.pingTimeout);break;default:this.log.warn(`Could not parse message with no prefix:\n${JSON.stringify(e,null,4)}`)}else if("tmi.twitch.tv"===e.prefix)switch(e.command){case"002":case"003":case"004":case"375":case"376":case"CAP":break;case"001":this.username=e.params[0];break;case"372":this.log.info("Connected to server."),this.userstate["#tmijs"]={},this.emits(["connected","_promiseConnect"],[[this.server,this.port],[null]]),this.reconnections=0,this.reconnectTimer=this.reconnectInterval,this.pingLoop=setInterval((()=>{l.isNull(this.ws)||1!==this.ws.readyState||this.ws.send("PING"),this.latency=new Date,this.pingTimeout=setTimeout((()=>{l.isNull(this.ws)||(this.wasCloseCalled=!1,this.log.error("Ping timeout."),this.ws.close(),clearInterval(this.pingLoop),clearTimeout(this.pingTimeout))}),l.get(this.opts.connection.timeout,9999))}),6e4);var m=new c.queue(2e3),u=l.union(this.opts.channels,this.channels);this.channels=[];for(var d=0;d<u.length;d++){let e=u[d];m.add((()=>{l.isNull(this.ws)||1!==this.ws.readyState||this.join(e).catch((e=>{this.log.error(e)}))}))}m.run();break;case"NOTICE":var p=[null],f=[t,i,s],g=[t,!0],_=[t,!1],b=[f,p],v=[f,[i]],y=`[${t}] ${s}`;switch(i){case"subs_on":this.log.info(`[${t}] This room is now in subscribers-only mode.`),this.emits(["subscriber","subscribers","_promiseSubscribers"],[g,g,p]);break;case"subs_off":this.log.info(`[${t}] This room is no longer in subscribers-only mode.`),this.emits(["subscriber","subscribers","_promiseSubscribersoff"],[_,_,p]);break;case"emote_only_on":this.log.info(`[${t}] This room is now in emote-only mode.`),this.emits(["emoteonly","_promiseEmoteonly"],[g,p]);break;case"emote_only_off":this.log.info(`[${t}] This room is no longer in emote-only mode.`),this.emits(["emoteonly","_promiseEmoteonlyoff"],[_,p]);break;case"slow_on":case"slow_off":break;case"followers_on_zero":case"followers_on":case"followers_off":break;case"r9k_on":this.log.info(`[${t}] This room is now in r9k mode.`),this.emits(["r9kmode","r9kbeta","_promiseR9kbeta"],[g,g,p]);break;case"r9k_off":this.log.info(`[${t}] This room is no longer in r9k mode.`),this.emits(["r9kmode","r9kbeta","_promiseR9kbetaoff"],[_,_,p]);break;case"room_mods":var w=s.split(": ")[1].toLowerCase().split(", ").filter((e=>e));this.emits(["_promiseMods","mods"],[[null,w],[t,w]]);break;case"no_mods":this.emits(["_promiseMods","mods"],[[null,[]],[t,[]]]);break;case"vips_success":s.endsWith(".")&&(s=s.slice(0,-1));var C=s.split(": ")[1].toLowerCase().split(", ").filter((e=>e));this.emits(["_promiseVips","vips"],[[null,C],[t,C]]);break;case"no_vips":this.emits(["_promiseVips","vips"],[[null,[]],[t,[]]]);break;case"already_banned":case"bad_ban_admin":case"bad_ban_broadcaster":case"bad_ban_global_mod":case"bad_ban_self":case"bad_ban_staff":case"usage_ban":this.log.info(y),this.emits(["notice","_promiseBan"],v);break;case"ban_success":this.log.info(y),this.emits(["notice","_promiseBan"],b);break;case"usage_clear":this.log.info(y),this.emits(["notice","_promiseClear"],v);break;case"usage_mods":this.log.info(y),this.emits(["notice","_promiseMods"],[f,[i,[]]]);break;case"mod_success":this.log.info(y),this.emits(["notice","_promiseMod"],b);break;case"usage_vips":this.log.info(y),this.emits(["notice","_promiseVips"],[f,[i,[]]]);break;case"usage_vip":case"bad_vip_grantee_banned":case"bad_vip_grantee_already_vip":this.log.info(y),this.emits(["notice","_promiseVip"],[f,[i,[]]]);break;case"vip_success":this.log.info(y),this.emits(["notice","_promiseVip"],b);break;case"usage_mod":case"bad_mod_banned":case"bad_mod_mod":this.log.info(y),this.emits(["notice","_promiseMod"],v);break;case"unmod_success":this.log.info(y),this.emits(["notice","_promiseUnmod"],b);break;case"unvip_success":this.log.info(y),this.emits(["notice","_promiseUnvip"],b);break;case"usage_unmod":case"bad_unmod_mod":this.log.info(y),this.emits(["notice","_promiseUnmod"],v);break;case"usage_unvip":case"bad_unvip_grantee_not_vip":this.log.info(y),this.emits(["notice","_promiseUnvip"],v);break;case"color_changed":this.log.info(y),this.emits(["notice","_promiseColor"],b);break;case"usage_color":case"turbo_only_color":this.log.info(y),this.emits(["notice","_promiseColor"],v);break;case"commercial_success":this.log.info(y),this.emits(["notice","_promiseCommercial"],b);break;case"usage_commercial":case"bad_commercial_error":this.log.info(y),this.emits(["notice","_promiseCommercial"],v);break;case"hosts_remaining":this.log.info(y);var k=isNaN(s[0])?0:parseInt(s[0]);this.emits(["notice","_promiseHost"],[f,[null,~~k]]);break;case"bad_host_hosting":case"bad_host_rate_exceeded":case"bad_host_error":case"usage_host":this.log.info(y),this.emits(["notice","_promiseHost"],[f,[i,null]]);break;case"already_r9k_on":case"usage_r9k_on":this.log.info(y),this.emits(["notice","_promiseR9kbeta"],v);break;case"already_r9k_off":case"usage_r9k_off":this.log.info(y),this.emits(["notice","_promiseR9kbetaoff"],v);break;case"timeout_success":this.log.info(y),this.emits(["notice","_promiseTimeout"],b);break;case"delete_message_success":this.log.info(`[${t} ${s}]`),this.emits(["notice","_promiseDeletemessage"],b);case"already_subs_off":case"usage_subs_off":this.log.info(y),this.emits(["notice","_promiseSubscribersoff"],v);break;case"already_subs_on":case"usage_subs_on":this.log.info(y),this.emits(["notice","_promiseSubscribers"],v);break;case"already_emote_only_off":case"usage_emote_only_off":this.log.info(y),this.emits(["notice","_promiseEmoteonlyoff"],v);break;case"already_emote_only_on":case"usage_emote_only_on":this.log.info(y),this.emits(["notice","_promiseEmoteonly"],v);break;case"usage_slow_on":this.log.info(y),this.emits(["notice","_promiseSlow"],v);break;case"usage_slow_off":this.log.info(y),this.emits(["notice","_promiseSlowoff"],v);break;case"usage_timeout":case"bad_timeout_admin":case"bad_timeout_broadcaster":case"bad_timeout_duration":case"bad_timeout_global_mod":case"bad_timeout_self":case"bad_timeout_staff":this.log.info(y),this.emits(["notice","_promiseTimeout"],v);break;case"untimeout_success":case"unban_success":this.log.info(y),this.emits(["notice","_promiseUnban"],b);break;case"usage_unban":case"bad_unban_no_ban":this.log.info(y),this.emits(["notice","_promiseUnban"],v);break;case"usage_delete":case"bad_delete_message_error":case"bad_delete_message_broadcaster":case"bad_delete_message_mod":this.log.info(y),this.emits(["notice","_promiseDeletemessage"],v);break;case"usage_unhost":case"not_hosting":this.log.info(y),this.emits(["notice","_promiseUnhost"],v);break;case"whisper_invalid_login":case"whisper_invalid_self":case"whisper_limit_per_min":case"whisper_limit_per_sec":case"whisper_restricted_recipient":this.log.info(y),this.emits(["notice","_promiseWhisper"],v);break;case"no_permission":case"msg_banned":case"msg_room_not_found":case"msg_channel_suspended":case"tos_ban":this.log.info(y),this.emits(["notice","_promiseBan","_promiseClear","_promiseUnban","_promiseTimeout","_promiseDeletemessage","_promiseMods","_promiseMod","_promiseUnmod","_promiseVips","_promiseVip","_promiseUnvip","_promiseCommercial","_promiseHost","_promiseUnhost","_promiseJoin","_promisePart","_promiseR9kbeta","_promiseR9kbetaoff","_promiseSlow","_promiseSlowoff","_promiseFollowers","_promiseFollowersoff","_promiseSubscribers","_promiseSubscribersoff","_promiseEmoteonly","_promiseEmoteonlyoff"],[f,[i,t]]);break;case"msg_rejected":case"msg_rejected_mandatory":this.log.info(y),this.emit("automod",t,i,s);break;case"unrecognized_cmd":this.log.info(y),this.emit("notice",t,i,s);break;case"cmds_available":case"host_target_went_offline":case"msg_censored_broadcaster":case"msg_duplicate":case"msg_emoteonly":case"msg_verified_email":case"msg_ratelimit":case"msg_subsonly":case"msg_timedout":case"msg_bad_characters":case"msg_channel_blocked":case"msg_facebook":case"msg_followersonly":case"msg_followersonly_followed":case"msg_followersonly_zero":case"msg_slowmode":case"msg_suspended":case"no_help":case"usage_disconnect":case"usage_help":case"usage_me":this.log.info(y),this.emit("notice",t,i,s);break;case"host_on":case"host_off":break;default:s.includes("Login unsuccessful")||s.includes("Login authentication failed")||s.includes("Error logging in")||s.includes("Improperly formatted auth")?(this.wasCloseCalled=!1,this.reconnect=!1,this.reason=s,this.log.error(this.reason),this.ws.close()):s.includes("Invalid NICK")?(this.wasCloseCalled=!1,this.reconnect=!1,this.reason="Invalid NICK.",this.log.error(this.reason),this.ws.close()):this.log.warn(`Could not parse NOTICE from tmi.twitch.tv:\n${JSON.stringify(e,null,4)}`)}break;case"USERNOTICE":var x=e.tags["display-name"]||e.tags.login,$=e.tags["msg-param-sub-plan"]||"",T=l.unescapeIRC(l.get(e.tags["msg-param-sub-plan-name"],""))||null,S={prime:$.includes("Prime"),plan:$,planName:T},E=e.tags,N=~~(e.tags["msg-param-streak-months"]||0),P=e.tags["msg-param-recipient-display-name"]||e.tags["msg-param-recipient-user-name"],I=~~e.tags["msg-param-mass-gift-count"];switch(E["message-type"]=i,i){case"resub":this.emits(["resub","subanniversary"],[[t,x,N,s,E,S]]);break;case"sub":this.emit("subscription",t,x,S,s,E);break;case"subgift":this.emit("subgift",t,x,N,P,S,E);break;case"anonsubgift":this.emit("anonsubgift",t,N,P,S,E);break;case"submysterygift":this.emit("submysterygift",t,x,I,S,E);break;case"anonsubmysterygift":this.emit("anonsubmysterygift",t,I,S,E);break;case"primepaidupgrade":this.emit("primepaidupgrade",t,x,S,E);break;case"giftpaidupgrade":var O=e.tags["msg-param-sender-name"]||e.tags["msg-param-sender-login"];this.emit("giftpaidupgrade",t,x,O,E);break;case"anongiftpaidupgrade":this.emit("anongiftpaidupgrade",t,x,E);break;case"raid":x=e.tags["msg-param-displayName"]||e.tags["msg-param-login"];var M=e.tags["msg-param-viewerCount"];this.emit("raided",t,x,M)}break;case"HOSTTARGET":var L=s.split(" ");M=~~L[1]||0,"-"===L[0]?(this.log.info(`[${t}] Exited host mode.`),this.emits(["unhost","_promiseUnhost"],[[t,M],[null]])):(this.log.info(`[${t}] Now hosting ${L[0]} for ${M} viewer(s).`),this.emit("hosting",t,L[0],M));break;case"CLEARCHAT":if(e.params.length>1){var R=l.get(e.tags["ban-duration"],null);l.isNull(R)?(this.log.info(`[${t}] ${s} has been banned.`),this.emit("ban",t,s,null,e.tags)):(this.log.info(`[${t}] ${s} has been timed out for ${R} seconds.`),this.emit("timeout",t,s,null,~~R,e.tags))}else this.log.info(`[${t}] Chat was cleared by a moderator.`),this.emits(["clearchat","_promiseClear"],[[t],[null]]);break;case"CLEARMSG":if(e.params.length>1){x=e.tags.login;var D=s;(E=e.tags)["message-type"]="messagedeleted",this.log.info(`[${t}] ${x}'s message has been deleted.`),this.emit("messagedeleted",t,x,D,E)}break;case"RECONNECT":this.log.info("Received RECONNECT request from Twitch.."),this.log.info(`Disconnecting and reconnecting in ${Math.round(this.reconnectTimer/1e3)} seconds..`),this.disconnect(),setTimeout((()=>{this.connect()}),this.reconnectTimer);break;case"USERSTATE":e.tags.username=this.username,"mod"===e.tags["user-type"]&&(this.moderators[this.lastJoined]||(this.moderators[this.lastJoined]=[]),this.moderators[this.lastJoined].includes(this.username)||this.moderators[this.lastJoined].push(this.username)),l.isJustinfan(this.getUsername())||this.userstate[t]||(this.userstate[t]=e.tags,this.lastJoined=t,this.channels.push(t),this.log.info(`Joined ${t}`),this.emit("join",t,l.username(this.getUsername()),!0)),e.tags["emote-sets"]!==this.emotes&&this._updateEmoteset(e.tags["emote-sets"]),this.userstate[t]=e.tags;break;case"GLOBALUSERSTATE":this.globaluserstate=e.tags,void 0!==e.tags["emote-sets"]&&this._updateEmoteset(e.tags["emote-sets"]);break;case"ROOMSTATE":if(l.channel(this.lastJoined)===t&&this.emit("_promiseJoin",null,t),e.tags.channel=t,this.emit("roomstate",t,e.tags),!e.tags.hasOwnProperty("subs-only")){if(e.tags.hasOwnProperty("slow"))if("boolean"!=typeof e.tags.slow||e.tags.slow){var A=[t,!0,~~e.tags.slow];this.log.info(`[${t}] This room is now in slow mode.`),this.emits(["slow","slowmode","_promiseSlow"],[A,A,[null]])}else{var j=[t,!1,0];this.log.info(`[${t}] This room is no longer in slow mode.`),this.emits(["slow","slowmode","_promiseSlowoff"],[j,j,[null]])}e.tags.hasOwnProperty("followers-only")&&("-1"===e.tags["followers-only"]?(j=[t,!1,0],this.log.info(`[${t}] This room is no longer in followers-only mode.`),this.emits(["followersonly","followersmode","_promiseFollowersoff"],[j,j,[null]])):(A=[t,!0,~~e.tags["followers-only"]],this.log.info(`[${t}] This room is now in follower-only mode.`),this.emits(["followersonly","followersmode","_promiseFollowers"],[A,A,[null]])))}break;case"SERVERCHANGE":break;default:this.log.warn(`Could not parse message from tmi.twitch.tv:\n${JSON.stringify(e,null,4)}`)}else if("jtv"===e.prefix)switch(e.command){case"MODE":"+o"===s?(this.moderators[t]||(this.moderators[t]=[]),this.moderators[t].includes(e.params[2])||this.moderators[t].push(e.params[2]),this.emit("mod",t,e.params[2])):"-o"===s&&(this.moderators[t]||(this.moderators[t]=[]),this.moderators[t].filter((t=>t!=e.params[2])),this.emit("unmod",t,e.params[2]));break;default:this.log.warn(`Could not parse message from jtv:\n${JSON.stringify(e,null,4)}`)}else switch(e.command){case"353":this.emit("names",e.params[2],e.params[3].split(" "));break;case"366":break;case"JOIN":var U=e.prefix.split("!")[0];l.isJustinfan(this.getUsername())&&this.username===U&&(this.lastJoined=t,this.channels.push(t),this.log.info(`Joined ${t}`),this.emit("join",t,U,!0)),this.username!==U&&this.emit("join",t,U,!1);break;case"PART":var J,H=!1;U=e.prefix.split("!")[0],this.username===U&&(H=!0,this.userstate[t]&&delete this.userstate[t],-1!==(J=this.channels.indexOf(t))&&this.channels.splice(J,1),-1!==(J=this.opts.channels.indexOf(t))&&this.opts.channels.splice(J,1),this.log.info(`Left ${t}`),this.emit("_promisePart",null)),this.emit("part",t,U,H);break;case"WHISPER":U=e.prefix.split("!")[0],this.log.info(`[WHISPER] <${U}>: ${s}`),e.tags.hasOwnProperty("username")||(e.tags.username=U),e.tags["message-type"]="whisper";var W=l.channel(e.tags.username);this.emits(["whisper","message"],[[W,e.tags,s,!1]]);break;case"PRIVMSG":if(e.tags.username=e.prefix.split("!")[0],"jtv"===e.tags.username){var G=l.username(s.split(" ")[0]),V=s.includes("auto");if(s.includes("hosting you for")){var F=l.extractNumber(s);this.emit("hosted",t,G,F,V)}else s.includes("hosting you")&&this.emit("hosted",t,G,0,V)}else{var q=l.actionMessage(s);q?(e.tags["message-type"]="action",this.log.info(`[${t}] *<${e.tags.username}>: ${q[1]}`),this.emits(["action","message"],[[t,e.tags,q[1],!1]])):e.tags.hasOwnProperty("bits")?this.emit("cheer",t,e.tags,s):(e.tags["message-type"]="chat",this.log.info(`[${t}] <${e.tags.username}>: ${s}`),this.emits(["chat","message"],[[t,e.tags,s,!1]]))}break;default:this.log.warn(`Could not parse message:\n${JSON.stringify(e,null,4)}`)}}},m.prototype.connect=function(){return new Promise(((e,t)=>{this.server=l.get(this.opts.connection.server,"irc-ws.chat.twitch.tv"),this.port=l.get(this.opts.connection.port,80),this.secure&&(this.port=443),443===this.port&&(this.secure=!0),this.reconnectTimer=this.reconnectTimer*this.reconnectDecay,this.reconnectTimer>=this.maxReconnectInterval&&(this.reconnectTimer=this.maxReconnectInterval),this._openConnection(),this.once("_promiseConnect",(s=>{s?t(s):e([this.server,~~this.port])}))}))},m.prototype._openConnection=function(){this.ws=new h(`${this.secure?"wss":"ws"}://${this.server}:${this.port}/`,"irc"),this.ws.onmessage=this._onMessage.bind(this),this.ws.onerror=this._onError.bind(this),this.ws.onclose=this._onClose.bind(this),this.ws.onopen=this._onOpen.bind(this)},m.prototype._onOpen=function(){l.isNull(this.ws)||1!==this.ws.readyState||(this.log.info(`Connecting to ${this.server} on port ${this.port}..`),this.emit("connecting",this.server,~~this.port),this.username=l.get(this.opts.identity.username,l.justinfan()),this.password=l.password(l.get(this.opts.identity.password,"SCHMOOPIIE")),this.log.info("Sending authentication to server.."),this.emit("logon"),this.ws.send("CAP REQ :twitch.tv/tags twitch.tv/commands twitch.tv/membership"),this.ws.send(`PASS ${this.password}`),this.ws.send(`NICK ${this.username}`))},m.prototype._onMessage=function(e){e.data.split("\r\n").forEach((e=>{l.isNull(e)||this.handleMessage(a.msg(e))}))},m.prototype._onError=function(){this.moderators={},this.userstate={},this.globaluserstate={},clearInterval(this.pingLoop),clearTimeout(this.pingTimeout),this.reason=l.isNull(this.ws)?"Connection closed.":"Unable to connect.",this.emits(["_promiseConnect","disconnected"],[[this.reason]]),this.reconnect&&this.reconnections===this.maxReconnectAttempts&&(this.emit("maxreconnect"),this.log.error("Maximum reconnection attempts reached.")),this.reconnect&&!this.reconnecting&&this.reconnections<=this.maxReconnectAttempts-1&&(this.reconnecting=!0,this.reconnections=this.reconnections+1,this.log.error(`Reconnecting in ${Math.round(this.reconnectTimer/1e3)} seconds..`),this.emit("reconnect"),setTimeout((()=>{this.reconnecting=!1,this.connect()}),this.reconnectTimer)),this.ws=null},m.prototype._onClose=function(){this.moderators={},this.userstate={},this.globaluserstate={},clearInterval(this.pingLoop),clearTimeout(this.pingTimeout),this.wasCloseCalled?(this.wasCloseCalled=!1,this.reason="Connection closed.",this.log.info(this.reason),this.emits(["_promiseConnect","_promiseDisconnect","disconnected"],[[this.reason],[null],[this.reason]])):(this.emits(["_promiseConnect","disconnected"],[[this.reason]]),this.reconnect&&this.reconnections===this.maxReconnectAttempts&&(this.emit("maxreconnect"),this.log.error("Maximum reconnection attempts reached.")),this.reconnect&&!this.reconnecting&&this.reconnections<=this.maxReconnectAttempts-1&&(this.reconnecting=!0,this.reconnections=this.reconnections+1,this.log.error(`Could not connect to server. Reconnecting in ${Math.round(this.reconnectTimer/1e3)} seconds..`),this.emit("reconnect"),setTimeout((()=>{this.reconnecting=!1,this.connect()}),this.reconnectTimer))),this.ws=null},m.prototype._getPromiseDelay=function(){return this.currentLatency<=600?600:this.currentLatency+100},m.prototype._sendCommand=function(e,t,s,i){return new Promise(((n,o)=>{if(l.isNull(this.ws)||1!==this.ws.readyState)return o("Not connected to server.");if("number"==typeof e&&l.promiseDelay(e).then((()=>{o("No response from Twitch.")})),l.isNull(t))this.log.info(`Executing command: ${s}`),this.ws.send(s);else{var r=l.channel(t);this.log.info(`[${r}] Executing command: ${s}`),this.ws.send(`PRIVMSG ${r} :${s}`)}i(n,o)}))},m.prototype._sendMessage=function(e,t,s,i){return new Promise(((n,o)=>{if(l.isNull(this.ws)||1!==this.ws.readyState)return o("Not connected to server.");if(l.isJustinfan(this.getUsername()))return o("Cannot send anonymous messages.");var r=l.channel(t);if(this.userstate[r]||(this.userstate[r]={}),s.length>=500){var c=l.splitLine(s,500);s=c[0],setTimeout((()=>{this._sendMessage(e,t,c[1],(()=>{}))}),350)}this.ws.send(`PRIVMSG ${r} :${s}`);var h={};Object.keys(this.emotesets).forEach((e=>{this.emotesets[e].forEach((function(e){if(l.isRegex(e.code))return a.emoteRegex(s,e.code,e.id,h);a.emoteString(s,e.code,e.id,h)}))}));var m=l.merge(this.userstate[r],a.emotes({emotes:a.transformEmotes(h)||null})),u=l.actionMessage(s);u?(m["message-type"]="action",this.log.info(`[${r}] *<${this.getUsername()}>: ${u[1]}`),this.emits(["action","message"],[[r,m,u[1],!0]])):(m["message-type"]="chat",this.log.info(`[${r}] <${this.getUsername()}>: ${s}`),this.emits(["chat","message"],[[r,m,s,!0]])),i(n,o)}))},m.prototype._updateEmoteset=function(e){this.emotes=e,this.api({url:`/chat/emoticon_images?emotesets=${e}`,headers:{Authorization:`OAuth ${l.password(l.get(this.opts.identity.password,"")).replace("oauth:","")}`,"Client-ID":this.clientId}},((t,s,i)=>{if(!t)return this.emotesets=i.emoticon_sets||{},this.emit("emotesets",e,this.emotesets);setTimeout((()=>{this._updateEmoteset(e)}),6e4)}))},m.prototype.getUsername=function(){return this.username},m.prototype.getOptions=function(){return this.opts},m.prototype.getChannels=function(){return this.channels},m.prototype.isMod=function(e,t){var s=l.channel(e);return this.moderators[s]||(this.moderators[s]=[]),this.moderators[s].includes(l.username(t))},m.prototype.readyState=function(){return l.isNull(this.ws)?"CLOSED":["CONNECTING","OPEN","CLOSING","CLOSED"][this.ws.readyState]},m.prototype.disconnect=function(){return new Promise(((e,t)=>{l.isNull(this.ws)||3===this.ws.readyState?(this.log.error("Cannot disconnect from server. Socket is not opened or connection is already closing."),t("Cannot disconnect from server. Socket is not opened or connection is already closing.")):(this.wasCloseCalled=!0,this.log.info("Disconnecting from server.."),this.ws.close(),this.once("_promiseDisconnect",(()=>{e([this.server,~~this.port])})))}))},e.exports&&(e.exports=m),"undefined"!=typeof window&&(window.tmi={},window.tmi.client=m,window.tmi.Client=m)},641:(e,t,s)=>{var i=s(49);function n(e,t){return e=i.channel(e),t=i.get(t,30),this._sendCommand(this._getPromiseDelay(),e,`/followers ${t}`,((s,i)=>{this.once("_promiseFollowers",(n=>{n?i(n):s([e,~~t])}))}))}function o(e){return e=i.channel(e),this._sendCommand(this._getPromiseDelay(),e,"/followersoff",((t,s)=>{this.once("_promiseFollowersoff",(i=>{i?s(i):t([e])}))}))}function r(e){return e=i.channel(e),this._sendCommand(this._getPromiseDelay(),null,`PART ${e}`,((t,s)=>{this.once("_promisePart",(i=>{i?s(i):t([e])}))}))}function a(e){return e=i.channel(e),this._sendCommand(this._getPromiseDelay(),e,"/r9kbeta",((t,s)=>{this.once("_promiseR9kbeta",(i=>{i?s(i):t([e])}))}))}function c(e){return e=i.channel(e),this._sendCommand(this._getPromiseDelay(),e,"/r9kbetaoff",((t,s)=>{this.once("_promiseR9kbetaoff",(i=>{i?s(i):t([e])}))}))}function h(e,t){return e=i.channel(e),t=i.get(t,300),this._sendCommand(this._getPromiseDelay(),e,`/slow ${t}`,((s,i)=>{this.once("_promiseSlow",(n=>{n?i(n):s([e,~~t])}))}))}function l(e){return e=i.channel(e),this._sendCommand(this._getPromiseDelay(),e,"/slowoff",((t,s)=>{this.once("_promiseSlowoff",(i=>{i?s(i):t([e])}))}))}e.exports={action:function(e,t){return e=i.channel(e),t=`ACTION ${t}`,this._sendMessage(this._getPromiseDelay(),e,t,((s,i)=>{s([e,t])}))},ban:function(e,t,s){return e=i.channel(e),t=i.username(t),s=i.get(s,""),this._sendCommand(this._getPromiseDelay(),e,`/ban ${t} ${s}`,((i,n)=>{this.once("_promiseBan",(o=>{o?n(o):i([e,t,s])}))}))},clear:function(e){return e=i.channel(e),this._sendCommand(this._getPromiseDelay(),e,"/clear",((t,s)=>{this.once("_promiseClear",(i=>{i?s(i):t([e])}))}))},color:function(e,t){return t=i.get(t,e),this._sendCommand(this._getPromiseDelay(),"#tmijs",`/color ${t}`,((e,s)=>{this.once("_promiseColor",(i=>{i?s(i):e([t])}))}))},commercial:function(e,t){return e=i.channel(e),t=i.get(t,30),this._sendCommand(this._getPromiseDelay(),e,`/commercial ${t}`,((s,i)=>{this.once("_promiseCommercial",(n=>{n?i(n):s([e,~~t])}))}))},deletemessage:function(e,t){return e=i.channel(e),this._sendCommand(this._getPromiseDelay(),e,`/delete ${t}`,((t,s)=>{this.once("_promiseDeletemessage",(i=>{i?s(i):t([e])}))}))},emoteonly:function(e){return e=i.channel(e),this._sendCommand(this._getPromiseDelay(),e,"/emoteonly",((t,s)=>{this.once("_promiseEmoteonly",(i=>{i?s(i):t([e])}))}))},emoteonlyoff:function(e){return e=i.channel(e),this._sendCommand(this._getPromiseDelay(),e,"/emoteonlyoff",((t,s)=>{this.once("_promiseEmoteonlyoff",(i=>{i?s(i):t([e])}))}))},followersonly:n,followersmode:n,followersonlyoff:o,followersmodeoff:o,host:function(e,t){return e=i.channel(e),t=i.username(t),this._sendCommand(2e3,e,`/host ${t}`,((s,i)=>{this.once("_promiseHost",((n,o)=>{n?i(n):s([e,t,~~o])}))}))},join:function(e){return e=i.channel(e),this._sendCommand(null,null,`JOIN ${e}`,((t,s)=>{var n="_promiseJoin",o=!1,r=(a,c)=>{e===i.channel(c)&&(this.removeListener(n,r),o=!0,a?s(a):t([e]))};this.on(n,r);var a=this._getPromiseDelay();i.promiseDelay(a).then((()=>{o||this.emit(n,"No response from Twitch.",e)}))}))},mod:function(e,t){return e=i.channel(e),t=i.username(t),this._sendCommand(this._getPromiseDelay(),e,`/mod ${t}`,((s,i)=>{this.once("_promiseMod",(n=>{n?i(n):s([e,t])}))}))},mods:function(e){return e=i.channel(e),this._sendCommand(this._getPromiseDelay(),e,"/mods",((t,s)=>{this.once("_promiseMods",((i,n)=>{i?s(i):(n.forEach((t=>{this.moderators[e]||(this.moderators[e]=[]),this.moderators[e].includes(t)||this.moderators[e].push(t)})),t(n))}))}))},part:r,leave:r,ping:function(){return this._sendCommand(this._getPromiseDelay(),null,"PING",((e,t)=>{this.latency=new Date,this.pingTimeout=setTimeout((()=>{null!==this.ws&&(this.wasCloseCalled=!1,this.log.error("Ping timeout."),this.ws.close(),clearInterval(this.pingLoop),clearTimeout(this.pingTimeout))}),i.get(this.opts.connection.timeout,9999)),this.once("_promisePing",(t=>{e([parseFloat(t)])}))}))},r9kbeta:a,r9kmode:a,r9kbetaoff:c,r9kmodeoff:c,raw:function(e){return this._sendCommand(this._getPromiseDelay(),null,e,((t,s)=>{t([e])}))},say:function(e,t){return e=i.channel(e),t.startsWith(".")&&!t.startsWith("..")||t.startsWith("/")||t.startsWith("\\")?"me "===t.substr(1,3)?this.action(e,t.substr(4)):this._sendCommand(this._getPromiseDelay(),e,t,((s,i)=>{s([e,t])})):this._sendMessage(this._getPromiseDelay(),e,t,((s,i)=>{s([e,t])}))},slow:h,slowmode:h,slowoff:l,slowmodeoff:l,subscribers:function(e){return e=i.channel(e),this._sendCommand(this._getPromiseDelay(),e,"/subscribers",((t,s)=>{this.once("_promiseSubscribers",(i=>{i?s(i):t([e])}))}))},subscribersoff:function(e){return e=i.channel(e),this._sendCommand(this._getPromiseDelay(),e,"/subscribersoff",((t,s)=>{this.once("_promiseSubscribersoff",(i=>{i?s(i):t([e])}))}))},timeout:function(e,t,s,n){return e=i.channel(e),t=i.username(t),i.isNull(s)||i.isInteger(s)||(n=s,s=300),s=i.get(s,300),n=i.get(n,""),this._sendCommand(this._getPromiseDelay(),e,`/timeout ${t} ${s} ${n}`,((i,o)=>{this.once("_promiseTimeout",(r=>{r?o(r):i([e,t,~~s,n])}))}))},unban:function(e,t){return e=i.channel(e),t=i.username(t),this._sendCommand(this._getPromiseDelay(),e,`/unban ${t}`,((s,i)=>{this.once("_promiseUnban",(n=>{n?i(n):s([e,t])}))}))},unhost:function(e){return e=i.channel(e),this._sendCommand(2e3,e,"/unhost",((t,s)=>{this.once("_promiseUnhost",(i=>{i?s(i):t([e])}))}))},unmod:function(e,t){return e=i.channel(e),t=i.username(t),this._sendCommand(this._getPromiseDelay(),e,`/unmod ${t}`,((s,i)=>{this.once("_promiseUnmod",(n=>{n?i(n):s([e,t])}))}))},unvip:function(e,t){return e=i.channel(e),t=i.username(t),this._sendCommand(this._getPromiseDelay(),e,`/unvip ${t}`,((s,i)=>{this.once("_promiseUnvip",(n=>{n?i(n):s([e,t])}))}))},vip:function(e,t){return e=i.channel(e),t=i.username(t),this._sendCommand(this._getPromiseDelay(),e,`/vip ${t}`,((s,i)=>{this.once("_promiseVip",(n=>{n?i(n):s([e,t])}))}))},vips:function(e){return e=i.channel(e),this._sendCommand(this._getPromiseDelay(),e,"/vips",((e,t)=>{this.once("_promiseVips",((s,i)=>{s?t(s):e(i)}))}))},whisper:function(e,t){return(e=i.username(e))===this.getUsername()?Promise.reject("Cannot send a whisper to the same account."):this._sendCommand(this._getPromiseDelay(),"#tmijs",`/w ${e} ${t}`,((s,n)=>{var o=i.channel(e),r=i.merge({"message-type":"whisper","message-id":null,"thread-id":null,username:this.getUsername()},this.globaluserstate);this.emits(["whisper","message"],[[o,r,t,!0],[o,r,t,!0]]),s([e,t])}))}}},378:e=>{function t(){this._events=this._events||{},this._maxListeners=this._maxListeners||void 0}function s(e){return"function"==typeof e}function i(e){return"object"==typeof e&&null!==e}function n(e){return void 0===e}String.prototype.startsWith||(String.prototype.startsWith=function(e,t){return t=t||0,this.indexOf(e,t)===t}),e.exports=t,t.EventEmitter=t,t.prototype._events=void 0,t.prototype._maxListeners=void 0,t.defaultMaxListeners=10,t.prototype.setMaxListeners=function(e){if("number"!=typeof e||e<0||isNaN(e))throw TypeError("n must be a positive number");return this._maxListeners=e,this},t.prototype.emits=function(e,t){for(var s=0;s<e.length;s++){var i=s<t.length?t[s]:t[t.length-1];this.emit.apply(this,[e[s]].concat(i))}},t.prototype.emit=function(e){var t,o,r,a,c,h;if(this._events||(this._events={}),"error"===e&&(!this._events.error||i(this._events.error)&&!this._events.error.length)){if((t=arguments[1])instanceof Error)throw t;throw TypeError('Uncaught, unspecified "error" event.')}if(n(o=this._events[e]))return!1;if(s(o))switch(arguments.length){case 1:o.call(this);break;case 2:o.call(this,arguments[1]);break;case 3:o.call(this,arguments[1],arguments[2]);break;default:a=Array.prototype.slice.call(arguments,1),o.apply(this,a)}else if(i(o))for(a=Array.prototype.slice.call(arguments,1),r=(h=o.slice()).length,c=0;c<r;c++)h[c].apply(this,a);return!0},t.prototype.addListener=function(e,o){var r;if(!s(o))throw TypeError("listener must be a function");return this._events||(this._events={}),this._events.newListener&&this.emit("newListener",e,s(o.listener)?o.listener:o),this._events[e]?i(this._events[e])?this._events[e].push(o):this._events[e]=[this._events[e],o]:this._events[e]=o,i(this._events[e])&&!this._events[e].warned&&(r=n(this._maxListeners)?t.defaultMaxListeners:this._maxListeners)&&r>0&&this._events[e].length>r&&(this._events[e].warned=!0,console.error("(node) warning: possible EventEmitter memory leak detected. %d listeners added. Use emitter.setMaxListeners() to increase limit.",this._events[e].length),"function"==typeof console.trace&&console.trace()),this},t.prototype.on=t.prototype.addListener,t.prototype.once=function(e,t){if(!s(t))throw TypeError("listener must be a function");var i=!1;if(this._events.hasOwnProperty(e)&&"_"===e.charAt(0)){var n=1,o=e;for(var r in this._events)this._events.hasOwnProperty(r)&&r.startsWith(o)&&n++;e+=n}function a(){"_"!==e.charAt(0)||isNaN(e.substr(e.length-1))||(e=e.substring(0,e.length-1)),this.removeListener(e,a),i||(i=!0,t.apply(this,arguments))}return a.listener=t,this.on(e,a),this},t.prototype.removeListener=function(e,t){var n,o,r,a;if(!s(t))throw TypeError("listener must be a function");if(!this._events||!this._events[e])return this;if(r=(n=this._events[e]).length,o=-1,n===t||s(n.listener)&&n.listener===t){if(delete this._events[e],this._events.hasOwnProperty(e+"2")&&"_"===e.charAt(0)){var c=e;for(var h in this._events)this._events.hasOwnProperty(h)&&h.startsWith(c)&&(isNaN(parseInt(h.substr(h.length-1)))||(this._events[e+parseInt(h.substr(h.length-1)-1)]=this._events[h],delete this._events[h]));this._events[e]=this._events[e+"1"],delete this._events[e+"1"]}this._events.removeListener&&this.emit("removeListener",e,t)}else if(i(n)){for(a=r;a-- >0;)if(n[a]===t||n[a].listener&&n[a].listener===t){o=a;break}if(o<0)return this;1===n.length?(n.length=0,delete this._events[e]):n.splice(o,1),this._events.removeListener&&this.emit("removeListener",e,t)}return this},t.prototype.removeAllListeners=function(e){var t,i;if(!this._events)return this;if(!this._events.removeListener)return 0===arguments.length?this._events={}:this._events[e]&&delete this._events[e],this;if(0===arguments.length){for(t in this._events)"removeListener"!==t&&this.removeAllListeners(t);return this.removeAllListeners("removeListener"),this._events={},this}if(s(i=this._events[e]))this.removeListener(e,i);else if(i)for(;i.length;)this.removeListener(e,i[i.length-1]);return delete this._events[e],this},t.prototype.listeners=function(e){return this._events&&this._events[e]?s(this._events[e])?[this._events[e]]:this._events[e].slice():[]},t.prototype.listenerCount=function(e){if(this._events){var t=this._events[e];if(s(t))return 1;if(t)return t.length}return 0},t.listenerCount=function(e,t){return e.listenerCount(t)}},352:(e,t,s)=>{var i=s(49),n="info",o={trace:0,debug:1,info:2,warn:3,error:4,fatal:5};function r(e){return function(t){o[e]>=o[n]&&console.log(`[${i.formatDate(new Date)}] ${e}: ${t}`)}}e.exports={setLevel:function(e){n=e},trace:r("trace"),debug:r("debug"),info:r("info"),warn:r("warn"),error:r("error"),fatal:r("fatal")}},549:(e,t,s)=>{var i=s(49),n=/\S+/g;function o(e,t,s=",",n="/",o){var r=e[t];if(void 0===r)return e;var a=i.isString(r);if(e[t+"-raw"]=a?r:null,!0===r)return e[t]=null,e;if(e[t]={},a)for(var c=r.split(s),h=0;h<c.length;h++){var l=c[h].split(n),m=l[1];void 0!==o&&m&&(m=m.split(o)),e[t][l[0]]=m||null}return e}e.exports={badges:function(e){return o(e,"badges")},badgeInfo:function(e){return o(e,"badge-info")},emotes:function(e){return o(e,"emotes","/",":",",")},emoteRegex:function(e,t,s,o){n.lastIndex=0;for(var r,a=new RegExp("(\\b|^|s)"+i.unescapeHtml(t)+"(\\b|$|s)");null!==(r=n.exec(e));)a.test(r[0])&&(o[s]=o[s]||[],o[s].push([r.index,n.lastIndex-1]))},emoteString:function(e,t,s,o){var r;for(n.lastIndex=0;null!==(r=n.exec(e));)r[0]===i.unescapeHtml(t)&&(o[s]=o[s]||[],o[s].push([r.index,n.lastIndex-1]))},transformEmotes:function(e){var t="";return Object.keys(e).forEach((s=>{t=`${t+s}:`,e[s].forEach((e=>{t=`${t+e.join("-")},`})),t=`${t.slice(0,-1)}/`})),t.slice(0,-1)},msg:function(e){var t={raw:e,tags:{},prefix:null,command:null,params:[]},s=0,i=0;if(64===e.charCodeAt(0)){if(-1===(i=e.indexOf(" ")))return null;for(var n=e.slice(1,i).split(";"),o=0;o<n.length;o++){var r=n[o],a=r.split("=");t.tags[a[0]]=r.substring(r.indexOf("=")+1)||!0}s=i+1}for(;32===e.charCodeAt(s);)s++;if(58===e.charCodeAt(s)){if(-1===(i=e.indexOf(" ",s)))return null;for(t.prefix=e.slice(s+1,i),s=i+1;32===e.charCodeAt(s);)s++}if(-1===(i=e.indexOf(" ",s)))return e.length>s?(t.command=e.slice(s),t):null;for(t.command=e.slice(s,i),s=i+1;32===e.charCodeAt(s);)s++;for(;s<e.length;){if(i=e.indexOf(" ",s),58===e.charCodeAt(s)){t.params.push(e.slice(s+1));break}if(-1===i){if(-1===i){t.params.push(e.slice(s));break}}else for(t.params.push(e.slice(s,i)),s=i+1;32===e.charCodeAt(s);)s++}return t}}},776:(e,t)=>{function s(e){this.queue=[],this.index=0,this.defaultDelay=e||3e3}s.prototype.add=function(e,t){this.queue.push({fn:e,delay:t})},s.prototype.run=function(e){(e||0===e)&&(this.index=e),this.next()},s.prototype.next=function(){var e=this.index++,t=this.queue[e],s=this.queue[this.index];t&&(t.fn(),s&&setTimeout((()=>{this.next()}),s.delay||this.defaultDelay))},s.prototype.reset=function(){this.index=0},s.prototype.clear=function(){this.index=0,this.queue=[]},t.queue=s},49:e=>{var t=/^\u0001ACTION ([^\u0001]+)\u0001$/,s=/^(justinfan)(\d+$)/,i=/\\([sn:r\\])/g,n={s:" ",n:"",":":";",r:""},o=e.exports={get:(e,t)=>void 0===e?t:e,isBoolean:e=>"boolean"==typeof e,isFinite:e=>isFinite(e)&&!isNaN(parseFloat(e)),isInteger:e=>!isNaN(o.toNumber(e,0)),isJustinfan:e=>s.test(e),isNull:e=>null===e,isRegex:e=>/[\|\\\^\$\*\+\?\:\#]/.test(e),isString:e=>"string"==typeof e,isURL:e=>RegExp("^(?:(?:https?|ftp)://)(?:\\S+(?::\\S*)?@)?(?:(?!(?:10|127)(?:\\.\\d{1,3}){3})(?!(?:169\\.254|192\\.168)(?:\\.\\d{1,3}){2})(?!172\\.(?:1[6-9]|2\\d|3[0-1])(?:\\.\\d{1,3}){2})(?:[1-9]\\d?|1\\d\\d|2[01]\\d|22[0-3])(?:\\.(?:1?\\d{1,2}|2[0-4]\\d|25[0-5])){2}(?:\\.(?:[1-9]\\d?|1\\d\\d|2[0-4]\\d|25[0-4]))|(?:(?:[a-z\\u00a1-\\uffff0-9]-*)*[a-z\\u00a1-\\uffff0-9]+)(?:\\.(?:[a-z\\u00a1-\\uffff0-9]-*)*[a-z\\u00a1-\\uffff0-9]+)*(?:\\.(?:[a-z\\u00a1-\\uffff]{2,}))\\.?)(?::\\d{2,5})?(?:[/?#]\\S*)?$","i").test(e),justinfan:()=>`justinfan${Math.floor(8e4*Math.random()+1e3)}`,password:e=>["SCHMOOPIIE","",null].includes(e)?"SCHMOOPIIE":`oauth:${e.toLowerCase().replace("oauth:","")}`,promiseDelay:e=>new Promise((function(t){setTimeout(t,e)})),replaceAll:(e,t)=>{if(null==e)return null;for(var s in t)e=e.replace(new RegExp(s,"g"),t[s]);return e},unescapeHtml:e=>e.replace(/\\&amp\\;/g,"&").replace(/\\&lt\\;/g,"<").replace(/\\&gt\\;/g,">").replace(/\\&quot\\;/g,'"').replace(/\\&#039\\;/g,"'"),unescapeIRC:e=>e&&e.includes("\\")?e.replace(i,((e,t)=>t in n?n[t]:t)):e,actionMessage:e=>e.match(t),addWord:(e,t)=>e.length?e+" "+t:e+t,channel:e=>{var t=(e||"").toLowerCase();return"#"===t[0]?t:"#"+t},extractNumber:e=>{for(var t=e.split(" "),s=0;s<t.length;s++)if(o.isInteger(t[s]))return~~t[s];return 0},formatDate:e=>{var t=e.getHours(),s=e.getMinutes();return`${t=(t<10?"0":"")+t}:${s=(s<10?"0":"")+s}`},inherits:(e,t)=>{e.super_=t;var s=function(){};s.prototype=t.prototype,e.prototype=new s,e.prototype.constructor=e},isNode:()=>{try{return"object"==typeof process&&"[object process]"===Object.prototype.toString.call(process)}catch(e){}return!1},isExtension:()=>{try{return window.chrome&&chrome.runtime&&chrome.runtime.id}catch(e){}return!1},isReactNative:()=>{try{return navigator&&"ReactNative"==navigator.product}catch(e){}return!1},merge:Object.assign,splitLine:(e,t)=>{var s=e.substring(0,t).lastIndexOf(" ");return-1===s&&(s=t-1),[e.substring(0,s),e.substring(s+1)]},toNumber:(e,t)=>{if(null===e)return 0;var s=Math.pow(10,o.isFinite(t)?t:0);return Math.round(e*s)/s},union:(e,t)=>{for(var s={},i=[],n=0;n<e.length;n++)s[o=e[n]]||(s[o]=!0,i.push(o));for(n=0;n<t.length;n++){var o;s[o=t[n]]||(s[o]=!0,i.push(o))}return i},username:e=>{var t=(e||"").toLowerCase();return"#"===t[0]?t.slice(1):t}}},887:()=>{},418:()=>{}},t={};function s(i){if(t[i])return t[i].exports;var n=t[i]={id:i,exports:{}};return e[i](n,n.exports,s),n.exports}s.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return s.d(t,{a:t}),t},s.d=(e,t)=>{for(var i in t)s.o(t,i)&&!s.o(e,i)&&Object.defineProperty(e,i,{enumerable:!0,get:t[i]})},s.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),s.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),(()=>{"use strict";var e=s(379),t=s.n(e),i=s(982);t()(i.Z,{insert:"head",singleton:!1}),i.Z.locals;var n=s(993),o=function(){function e(e){this.channel=e,this.client=(0,n.Client)({connection:{secure:!0,reconnect:!0},channels:[this.channel]}),console.log("[Chat] Connecting to channel #"+e),this.client.connect(),console.log("[Chat] Connected!"),this.registerEvents()}return e.prototype.registerEvents=function(){this.client.on("message",(function(e,t,s,i){console.log(e,s)}))},e}(),r=["#3498db","#f1c40f","#e74c3c","#3498db","#2ecc71","#1abc9c","#9b59b6","#f1c40f","#e67e22","#e74c3c","#ecf0f1"];var a,c=(a=function(e,t){return(a=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var s in t)Object.prototype.hasOwnProperty.call(t,s)&&(e[s]=t[s])})(e,t)},function(e,t){function s(){this.constructor=e}a(e,t),e.prototype=null===t?Object.create(t):(s.prototype=t.prototype,new s)}),h=function(e){function t(t,s,i,n,o){void 0===s&&(s=-1),void 0===i&&(i=-1),void 0===n&&(n=25),void 0===o&&(o=!0);var r=e.call(this,t,s,i)||this;return r.fontSize=n,r.round=o,r.pieX=r.width/2,r.pieY=r.height/2,r.r=Math.min(r.height,r.width)/4.5,r}return c(t,e),t.prototype.init=function(){},t.prototype.draw=function(e,t,s){void 0===t&&(t=!0),void 0===s&&(s=!0),s&&this.ctx.clearRect(0,0,this.width,this.height);var i,n,o,a=e.reduce((function(e,t){return e+t}));this.endAngle=0;for(var c=0;c<e.length;c++){var h=e[c]/a*100,l=r[c%r.length],m=Math.PI/50*h;console.log({value:h,color:l,currentAngle:m,drawText:t}),this.ctx.beginPath(),this.ctx.moveTo(this.pieX,this.pieY),this.ctx.arc(this.pieX,this.pieY,this.r,this.endAngle-.5*Math.PI,this.endAngle+m-.5*Math.PI),this.ctx.fillStyle=l,this.ctx.fill(),this.ctx.closePath();var u=this.endAngle+m/2;if(t){console.log("> Drawing text!"),this.ctx.fillStyle=(i=this.ctx.fillStyle,n=.65,o=void 0,function(e,t,s,i){return function(e,t,s,i){return void 0===i&&(i=!0),(i?"#":"")+(16777215&(e<<16|t<<8|s)).toString(16)}(e=Math.max(0,e*i),t=Math.max(0,t*i),s=Math.max(0,s*i))}((o=function(e){e.startsWith("#")&&(e=e.substring(1));var t=parseInt(e,16);return[t>>16&255,t>>8&255,255&t]}(i))[0],o[1],o[2],n)),this.ctx.font=this.fontSize+"px courier";var d=(this.round?Math.round(h):h)+"%",p=15*d.length,f=this.r-50,g=this.pieX+(Math.sin(u)*f+p/2*(Math.sin(u)-1)),_=this.pieY-(Math.cos(u)*f+7.5*(Math.cos(u)-1));this.ctx.fillText(d,g,_)}this.endAngle+=m}},t}((function(e,t,s){this.canvasElementId=e,this.width=t,this.height=s,-1==this.width&&(this.width=document.defaultView.innerWidth),-1==this.height&&(this.height=document.defaultView.innerHeight);var i=document.getElementById(this.canvasElementId);if(null!=i){this.canvas=i;var n=this.canvas.getContext("2d");console.log("ctx:",n),null!=n?(this.ctx=n,this.canvas.height=this.height,this.canvas.width=this.width,this.error||this.init()):this.error="Context not found."}else this.error="Canvas not found."})),l=new o("freiheitstream"),m=new h("bar");m.error?console.error(m.error):m.draw([33,50,17],!0,!0);var u=0;l.client.on("message",(function(e,t,s,i){u++,m.draw([u,100])}))})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,