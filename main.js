(()=>{var e={982:(e,t,s)=>{"use strict";s.d(t,{Z:()=>a});var n=s(15),i=s.n(n),o=s(645),r=s.n(o)()(i());r.push([e.id,"","",{version:3,sources:[],names:[],mappings:"",sourceRoot:""}]);const a=r},645:e=>{"use strict";e.exports=function(e){var t=[];return t.toString=function(){return this.map((function(t){var s=e(t);return t[2]?"@media ".concat(t[2]," {").concat(s,"}"):s})).join("")},t.i=function(e,s,n){"string"==typeof e&&(e=[[null,e,""]]);var i={};if(n)for(var o=0;o<this.length;o++){var r=this[o][0];null!=r&&(i[r]=!0)}for(var a=0;a<e.length;a++){var c=[].concat(e[a]);n&&i[c[0]]||(s&&(c[2]?c[2]="".concat(s," and ").concat(c[2]):c[2]=s),t.push(c))}},t}},15:e=>{"use strict";function t(e,t){(null==t||t>e.length)&&(t=e.length);for(var s=0,n=new Array(t);s<t;s++)n[s]=e[s];return n}e.exports=function(e){var s,n,i=(n=4,function(e){if(Array.isArray(e))return e}(s=e)||function(e,t){if("undefined"!=typeof Symbol&&Symbol.iterator in Object(e)){var s=[],n=!0,i=!1,o=void 0;try{for(var r,a=e[Symbol.iterator]();!(n=(r=a.next()).done)&&(s.push(r.value),!t||s.length!==t);n=!0);}catch(e){i=!0,o=e}finally{try{n||null==a.return||a.return()}finally{if(i)throw o}}return s}}(s,n)||function(e,s){if(e){if("string"==typeof e)return t(e,s);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?t(e,s):void 0}}(s,n)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),o=i[1],r=i[3];if("function"==typeof btoa){var a=btoa(unescape(encodeURIComponent(JSON.stringify(r)))),c="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(a),l="/*# ".concat(c," */"),h=r.sources.map((function(e){return"/*# sourceURL=".concat(r.sourceRoot||"").concat(e," */")}));return[o].concat(h).concat([l]).join("\n")}return[o].join("\n")}},187:e=>{"use strict";var t,s="object"==typeof Reflect?Reflect:null,n=s&&"function"==typeof s.apply?s.apply:function(e,t,s){return Function.prototype.apply.call(e,t,s)};t=s&&"function"==typeof s.ownKeys?s.ownKeys:Object.getOwnPropertySymbols?function(e){return Object.getOwnPropertyNames(e).concat(Object.getOwnPropertySymbols(e))}:function(e){return Object.getOwnPropertyNames(e)};var i=Number.isNaN||function(e){return e!=e};function o(){o.init.call(this)}e.exports=o,e.exports.once=function(e,t){return new Promise((function(s,n){function i(){void 0!==o&&e.removeListener("error",o),s([].slice.call(arguments))}var o;"error"!==t&&(o=function(s){e.removeListener(t,i),n(s)},e.once("error",o)),e.once(t,i)}))},o.EventEmitter=o,o.prototype._events=void 0,o.prototype._eventsCount=0,o.prototype._maxListeners=void 0;var r=10;function a(e){if("function"!=typeof e)throw new TypeError('The "listener" argument must be of type Function. Received type '+typeof e)}function c(e){return void 0===e._maxListeners?o.defaultMaxListeners:e._maxListeners}function l(e,t,s,n){var i,o,r,l;if(a(s),void 0===(o=e._events)?(o=e._events=Object.create(null),e._eventsCount=0):(void 0!==o.newListener&&(e.emit("newListener",t,s.listener?s.listener:s),o=e._events),r=o[t]),void 0===r)r=o[t]=s,++e._eventsCount;else if("function"==typeof r?r=o[t]=n?[s,r]:[r,s]:n?r.unshift(s):r.push(s),(i=c(e))>0&&r.length>i&&!r.warned){r.warned=!0;var h=new Error("Possible EventEmitter memory leak detected. "+r.length+" "+String(t)+" listeners added. Use emitter.setMaxListeners() to increase limit");h.name="MaxListenersExceededWarning",h.emitter=e,h.type=t,h.count=r.length,l=h,console&&console.warn&&console.warn(l)}return e}function h(){if(!this.fired)return this.target.removeListener(this.type,this.wrapFn),this.fired=!0,0===arguments.length?this.listener.call(this.target):this.listener.apply(this.target,arguments)}function u(e,t,s){var n={fired:!1,wrapFn:void 0,target:e,type:t,listener:s},i=h.bind(n);return i.listener=s,n.wrapFn=i,i}function m(e,t,s){var n=e._events;if(void 0===n)return[];var i=n[t];return void 0===i?[]:"function"==typeof i?s?[i.listener||i]:[i]:s?function(e){for(var t=new Array(e.length),s=0;s<t.length;++s)t[s]=e[s].listener||e[s];return t}(i):d(i,i.length)}function p(e){var t=this._events;if(void 0!==t){var s=t[e];if("function"==typeof s)return 1;if(void 0!==s)return s.length}return 0}function d(e,t){for(var s=new Array(t),n=0;n<t;++n)s[n]=e[n];return s}Object.defineProperty(o,"defaultMaxListeners",{enumerable:!0,get:function(){return r},set:function(e){if("number"!=typeof e||e<0||i(e))throw new RangeError('The value of "defaultMaxListeners" is out of range. It must be a non-negative number. Received '+e+".");r=e}}),o.init=function(){void 0!==this._events&&this._events!==Object.getPrototypeOf(this)._events||(this._events=Object.create(null),this._eventsCount=0),this._maxListeners=this._maxListeners||void 0},o.prototype.setMaxListeners=function(e){if("number"!=typeof e||e<0||i(e))throw new RangeError('The value of "n" is out of range. It must be a non-negative number. Received '+e+".");return this._maxListeners=e,this},o.prototype.getMaxListeners=function(){return c(this)},o.prototype.emit=function(e){for(var t=[],s=1;s<arguments.length;s++)t.push(arguments[s]);var i="error"===e,o=this._events;if(void 0!==o)i=i&&void 0===o.error;else if(!i)return!1;if(i){var r;if(t.length>0&&(r=t[0]),r instanceof Error)throw r;var a=new Error("Unhandled error."+(r?" ("+r.message+")":""));throw a.context=r,a}var c=o[e];if(void 0===c)return!1;if("function"==typeof c)n(c,this,t);else{var l=c.length,h=d(c,l);for(s=0;s<l;++s)n(h[s],this,t)}return!0},o.prototype.addListener=function(e,t){return l(this,e,t,!1)},o.prototype.on=o.prototype.addListener,o.prototype.prependListener=function(e,t){return l(this,e,t,!0)},o.prototype.once=function(e,t){return a(t),this.on(e,u(this,e,t)),this},o.prototype.prependOnceListener=function(e,t){return a(t),this.prependListener(e,u(this,e,t)),this},o.prototype.removeListener=function(e,t){var s,n,i,o,r;if(a(t),void 0===(n=this._events))return this;if(void 0===(s=n[e]))return this;if(s===t||s.listener===t)0==--this._eventsCount?this._events=Object.create(null):(delete n[e],n.removeListener&&this.emit("removeListener",e,s.listener||t));else if("function"!=typeof s){for(i=-1,o=s.length-1;o>=0;o--)if(s[o]===t||s[o].listener===t){r=s[o].listener,i=o;break}if(i<0)return this;0===i?s.shift():function(e,t){for(;t+1<e.length;t++)e[t]=e[t+1];e.pop()}(s,i),1===s.length&&(n[e]=s[0]),void 0!==n.removeListener&&this.emit("removeListener",e,r||t)}return this},o.prototype.off=o.prototype.removeListener,o.prototype.removeAllListeners=function(e){var t,s,n;if(void 0===(s=this._events))return this;if(void 0===s.removeListener)return 0===arguments.length?(this._events=Object.create(null),this._eventsCount=0):void 0!==s[e]&&(0==--this._eventsCount?this._events=Object.create(null):delete s[e]),this;if(0===arguments.length){var i,o=Object.keys(s);for(n=0;n<o.length;++n)"removeListener"!==(i=o[n])&&this.removeAllListeners(i);return this.removeAllListeners("removeListener"),this._events=Object.create(null),this._eventsCount=0,this}if("function"==typeof(t=s[e]))this.removeListener(e,t);else if(void 0!==t)for(n=t.length-1;n>=0;n--)this.removeListener(e,t[n]);return this},o.prototype.listeners=function(e){return m(this,e,!0)},o.prototype.rawListeners=function(e){return m(this,e,!1)},o.listenerCount=function(e,t){return"function"==typeof e.listenerCount?e.listenerCount(t):p.call(e,t)},o.prototype.listenerCount=p,o.prototype.eventNames=function(){return this._eventsCount>0?t(this._events):[]}},626:(e,t,s)=>{"use strict";s.r(t),s.d(t,{default:()=>n});const n="./31cfb2f0ac4f2117919ffd17ceb5045f.png"},478:(e,t,s)=>{"use strict";s.r(t),s.d(t,{default:()=>n});const n="./e0457b5fe828bb92809c99905ae4df36.png"},816:(e,t,s)=>{var n=s(91),i=s(626),o=s(478),r='<!DOCTYPE html> <html lang="en"> <head> <meta charset="UTF-8"/> <meta name="viewport" content="width=device-width,initial-scale=1"/> <title>Builder</title> <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.0.0-beta1/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-giJF6kkoqNQ00vy+HMDP7azOuL0xtbfIcaT9wjKHr8RbDVddVHyTfAAsrekwKmP1" crossorigin="anonymous"/> <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.0.0-beta1/dist/js/bootstrap.bundle.min.js" integrity="sha384-ygbV9kiqUc6oa4msXn9868pTtWMgiQaeYH7/t7LECLbyPA2x65Kgf80OJFdroafW" crossorigin="anonymous"><\/script> <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.5.1/jquery.min.js"><\/script> <style></style> </head> <body> <header> <nav class="navbar navbar-expand-md navbar-dark bg-dark"> <a class="navbar-brand" href="#">Builder</a> </nav> </header> <main role="main" class="container"> <h1 class="mt-5">Poll Overlay Builder</h1> <p class="lead"> Here you can easily customize the overlay. <br/> When you\'re done, press the button at the bottom, and then use the output URL as the web browser URL in your stream program. </p> <hr/> <form id="form"> <div class="form-group"> <label for="channel">Channel:</label> <input type="text" class="form-control" id="channel" name="channel" placeholder="d2aniel" required/> <small id="channelNotice" class="form-text text-muted">Enter here the channel name only. Without <code>https://twitch.tv/</code></small> </div> <div class="form-group"> <br/> <p class="form-check-label">Type:</p> <div class="form-check form-check-inline"> <input class="form-check-input" type="radio" name="type" id="type_bar" value="bar" checked="checked"/> <label class="form-check-label" for="type_bar"> <img src="'+n(i)+'" alt="Bar"/> </label> </div> <div class="form-check form-check-inline"> <input class="form-check-input" type="radio" name="type" id="type_pie" value="pie"/> <label class="form-check-label" for="type_pie"> <img src="'+n(o)+'" alt="Pie"/> </label> </div> </div> <hr/> <h3>Advanced:</h3> <div class="form-group"> <label for="timeout">Timeout:</label> <input type="number" class="form-control" id="timeout" name="timeout" value="10"/> </div> <div class="form-group"> <label for="requiredPings">Required Reactions:</label> <input type="number" class="form-control" id="requiredPings" name="requiredPings" value="3"/> </div> <small id="timeout_requiredpings_notice" class="form-text text-muted"> <ul> <li> The overlay will be <strong>shown</strong> if more than <code class="sminf_reqp">{Required Pings}</code> reactions were detected in <code class="sminf_to">{Timeout}</code> seconds </li> <li> The overlay will be <strong>hidden</strong> if less than <code class="sminf_reqp">{Required Pings}</code> responses were detected in <code class="sminf_to">{Timeout}</code> seconds </li> </ul> <script>const reqp=$("#requiredPings"),to=$("#timeout");function update(){$(".sminf_reqp").each((function(){$(this).html(reqp.val())})),$(".sminf_to").each((function(){$(this).html(to.val())}))}reqp.on("keydown",update).on("change",update),to.on("keydown",update).on("change",update)<\/script> </small> <hr/> <button type="submit" class="btn btn-primary">🔨</button> </form> <div id="output" style="display:none"> <hr/> <h2>Output:</h2> <input type="text" class="form-control" id="output_txt" name="channel" placeholder="(( Error ))" readonly="readonly"/> </div> <script>$("#form").on("submit",t=>{t.preventDefault();const s=$("#form").serialize(),o=$("#output");"none"==o.css("display")&&(console.log("Has display: none!"),o.css("display","unset"));const e=$("#output_txt");let n=window.location.href;n.toLowerCase().endsWith("builder.html")&&(n=n.substring(0,n.length-13)),e.val(`${n}/?${s}`)})<\/script> </main> </body> </html> ';e.exports=r},91:e=>{"use strict";e.exports=function(e,t){return t||(t={}),"string"!=typeof(e=e&&e.__esModule?e.default:e)?e:(t.hash&&(e+=t.hash),t.maybeNeedQuotes&&/[\t\n\f\r "'=<>`]/.test(e)?'"'.concat(e,'"'):e)}},153:(e,t,s)=>{"use strict";s.r(t),s.d(t,{default:()=>r});var n=s(379),i=s.n(n),o=s(982);i()(o.Z,{insert:"head",singleton:!1});const r=o.Z.locals||{}},379:(e,t,s)=>{"use strict";var n,i=function(){var e={};return function(t){if(void 0===e[t]){var s=document.querySelector(t);if(window.HTMLIFrameElement&&s instanceof window.HTMLIFrameElement)try{s=s.contentDocument.head}catch(e){s=null}e[t]=s}return e[t]}}(),o=[];function r(e){for(var t=-1,s=0;s<o.length;s++)if(o[s].identifier===e){t=s;break}return t}function a(e,t){for(var s={},n=[],i=0;i<e.length;i++){var a=e[i],c=t.base?a[0]+t.base:a[0],l=s[c]||0,h="".concat(c," ").concat(l);s[c]=l+1;var u=r(h),m={css:a[1],media:a[2],sourceMap:a[3]};-1!==u?(o[u].references++,o[u].updater(m)):o.push({identifier:h,updater:f(m,t),references:1}),n.push(h)}return n}function c(e){var t=document.createElement("style"),n=e.attributes||{};if(void 0===n.nonce){var o=s.nc;o&&(n.nonce=o)}if(Object.keys(n).forEach((function(e){t.setAttribute(e,n[e])})),"function"==typeof e.insert)e.insert(t);else{var r=i(e.insert||"head");if(!r)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");r.appendChild(t)}return t}var l,h=(l=[],function(e,t){return l[e]=t,l.filter(Boolean).join("\n")});function u(e,t,s,n){var i=s?"":n.media?"@media ".concat(n.media," {").concat(n.css,"}"):n.css;if(e.styleSheet)e.styleSheet.cssText=h(t,i);else{var o=document.createTextNode(i),r=e.childNodes;r[t]&&e.removeChild(r[t]),r.length?e.insertBefore(o,r[t]):e.appendChild(o)}}function m(e,t,s){var n=s.css,i=s.media,o=s.sourceMap;if(i?e.setAttribute("media",i):e.removeAttribute("media"),o&&"undefined"!=typeof btoa&&(n+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(o))))," */")),e.styleSheet)e.styleSheet.cssText=n;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(n))}}var p=null,d=0;function f(e,t){var s,n,i;if(t.singleton){var o=d++;s=p||(p=c(t)),n=u.bind(null,s,o,!1),i=u.bind(null,s,o,!0)}else s=c(t),n=m.bind(null,s,t),i=function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(s)};return n(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap)return;n(e=t)}else i()}}e.exports=function(e,t){(t=t||{}).singleton||"boolean"==typeof t.singleton||(t.singleton=(void 0===n&&(n=Boolean(window&&document&&document.all&&!window.atob)),n));var s=a(e=e||[],t);return function(e){if(e=e||[],"[object Array]"===Object.prototype.toString.call(e)){for(var n=0;n<s.length;n++){var i=r(s[n]);o[i].references--}for(var c=a(e,t),l=0;l<s.length;l++){var h=r(s[l]);0===o[h].references&&(o[h].updater(),o.splice(h,1))}s=c}}}},993:(e,t,s)=>{e.exports={client:s(839),Client:s(839)}},681:(e,t,s)=>{var n=s(887),i=s(49);e.exports=function(e,t){var s=null===i.get(e.url,null)?i.get(e.uri,null):i.get(e.url,null);if(i.isURL(s)||(s="https://api.twitch.tv/kraken"+("/"===s[0]?s:`/${s}`)),i.isNode())n(i.merge({method:"GET",json:!0},e,{url:s}),t);else if(i.isExtension()||i.isReactNative()){e=i.merge({url:s,method:"GET",headers:{}},e);var o=new XMLHttpRequest;for(var r in o.open(e.method,e.url,!0),e.headers)o.setRequestHeader(r,e.headers[r]);o.responseType="json",o.addEventListener("load",(e=>{4==o.readyState&&(200!=o.status?t(o.status,null,null):t(null,null,o.response))})),o.send()}else{var a=`jsonp_callback_${Math.round(1e5*Math.random())}`;window[a]=function(e){delete window[a],document.body.removeChild(c),t(null,null,e)};var c=document.createElement("script");c.src=`${s}${s.includes("?")?"&":"?"}callback=${a}`,document.body.appendChild(c)}}},839:(e,t,s)=>{var n=s(681),i=s(641),o=s(378).EventEmitter,r=s(352),a=s(549),c=s(776),l=s.g.WebSocket||s.g.MozWebSocket||s(418),h=s(49),u=function e(t){if(this instanceof e==0)return new e(t);this.setMaxListeners(0),this.opts=h.get(t,{}),this.opts.channels=this.opts.channels||[],this.opts.connection=this.opts.connection||{},this.opts.identity=this.opts.identity||{},this.opts.options=this.opts.options||{},this.clientId=h.get(this.opts.options.clientId,null),this.maxReconnectAttempts=h.get(this.opts.connection.maxReconnectAttempts,1/0),this.maxReconnectInterval=h.get(this.opts.connection.maxReconnectInterval,3e4),this.reconnect=h.get(this.opts.connection.reconnect,!1),this.reconnectDecay=h.get(this.opts.connection.reconnectDecay,1.5),this.reconnectInterval=h.get(this.opts.connection.reconnectInterval,1e3),this.reconnecting=!1,this.reconnections=0,this.reconnectTimer=this.reconnectInterval,this.secure=h.get(this.opts.connection.secure,!1),this.emotes="",this.emotesets={},this.channels=[],this.currentLatency=0,this.globaluserstate={},this.lastJoined="",this.latency=new Date,this.moderators={},this.pingLoop=null,this.pingTimeout=null,this.reason="",this.username="",this.userstate={},this.wasCloseCalled=!1,this.ws=null;var s="error";this.opts.options.debug&&(s="info"),this.log=this.opts.logger||r;try{r.setLevel(s)}catch(e){}this.opts.channels.forEach((function(e,t,s){s[t]=h.channel(e)})),o.call(this)};for(var m in h.inherits(u,o),u.prototype.api=n,i)u.prototype[m]=i[m];u.prototype.handleMessage=function(e){if(!h.isNull(e)){this.emit("raw_message",JSON.parse(JSON.stringify(e)),e);var t=h.channel(h.get(e.params[0],null)),s=h.get(e.params[1],null),n=h.get(e.tags["msg-id"],null);if(e.tags=a.badges(a.badgeInfo(a.emotes(e.tags))),e.tags){var i=e.tags;for(var o in i)if("emote-sets"!==o&&"ban-duration"!==o&&"bits"!==o){var r=i[o];h.isBoolean(r)?r=null:"1"===r?r=!0:"0"===r?r=!1:h.isString(r)&&(r=h.unescapeIRC(r)),i[o]=r}}if(h.isNull(e.prefix))switch(e.command){case"PING":this.emit("ping"),h.isNull(this.ws)||1!==this.ws.readyState||this.ws.send("PONG");break;case"PONG":var l=new Date;this.currentLatency=(l.getTime()-this.latency.getTime())/1e3,this.emits(["pong","_promisePing"],[[this.currentLatency]]),clearTimeout(this.pingTimeout);break;default:this.log.warn(`Could not parse message with no prefix:\n${JSON.stringify(e,null,4)}`)}else if("tmi.twitch.tv"===e.prefix)switch(e.command){case"002":case"003":case"004":case"375":case"376":case"CAP":break;case"001":this.username=e.params[0];break;case"372":this.log.info("Connected to server."),this.userstate["#tmijs"]={},this.emits(["connected","_promiseConnect"],[[this.server,this.port],[null]]),this.reconnections=0,this.reconnectTimer=this.reconnectInterval,this.pingLoop=setInterval((()=>{h.isNull(this.ws)||1!==this.ws.readyState||this.ws.send("PING"),this.latency=new Date,this.pingTimeout=setTimeout((()=>{h.isNull(this.ws)||(this.wasCloseCalled=!1,this.log.error("Ping timeout."),this.ws.close(),clearInterval(this.pingLoop),clearTimeout(this.pingTimeout))}),h.get(this.opts.connection.timeout,9999))}),6e4);var u=new c.queue(2e3),m=h.union(this.opts.channels,this.channels);this.channels=[];for(var p=0;p<m.length;p++){let e=m[p];u.add((()=>{h.isNull(this.ws)||1!==this.ws.readyState||this.join(e).catch((e=>{this.log.error(e)}))}))}u.run();break;case"NOTICE":var d=[null],f=[t,n,s],g=[t,!0],_=[t,!1],v=[f,d],y=[f,[n]],b=`[${t}] ${s}`;switch(n){case"subs_on":this.log.info(`[${t}] This room is now in subscribers-only mode.`),this.emits(["subscriber","subscribers","_promiseSubscribers"],[g,g,d]);break;case"subs_off":this.log.info(`[${t}] This room is no longer in subscribers-only mode.`),this.emits(["subscriber","subscribers","_promiseSubscribersoff"],[_,_,d]);break;case"emote_only_on":this.log.info(`[${t}] This room is now in emote-only mode.`),this.emits(["emoteonly","_promiseEmoteonly"],[g,d]);break;case"emote_only_off":this.log.info(`[${t}] This room is no longer in emote-only mode.`),this.emits(["emoteonly","_promiseEmoteonlyoff"],[_,d]);break;case"slow_on":case"slow_off":break;case"followers_on_zero":case"followers_on":case"followers_off":break;case"r9k_on":this.log.info(`[${t}] This room is now in r9k mode.`),this.emits(["r9kmode","r9kbeta","_promiseR9kbeta"],[g,g,d]);break;case"r9k_off":this.log.info(`[${t}] This room is no longer in r9k mode.`),this.emits(["r9kmode","r9kbeta","_promiseR9kbetaoff"],[_,_,d]);break;case"room_mods":var w=s.split(": ")[1].toLowerCase().split(", ").filter((e=>e));this.emits(["_promiseMods","mods"],[[null,w],[t,w]]);break;case"no_mods":this.emits(["_promiseMods","mods"],[[null,[]],[t,[]]]);break;case"vips_success":s.endsWith(".")&&(s=s.slice(0,-1));var C=s.split(": ")[1].toLowerCase().split(", ").filter((e=>e));this.emits(["_promiseVips","vips"],[[null,C],[t,C]]);break;case"no_vips":this.emits(["_promiseVips","vips"],[[null,[]],[t,[]]]);break;case"already_banned":case"bad_ban_admin":case"bad_ban_broadcaster":case"bad_ban_global_mod":case"bad_ban_self":case"bad_ban_staff":case"usage_ban":this.log.info(b),this.emits(["notice","_promiseBan"],y);break;case"ban_success":this.log.info(b),this.emits(["notice","_promiseBan"],v);break;case"usage_clear":this.log.info(b),this.emits(["notice","_promiseClear"],y);break;case"usage_mods":this.log.info(b),this.emits(["notice","_promiseMods"],[f,[n,[]]]);break;case"mod_success":this.log.info(b),this.emits(["notice","_promiseMod"],v);break;case"usage_vips":this.log.info(b),this.emits(["notice","_promiseVips"],[f,[n,[]]]);break;case"usage_vip":case"bad_vip_grantee_banned":case"bad_vip_grantee_already_vip":this.log.info(b),this.emits(["notice","_promiseVip"],[f,[n,[]]]);break;case"vip_success":this.log.info(b),this.emits(["notice","_promiseVip"],v);break;case"usage_mod":case"bad_mod_banned":case"bad_mod_mod":this.log.info(b),this.emits(["notice","_promiseMod"],y);break;case"unmod_success":this.log.info(b),this.emits(["notice","_promiseUnmod"],v);break;case"unvip_success":this.log.info(b),this.emits(["notice","_promiseUnvip"],v);break;case"usage_unmod":case"bad_unmod_mod":this.log.info(b),this.emits(["notice","_promiseUnmod"],y);break;case"usage_unvip":case"bad_unvip_grantee_not_vip":this.log.info(b),this.emits(["notice","_promiseUnvip"],y);break;case"color_changed":this.log.info(b),this.emits(["notice","_promiseColor"],v);break;case"usage_color":case"turbo_only_color":this.log.info(b),this.emits(["notice","_promiseColor"],y);break;case"commercial_success":this.log.info(b),this.emits(["notice","_promiseCommercial"],v);break;case"usage_commercial":case"bad_commercial_error":this.log.info(b),this.emits(["notice","_promiseCommercial"],y);break;case"hosts_remaining":this.log.info(b);var x=isNaN(s[0])?0:parseInt(s[0]);this.emits(["notice","_promiseHost"],[f,[null,~~x]]);break;case"bad_host_hosting":case"bad_host_rate_exceeded":case"bad_host_error":case"usage_host":this.log.info(b),this.emits(["notice","_promiseHost"],[f,[n,null]]);break;case"already_r9k_on":case"usage_r9k_on":this.log.info(b),this.emits(["notice","_promiseR9kbeta"],y);break;case"already_r9k_off":case"usage_r9k_off":this.log.info(b),this.emits(["notice","_promiseR9kbetaoff"],y);break;case"timeout_success":this.log.info(b),this.emits(["notice","_promiseTimeout"],v);break;case"delete_message_success":this.log.info(`[${t} ${s}]`),this.emits(["notice","_promiseDeletemessage"],v);case"already_subs_off":case"usage_subs_off":this.log.info(b),this.emits(["notice","_promiseSubscribersoff"],y);break;case"already_subs_on":case"usage_subs_on":this.log.info(b),this.emits(["notice","_promiseSubscribers"],y);break;case"already_emote_only_off":case"usage_emote_only_off":this.log.info(b),this.emits(["notice","_promiseEmoteonlyoff"],y);break;case"already_emote_only_on":case"usage_emote_only_on":this.log.info(b),this.emits(["notice","_promiseEmoteonly"],y);break;case"usage_slow_on":this.log.info(b),this.emits(["notice","_promiseSlow"],y);break;case"usage_slow_off":this.log.info(b),this.emits(["notice","_promiseSlowoff"],y);break;case"usage_timeout":case"bad_timeout_admin":case"bad_timeout_broadcaster":case"bad_timeout_duration":case"bad_timeout_global_mod":case"bad_timeout_self":case"bad_timeout_staff":this.log.info(b),this.emits(["notice","_promiseTimeout"],y);break;case"untimeout_success":case"unban_success":this.log.info(b),this.emits(["notice","_promiseUnban"],v);break;case"usage_unban":case"bad_unban_no_ban":this.log.info(b),this.emits(["notice","_promiseUnban"],y);break;case"usage_delete":case"bad_delete_message_error":case"bad_delete_message_broadcaster":case"bad_delete_message_mod":this.log.info(b),this.emits(["notice","_promiseDeletemessage"],y);break;case"usage_unhost":case"not_hosting":this.log.info(b),this.emits(["notice","_promiseUnhost"],y);break;case"whisper_invalid_login":case"whisper_invalid_self":case"whisper_limit_per_min":case"whisper_limit_per_sec":case"whisper_restricted_recipient":this.log.info(b),this.emits(["notice","_promiseWhisper"],y);break;case"no_permission":case"msg_banned":case"msg_room_not_found":case"msg_channel_suspended":case"tos_ban":this.log.info(b),this.emits(["notice","_promiseBan","_promiseClear","_promiseUnban","_promiseTimeout","_promiseDeletemessage","_promiseMods","_promiseMod","_promiseUnmod","_promiseVips","_promiseVip","_promiseUnvip","_promiseCommercial","_promiseHost","_promiseUnhost","_promiseJoin","_promisePart","_promiseR9kbeta","_promiseR9kbetaoff","_promiseSlow","_promiseSlowoff","_promiseFollowers","_promiseFollowersoff","_promiseSubscribers","_promiseSubscribersoff","_promiseEmoteonly","_promiseEmoteonlyoff"],[f,[n,t]]);break;case"msg_rejected":case"msg_rejected_mandatory":this.log.info(b),this.emit("automod",t,n,s);break;case"unrecognized_cmd":this.log.info(b),this.emit("notice",t,n,s);break;case"cmds_available":case"host_target_went_offline":case"msg_censored_broadcaster":case"msg_duplicate":case"msg_emoteonly":case"msg_verified_email":case"msg_ratelimit":case"msg_subsonly":case"msg_timedout":case"msg_bad_characters":case"msg_channel_blocked":case"msg_facebook":case"msg_followersonly":case"msg_followersonly_followed":case"msg_followersonly_zero":case"msg_slowmode":case"msg_suspended":case"no_help":case"usage_disconnect":case"usage_help":case"usage_me":this.log.info(b),this.emit("notice",t,n,s);break;case"host_on":case"host_off":break;default:s.includes("Login unsuccessful")||s.includes("Login authentication failed")||s.includes("Error logging in")||s.includes("Improperly formatted auth")?(this.wasCloseCalled=!1,this.reconnect=!1,this.reason=s,this.log.error(this.reason),this.ws.close()):s.includes("Invalid NICK")?(this.wasCloseCalled=!1,this.reconnect=!1,this.reason="Invalid NICK.",this.log.error(this.reason),this.ws.close()):this.log.warn(`Could not parse NOTICE from tmi.twitch.tv:\n${JSON.stringify(e,null,4)}`)}break;case"USERNOTICE":var k=e.tags["display-name"]||e.tags.login,O=e.tags["msg-param-sub-plan"]||"",T=h.unescapeIRC(h.get(e.tags["msg-param-sub-plan-name"],""))||null,P={prime:O.includes("Prime"),plan:O,planName:T},E=e.tags,M=~~(e.tags["msg-param-streak-months"]||0),N=e.tags["msg-param-recipient-display-name"]||e.tags["msg-param-recipient-user-name"],$=~~e.tags["msg-param-mass-gift-count"];switch(E["message-type"]=n,n){case"resub":this.emits(["resub","subanniversary"],[[t,k,M,s,E,P]]);break;case"sub":this.emit("subscription",t,k,P,s,E);break;case"subgift":this.emit("subgift",t,k,M,N,P,E);break;case"anonsubgift":this.emit("anonsubgift",t,M,N,P,E);break;case"submysterygift":this.emit("submysterygift",t,k,$,P,E);break;case"anonsubmysterygift":this.emit("anonsubmysterygift",t,$,P,E);break;case"primepaidupgrade":this.emit("primepaidupgrade",t,k,P,E);break;case"giftpaidupgrade":var L=e.tags["msg-param-sender-name"]||e.tags["msg-param-sender-login"];this.emit("giftpaidupgrade",t,k,L,E);break;case"anongiftpaidupgrade":this.emit("anongiftpaidupgrade",t,k,E);break;case"raid":k=e.tags["msg-param-displayName"]||e.tags["msg-param-login"];var S=e.tags["msg-param-viewerCount"];this.emit("raided",t,k,S)}break;case"HOSTTARGET":var I=s.split(" ");S=~~I[1]||0,"-"===I[0]?(this.log.info(`[${t}] Exited host mode.`),this.emits(["unhost","_promiseUnhost"],[[t,S],[null]])):(this.log.info(`[${t}] Now hosting ${I[0]} for ${S} viewer(s).`),this.emit("hosting",t,I[0],S));break;case"CLEARCHAT":if(e.params.length>1){var R=h.get(e.tags["ban-duration"],null);h.isNull(R)?(this.log.info(`[${t}] ${s} has been banned.`),this.emit("ban",t,s,null,e.tags)):(this.log.info(`[${t}] ${s} has been timed out for ${R} seconds.`),this.emit("timeout",t,s,null,~~R,e.tags))}else this.log.info(`[${t}] Chat was cleared by a moderator.`),this.emits(["clearchat","_promiseClear"],[[t],[null]]);break;case"CLEARMSG":if(e.params.length>1){k=e.tags.login;var j=s;(E=e.tags)["message-type"]="messagedeleted",this.log.info(`[${t}] ${k}'s message has been deleted.`),this.emit("messagedeleted",t,k,j,E)}break;case"RECONNECT":this.log.info("Received RECONNECT request from Twitch.."),this.log.info(`Disconnecting and reconnecting in ${Math.round(this.reconnectTimer/1e3)} seconds..`),this.disconnect(),setTimeout((()=>{this.connect()}),this.reconnectTimer);break;case"USERSTATE":e.tags.username=this.username,"mod"===e.tags["user-type"]&&(this.moderators[this.lastJoined]||(this.moderators[this.lastJoined]=[]),this.moderators[this.lastJoined].includes(this.username)||this.moderators[this.lastJoined].push(this.username)),h.isJustinfan(this.getUsername())||this.userstate[t]||(this.userstate[t]=e.tags,this.lastJoined=t,this.channels.push(t),this.log.info(`Joined ${t}`),this.emit("join",t,h.username(this.getUsername()),!0)),e.tags["emote-sets"]!==this.emotes&&this._updateEmoteset(e.tags["emote-sets"]),this.userstate[t]=e.tags;break;case"GLOBALUSERSTATE":this.globaluserstate=e.tags,void 0!==e.tags["emote-sets"]&&this._updateEmoteset(e.tags["emote-sets"]);break;case"ROOMSTATE":if(h.channel(this.lastJoined)===t&&this.emit("_promiseJoin",null,t),e.tags.channel=t,this.emit("roomstate",t,e.tags),!e.tags.hasOwnProperty("subs-only")){if(e.tags.hasOwnProperty("slow"))if("boolean"!=typeof e.tags.slow||e.tags.slow){var A=[t,!0,~~e.tags.slow];this.log.info(`[${t}] This room is now in slow mode.`),this.emits(["slow","slowmode","_promiseSlow"],[A,A,[null]])}else{var D=[t,!1,0];this.log.info(`[${t}] This room is no longer in slow mode.`),this.emits(["slow","slowmode","_promiseSlowoff"],[D,D,[null]])}e.tags.hasOwnProperty("followers-only")&&("-1"===e.tags["followers-only"]?(D=[t,!1,0],this.log.info(`[${t}] This room is no longer in followers-only mode.`),this.emits(["followersonly","followersmode","_promiseFollowersoff"],[D,D,[null]])):(A=[t,!0,~~e.tags["followers-only"]],this.log.info(`[${t}] This room is now in follower-only mode.`),this.emits(["followersonly","followersmode","_promiseFollowers"],[A,A,[null]])))}break;case"SERVERCHANGE":break;default:this.log.warn(`Could not parse message from tmi.twitch.tv:\n${JSON.stringify(e,null,4)}`)}else if("jtv"===e.prefix)switch(e.command){case"MODE":"+o"===s?(this.moderators[t]||(this.moderators[t]=[]),this.moderators[t].includes(e.params[2])||this.moderators[t].push(e.params[2]),this.emit("mod",t,e.params[2])):"-o"===s&&(this.moderators[t]||(this.moderators[t]=[]),this.moderators[t].filter((t=>t!=e.params[2])),this.emit("unmod",t,e.params[2]));break;default:this.log.warn(`Could not parse message from jtv:\n${JSON.stringify(e,null,4)}`)}else switch(e.command){case"353":this.emit("names",e.params[2],e.params[3].split(" "));break;case"366":break;case"JOIN":var U=e.prefix.split("!")[0];h.isJustinfan(this.getUsername())&&this.username===U&&(this.lastJoined=t,this.channels.push(t),this.log.info(`Joined ${t}`),this.emit("join",t,U,!0)),this.username!==U&&this.emit("join",t,U,!1);break;case"PART":var H,F=!1;U=e.prefix.split("!")[0],this.username===U&&(F=!0,this.userstate[t]&&delete this.userstate[t],-1!==(H=this.channels.indexOf(t))&&this.channels.splice(H,1),-1!==(H=this.opts.channels.indexOf(t))&&this.opts.channels.splice(H,1),this.log.info(`Left ${t}`),this.emit("_promisePart",null)),this.emit("part",t,U,F);break;case"WHISPER":U=e.prefix.split("!")[0],this.log.info(`[WHISPER] <${U}>: ${s}`),e.tags.hasOwnProperty("username")||(e.tags.username=U),e.tags["message-type"]="whisper";var J=h.channel(e.tags.username);this.emits(["whisper","message"],[[J,e.tags,s,!1]]);break;case"PRIVMSG":if(e.tags.username=e.prefix.split("!")[0],"jtv"===e.tags.username){var q=h.username(s.split(" ")[0]),W=s.includes("auto");if(s.includes("hosting you for")){var B=h.extractNumber(s);this.emit("hosted",t,q,B,W)}else s.includes("hosting you")&&this.emit("hosted",t,q,0,W)}else{var G=h.actionMessage(s);G?(e.tags["message-type"]="action",this.log.info(`[${t}] *<${e.tags.username}>: ${G[1]}`),this.emits(["action","message"],[[t,e.tags,G[1],!1]])):e.tags.hasOwnProperty("bits")?this.emit("cheer",t,e.tags,s):(e.tags["message-type"]="chat",this.log.info(`[${t}] <${e.tags.username}>: ${s}`),this.emits(["chat","message"],[[t,e.tags,s,!1]]))}break;default:this.log.warn(`Could not parse message:\n${JSON.stringify(e,null,4)}`)}}},u.prototype.connect=function(){return new Promise(((e,t)=>{this.server=h.get(this.opts.connection.server,"irc-ws.chat.twitch.tv"),this.port=h.get(this.opts.connection.port,80),this.secure&&(this.port=443),443===this.port&&(this.secure=!0),this.reconnectTimer=this.reconnectTimer*this.reconnectDecay,this.reconnectTimer>=this.maxReconnectInterval&&(this.reconnectTimer=this.maxReconnectInterval),this._openConnection(),this.once("_promiseConnect",(s=>{s?t(s):e([this.server,~~this.port])}))}))},u.prototype._openConnection=function(){this.ws=new l(`${this.secure?"wss":"ws"}://${this.server}:${this.port}/`,"irc"),this.ws.onmessage=this._onMessage.bind(this),this.ws.onerror=this._onError.bind(this),this.ws.onclose=this._onClose.bind(this),this.ws.onopen=this._onOpen.bind(this)},u.prototype._onOpen=function(){h.isNull(this.ws)||1!==this.ws.readyState||(this.log.info(`Connecting to ${this.server} on port ${this.port}..`),this.emit("connecting",this.server,~~this.port),this.username=h.get(this.opts.identity.username,h.justinfan()),this.password=h.password(h.get(this.opts.identity.password,"SCHMOOPIIE")),this.log.info("Sending authentication to server.."),this.emit("logon"),this.ws.send("CAP REQ :twitch.tv/tags twitch.tv/commands twitch.tv/membership"),this.ws.send(`PASS ${this.password}`),this.ws.send(`NICK ${this.username}`))},u.prototype._onMessage=function(e){e.data.split("\r\n").forEach((e=>{h.isNull(e)||this.handleMessage(a.msg(e))}))},u.prototype._onError=function(){this.moderators={},this.userstate={},this.globaluserstate={},clearInterval(this.pingLoop),clearTimeout(this.pingTimeout),this.reason=h.isNull(this.ws)?"Connection closed.":"Unable to connect.",this.emits(["_promiseConnect","disconnected"],[[this.reason]]),this.reconnect&&this.reconnections===this.maxReconnectAttempts&&(this.emit("maxreconnect"),this.log.error("Maximum reconnection attempts reached.")),this.reconnect&&!this.reconnecting&&this.reconnections<=this.maxReconnectAttempts-1&&(this.reconnecting=!0,this.reconnections=this.reconnections+1,this.log.error(`Reconnecting in ${Math.round(this.reconnectTimer/1e3)} seconds..`),this.emit("reconnect"),setTimeout((()=>{this.reconnecting=!1,this.connect()}),this.reconnectTimer)),this.ws=null},u.prototype._onClose=function(){this.moderators={},this.userstate={},this.globaluserstate={},clearInterval(this.pingLoop),clearTimeout(this.pingTimeout),this.wasCloseCalled?(this.wasCloseCalled=!1,this.reason="Connection closed.",this.log.info(this.reason),this.emits(["_promiseConnect","_promiseDisconnect","disconnected"],[[this.reason],[null],[this.reason]])):(this.emits(["_promiseConnect","disconnected"],[[this.reason]]),this.reconnect&&this.reconnections===this.maxReconnectAttempts&&(this.emit("maxreconnect"),this.log.error("Maximum reconnection attempts reached.")),this.reconnect&&!this.reconnecting&&this.reconnections<=this.maxReconnectAttempts-1&&(this.reconnecting=!0,this.reconnections=this.reconnections+1,this.log.error(`Could not connect to server. Reconnecting in ${Math.round(this.reconnectTimer/1e3)} seconds..`),this.emit("reconnect"),setTimeout((()=>{this.reconnecting=!1,this.connect()}),this.reconnectTimer))),this.ws=null},u.prototype._getPromiseDelay=function(){return this.currentLatency<=600?600:this.currentLatency+100},u.prototype._sendCommand=function(e,t,s,n){return new Promise(((i,o)=>{if(h.isNull(this.ws)||1!==this.ws.readyState)return o("Not connected to server.");if("number"==typeof e&&h.promiseDelay(e).then((()=>{o("No response from Twitch.")})),h.isNull(t))this.log.info(`Executing command: ${s}`),this.ws.send(s);else{var r=h.channel(t);this.log.info(`[${r}] Executing command: ${s}`),this.ws.send(`PRIVMSG ${r} :${s}`)}n(i,o)}))},u.prototype._sendMessage=function(e,t,s,n){return new Promise(((i,o)=>{if(h.isNull(this.ws)||1!==this.ws.readyState)return o("Not connected to server.");if(h.isJustinfan(this.getUsername()))return o("Cannot send anonymous messages.");var r=h.channel(t);if(this.userstate[r]||(this.userstate[r]={}),s.length>=500){var c=h.splitLine(s,500);s=c[0],setTimeout((()=>{this._sendMessage(e,t,c[1],(()=>{}))}),350)}this.ws.send(`PRIVMSG ${r} :${s}`);var l={};Object.keys(this.emotesets).forEach((e=>{this.emotesets[e].forEach((function(e){if(h.isRegex(e.code))return a.emoteRegex(s,e.code,e.id,l);a.emoteString(s,e.code,e.id,l)}))}));var u=h.merge(this.userstate[r],a.emotes({emotes:a.transformEmotes(l)||null})),m=h.actionMessage(s);m?(u["message-type"]="action",this.log.info(`[${r}] *<${this.getUsername()}>: ${m[1]}`),this.emits(["action","message"],[[r,u,m[1],!0]])):(u["message-type"]="chat",this.log.info(`[${r}] <${this.getUsername()}>: ${s}`),this.emits(["chat","message"],[[r,u,s,!0]])),n(i,o)}))},u.prototype._updateEmoteset=function(e){this.emotes=e,this.api({url:`/chat/emoticon_images?emotesets=${e}`,headers:{Authorization:`OAuth ${h.password(h.get(this.opts.identity.password,"")).replace("oauth:","")}`,"Client-ID":this.clientId}},((t,s,n)=>{if(!t)return this.emotesets=n.emoticon_sets||{},this.emit("emotesets",e,this.emotesets);setTimeout((()=>{this._updateEmoteset(e)}),6e4)}))},u.prototype.getUsername=function(){return this.username},u.prototype.getOptions=function(){return this.opts},u.prototype.getChannels=function(){return this.channels},u.prototype.isMod=function(e,t){var s=h.channel(e);return this.moderators[s]||(this.moderators[s]=[]),this.moderators[s].includes(h.username(t))},u.prototype.readyState=function(){return h.isNull(this.ws)?"CLOSED":["CONNECTING","OPEN","CLOSING","CLOSED"][this.ws.readyState]},u.prototype.disconnect=function(){return new Promise(((e,t)=>{h.isNull(this.ws)||3===this.ws.readyState?(this.log.error("Cannot disconnect from server. Socket is not opened or connection is already closing."),t("Cannot disconnect from server. Socket is not opened or connection is already closing.")):(this.wasCloseCalled=!0,this.log.info("Disconnecting from server.."),this.ws.close(),this.once("_promiseDisconnect",(()=>{e([this.server,~~this.port])})))}))},e.exports&&(e.exports=u),"undefined"!=typeof window&&(window.tmi={},window.tmi.client=u,window.tmi.Client=u)},641:(e,t,s)=>{var n=s(49);function i(e,t){return e=n.channel(e),t=n.get(t,30),this._sendCommand(this._getPromiseDelay(),e,`/followers ${t}`,((s,n)=>{this.once("_promiseFollowers",(i=>{i?n(i):s([e,~~t])}))}))}function o(e){return e=n.channel(e),this._sendCommand(this._getPromiseDelay(),e,"/followersoff",((t,s)=>{this.once("_promiseFollowersoff",(n=>{n?s(n):t([e])}))}))}function r(e){return e=n.channel(e),this._sendCommand(this._getPromiseDelay(),null,`PART ${e}`,((t,s)=>{this.once("_promisePart",(n=>{n?s(n):t([e])}))}))}function a(e){return e=n.channel(e),this._sendCommand(this._getPromiseDelay(),e,"/r9kbeta",((t,s)=>{this.once("_promiseR9kbeta",(n=>{n?s(n):t([e])}))}))}function c(e){return e=n.channel(e),this._sendCommand(this._getPromiseDelay(),e,"/r9kbetaoff",((t,s)=>{this.once("_promiseR9kbetaoff",(n=>{n?s(n):t([e])}))}))}function l(e,t){return e=n.channel(e),t=n.get(t,300),this._sendCommand(this._getPromiseDelay(),e,`/slow ${t}`,((s,n)=>{this.once("_promiseSlow",(i=>{i?n(i):s([e,~~t])}))}))}function h(e){return e=n.channel(e),this._sendCommand(this._getPromiseDelay(),e,"/slowoff",((t,s)=>{this.once("_promiseSlowoff",(n=>{n?s(n):t([e])}))}))}e.exports={action:function(e,t){return e=n.channel(e),t=`ACTION ${t}`,this._sendMessage(this._getPromiseDelay(),e,t,((s,n)=>{s([e,t])}))},ban:function(e,t,s){return e=n.channel(e),t=n.username(t),s=n.get(s,""),this._sendCommand(this._getPromiseDelay(),e,`/ban ${t} ${s}`,((n,i)=>{this.once("_promiseBan",(o=>{o?i(o):n([e,t,s])}))}))},clear:function(e){return e=n.channel(e),this._sendCommand(this._getPromiseDelay(),e,"/clear",((t,s)=>{this.once("_promiseClear",(n=>{n?s(n):t([e])}))}))},color:function(e,t){return t=n.get(t,e),this._sendCommand(this._getPromiseDelay(),"#tmijs",`/color ${t}`,((e,s)=>{this.once("_promiseColor",(n=>{n?s(n):e([t])}))}))},commercial:function(e,t){return e=n.channel(e),t=n.get(t,30),this._sendCommand(this._getPromiseDelay(),e,`/commercial ${t}`,((s,n)=>{this.once("_promiseCommercial",(i=>{i?n(i):s([e,~~t])}))}))},deletemessage:function(e,t){return e=n.channel(e),this._sendCommand(this._getPromiseDelay(),e,`/delete ${t}`,((t,s)=>{this.once("_promiseDeletemessage",(n=>{n?s(n):t([e])}))}))},emoteonly:function(e){return e=n.channel(e),this._sendCommand(this._getPromiseDelay(),e,"/emoteonly",((t,s)=>{this.once("_promiseEmoteonly",(n=>{n?s(n):t([e])}))}))},emoteonlyoff:function(e){return e=n.channel(e),this._sendCommand(this._getPromiseDelay(),e,"/emoteonlyoff",((t,s)=>{this.once("_promiseEmoteonlyoff",(n=>{n?s(n):t([e])}))}))},followersonly:i,followersmode:i,followersonlyoff:o,followersmodeoff:o,host:function(e,t){return e=n.channel(e),t=n.username(t),this._sendCommand(2e3,e,`/host ${t}`,((s,n)=>{this.once("_promiseHost",((i,o)=>{i?n(i):s([e,t,~~o])}))}))},join:function(e){return e=n.channel(e),this._sendCommand(null,null,`JOIN ${e}`,((t,s)=>{var i="_promiseJoin",o=!1,r=(a,c)=>{e===n.channel(c)&&(this.removeListener(i,r),o=!0,a?s(a):t([e]))};this.on(i,r);var a=this._getPromiseDelay();n.promiseDelay(a).then((()=>{o||this.emit(i,"No response from Twitch.",e)}))}))},mod:function(e,t){return e=n.channel(e),t=n.username(t),this._sendCommand(this._getPromiseDelay(),e,`/mod ${t}`,((s,n)=>{this.once("_promiseMod",(i=>{i?n(i):s([e,t])}))}))},mods:function(e){return e=n.channel(e),this._sendCommand(this._getPromiseDelay(),e,"/mods",((t,s)=>{this.once("_promiseMods",((n,i)=>{n?s(n):(i.forEach((t=>{this.moderators[e]||(this.moderators[e]=[]),this.moderators[e].includes(t)||this.moderators[e].push(t)})),t(i))}))}))},part:r,leave:r,ping:function(){return this._sendCommand(this._getPromiseDelay(),null,"PING",((e,t)=>{this.latency=new Date,this.pingTimeout=setTimeout((()=>{null!==this.ws&&(this.wasCloseCalled=!1,this.log.error("Ping timeout."),this.ws.close(),clearInterval(this.pingLoop),clearTimeout(this.pingTimeout))}),n.get(this.opts.connection.timeout,9999)),this.once("_promisePing",(t=>{e([parseFloat(t)])}))}))},r9kbeta:a,r9kmode:a,r9kbetaoff:c,r9kmodeoff:c,raw:function(e){return this._sendCommand(this._getPromiseDelay(),null,e,((t,s)=>{t([e])}))},say:function(e,t){return e=n.channel(e),t.startsWith(".")&&!t.startsWith("..")||t.startsWith("/")||t.startsWith("\\")?"me "===t.substr(1,3)?this.action(e,t.substr(4)):this._sendCommand(this._getPromiseDelay(),e,t,((s,n)=>{s([e,t])})):this._sendMessage(this._getPromiseDelay(),e,t,((s,n)=>{s([e,t])}))},slow:l,slowmode:l,slowoff:h,slowmodeoff:h,subscribers:function(e){return e=n.channel(e),this._sendCommand(this._getPromiseDelay(),e,"/subscribers",((t,s)=>{this.once("_promiseSubscribers",(n=>{n?s(n):t([e])}))}))},subscribersoff:function(e){return e=n.channel(e),this._sendCommand(this._getPromiseDelay(),e,"/subscribersoff",((t,s)=>{this.once("_promiseSubscribersoff",(n=>{n?s(n):t([e])}))}))},timeout:function(e,t,s,i){return e=n.channel(e),t=n.username(t),n.isNull(s)||n.isInteger(s)||(i=s,s=300),s=n.get(s,300),i=n.get(i,""),this._sendCommand(this._getPromiseDelay(),e,`/timeout ${t} ${s} ${i}`,((n,o)=>{this.once("_promiseTimeout",(r=>{r?o(r):n([e,t,~~s,i])}))}))},unban:function(e,t){return e=n.channel(e),t=n.username(t),this._sendCommand(this._getPromiseDelay(),e,`/unban ${t}`,((s,n)=>{this.once("_promiseUnban",(i=>{i?n(i):s([e,t])}))}))},unhost:function(e){return e=n.channel(e),this._sendCommand(2e3,e,"/unhost",((t,s)=>{this.once("_promiseUnhost",(n=>{n?s(n):t([e])}))}))},unmod:function(e,t){return e=n.channel(e),t=n.username(t),this._sendCommand(this._getPromiseDelay(),e,`/unmod ${t}`,((s,n)=>{this.once("_promiseUnmod",(i=>{i?n(i):s([e,t])}))}))},unvip:function(e,t){return e=n.channel(e),t=n.username(t),this._sendCommand(this._getPromiseDelay(),e,`/unvip ${t}`,((s,n)=>{this.once("_promiseUnvip",(i=>{i?n(i):s([e,t])}))}))},vip:function(e,t){return e=n.channel(e),t=n.username(t),this._sendCommand(this._getPromiseDelay(),e,`/vip ${t}`,((s,n)=>{this.once("_promiseVip",(i=>{i?n(i):s([e,t])}))}))},vips:function(e){return e=n.channel(e),this._sendCommand(this._getPromiseDelay(),e,"/vips",((e,t)=>{this.once("_promiseVips",((s,n)=>{s?t(s):e(n)}))}))},whisper:function(e,t){return(e=n.username(e))===this.getUsername()?Promise.reject("Cannot send a whisper to the same account."):this._sendCommand(this._getPromiseDelay(),"#tmijs",`/w ${e} ${t}`,((s,i)=>{var o=n.channel(e),r=n.merge({"message-type":"whisper","message-id":null,"thread-id":null,username:this.getUsername()},this.globaluserstate);this.emits(["whisper","message"],[[o,r,t,!0],[o,r,t,!0]]),s([e,t])}))}}},378:e=>{function t(){this._events=this._events||{},this._maxListeners=this._maxListeners||void 0}function s(e){return"function"==typeof e}function n(e){return"object"==typeof e&&null!==e}function i(e){return void 0===e}String.prototype.startsWith||(String.prototype.startsWith=function(e,t){return t=t||0,this.indexOf(e,t)===t}),e.exports=t,t.EventEmitter=t,t.prototype._events=void 0,t.prototype._maxListeners=void 0,t.defaultMaxListeners=10,t.prototype.setMaxListeners=function(e){if("number"!=typeof e||e<0||isNaN(e))throw TypeError("n must be a positive number");return this._maxListeners=e,this},t.prototype.emits=function(e,t){for(var s=0;s<e.length;s++){var n=s<t.length?t[s]:t[t.length-1];this.emit.apply(this,[e[s]].concat(n))}},t.prototype.emit=function(e){var t,o,r,a,c,l;if(this._events||(this._events={}),"error"===e&&(!this._events.error||n(this._events.error)&&!this._events.error.length)){if((t=arguments[1])instanceof Error)throw t;throw TypeError('Uncaught, unspecified "error" event.')}if(i(o=this._events[e]))return!1;if(s(o))switch(arguments.length){case 1:o.call(this);break;case 2:o.call(this,arguments[1]);break;case 3:o.call(this,arguments[1],arguments[2]);break;default:a=Array.prototype.slice.call(arguments,1),o.apply(this,a)}else if(n(o))for(a=Array.prototype.slice.call(arguments,1),r=(l=o.slice()).length,c=0;c<r;c++)l[c].apply(this,a);return!0},t.prototype.addListener=function(e,o){var r;if(!s(o))throw TypeError("listener must be a function");return this._events||(this._events={}),this._events.newListener&&this.emit("newListener",e,s(o.listener)?o.listener:o),this._events[e]?n(this._events[e])?this._events[e].push(o):this._events[e]=[this._events[e],o]:this._events[e]=o,n(this._events[e])&&!this._events[e].warned&&(r=i(this._maxListeners)?t.defaultMaxListeners:this._maxListeners)&&r>0&&this._events[e].length>r&&(this._events[e].warned=!0,console.error("(node) warning: possible EventEmitter memory leak detected. %d listeners added. Use emitter.setMaxListeners() to increase limit.",this._events[e].length),"function"==typeof console.trace&&console.trace()),this},t.prototype.on=t.prototype.addListener,t.prototype.once=function(e,t){if(!s(t))throw TypeError("listener must be a function");var n=!1;if(this._events.hasOwnProperty(e)&&"_"===e.charAt(0)){var i=1,o=e;for(var r in this._events)this._events.hasOwnProperty(r)&&r.startsWith(o)&&i++;e+=i}function a(){"_"!==e.charAt(0)||isNaN(e.substr(e.length-1))||(e=e.substring(0,e.length-1)),this.removeListener(e,a),n||(n=!0,t.apply(this,arguments))}return a.listener=t,this.on(e,a),this},t.prototype.removeListener=function(e,t){var i,o,r,a;if(!s(t))throw TypeError("listener must be a function");if(!this._events||!this._events[e])return this;if(r=(i=this._events[e]).length,o=-1,i===t||s(i.listener)&&i.listener===t){if(delete this._events[e],this._events.hasOwnProperty(e+"2")&&"_"===e.charAt(0)){var c=e;for(var l in this._events)this._events.hasOwnProperty(l)&&l.startsWith(c)&&(isNaN(parseInt(l.substr(l.length-1)))||(this._events[e+parseInt(l.substr(l.length-1)-1)]=this._events[l],delete this._events[l]));this._events[e]=this._events[e+"1"],delete this._events[e+"1"]}this._events.removeListener&&this.emit("removeListener",e,t)}else if(n(i)){for(a=r;a-- >0;)if(i[a]===t||i[a].listener&&i[a].listener===t){o=a;break}if(o<0)return this;1===i.length?(i.length=0,delete this._events[e]):i.splice(o,1),this._events.removeListener&&this.emit("removeListener",e,t)}return this},t.prototype.removeAllListeners=function(e){var t,n;if(!this._events)return this;if(!this._events.removeListener)return 0===arguments.length?this._events={}:this._events[e]&&delete this._events[e],this;if(0===arguments.length){for(t in this._events)"removeListener"!==t&&this.removeAllListeners(t);return this.removeAllListeners("removeListener"),this._events={},this}if(s(n=this._events[e]))this.removeListener(e,n);else if(n)for(;n.length;)this.removeListener(e,n[n.length-1]);return delete this._events[e],this},t.prototype.listeners=function(e){return this._events&&this._events[e]?s(this._events[e])?[this._events[e]]:this._events[e].slice():[]},t.prototype.listenerCount=function(e){if(this._events){var t=this._events[e];if(s(t))return 1;if(t)return t.length}return 0},t.listenerCount=function(e,t){return e.listenerCount(t)}},352:(e,t,s)=>{var n=s(49),i="info",o={trace:0,debug:1,info:2,warn:3,error:4,fatal:5};function r(e){return function(t){o[e]>=o[i]&&console.log(`[${n.formatDate(new Date)}] ${e}: ${t}`)}}e.exports={setLevel:function(e){i=e},trace:r("trace"),debug:r("debug"),info:r("info"),warn:r("warn"),error:r("error"),fatal:r("fatal")}},549:(e,t,s)=>{var n=s(49),i=/\S+/g;function o(e,t,s=",",i="/",o){var r=e[t];if(void 0===r)return e;var a=n.isString(r);if(e[t+"-raw"]=a?r:null,!0===r)return e[t]=null,e;if(e[t]={},a)for(var c=r.split(s),l=0;l<c.length;l++){var h=c[l].split(i),u=h[1];void 0!==o&&u&&(u=u.split(o)),e[t][h[0]]=u||null}return e}e.exports={badges:function(e){return o(e,"badges")},badgeInfo:function(e){return o(e,"badge-info")},emotes:function(e){return o(e,"emotes","/",":",",")},emoteRegex:function(e,t,s,o){i.lastIndex=0;for(var r,a=new RegExp("(\\b|^|s)"+n.unescapeHtml(t)+"(\\b|$|s)");null!==(r=i.exec(e));)a.test(r[0])&&(o[s]=o[s]||[],o[s].push([r.index,i.lastIndex-1]))},emoteString:function(e,t,s,o){var r;for(i.lastIndex=0;null!==(r=i.exec(e));)r[0]===n.unescapeHtml(t)&&(o[s]=o[s]||[],o[s].push([r.index,i.lastIndex-1]))},transformEmotes:function(e){var t="";return Object.keys(e).forEach((s=>{t=`${t+s}:`,e[s].forEach((e=>{t=`${t+e.join("-")},`})),t=`${t.slice(0,-1)}/`})),t.slice(0,-1)},msg:function(e){var t={raw:e,tags:{},prefix:null,command:null,params:[]},s=0,n=0;if(64===e.charCodeAt(0)){if(-1===(n=e.indexOf(" ")))return null;for(var i=e.slice(1,n).split(";"),o=0;o<i.length;o++){var r=i[o],a=r.split("=");t.tags[a[0]]=r.substring(r.indexOf("=")+1)||!0}s=n+1}for(;32===e.charCodeAt(s);)s++;if(58===e.charCodeAt(s)){if(-1===(n=e.indexOf(" ",s)))return null;for(t.prefix=e.slice(s+1,n),s=n+1;32===e.charCodeAt(s);)s++}if(-1===(n=e.indexOf(" ",s)))return e.length>s?(t.command=e.slice(s),t):null;for(t.command=e.slice(s,n),s=n+1;32===e.charCodeAt(s);)s++;for(;s<e.length;){if(n=e.indexOf(" ",s),58===e.charCodeAt(s)){t.params.push(e.slice(s+1));break}if(-1===n){if(-1===n){t.params.push(e.slice(s));break}}else for(t.params.push(e.slice(s,n)),s=n+1;32===e.charCodeAt(s);)s++}return t}}},776:(e,t)=>{function s(e){this.queue=[],this.index=0,this.defaultDelay=e||3e3}s.prototype.add=function(e,t){this.queue.push({fn:e,delay:t})},s.prototype.run=function(e){(e||0===e)&&(this.index=e),this.next()},s.prototype.next=function(){var e=this.index++,t=this.queue[e],s=this.queue[this.index];t&&(t.fn(),s&&setTimeout((()=>{this.next()}),s.delay||this.defaultDelay))},s.prototype.reset=function(){this.index=0},s.prototype.clear=function(){this.index=0,this.queue=[]},t.queue=s},49:e=>{var t=/^\u0001ACTION ([^\u0001]+)\u0001$/,s=/^(justinfan)(\d+$)/,n=/\\([sn:r\\])/g,i={s:" ",n:"",":":";",r:""},o=e.exports={get:(e,t)=>void 0===e?t:e,isBoolean:e=>"boolean"==typeof e,isFinite:e=>isFinite(e)&&!isNaN(parseFloat(e)),isInteger:e=>!isNaN(o.toNumber(e,0)),isJustinfan:e=>s.test(e),isNull:e=>null===e,isRegex:e=>/[\|\\\^\$\*\+\?\:\#]/.test(e),isString:e=>"string"==typeof e,isURL:e=>RegExp("^(?:(?:https?|ftp)://)(?:\\S+(?::\\S*)?@)?(?:(?!(?:10|127)(?:\\.\\d{1,3}){3})(?!(?:169\\.254|192\\.168)(?:\\.\\d{1,3}){2})(?!172\\.(?:1[6-9]|2\\d|3[0-1])(?:\\.\\d{1,3}){2})(?:[1-9]\\d?|1\\d\\d|2[01]\\d|22[0-3])(?:\\.(?:1?\\d{1,2}|2[0-4]\\d|25[0-5])){2}(?:\\.(?:[1-9]\\d?|1\\d\\d|2[0-4]\\d|25[0-4]))|(?:(?:[a-z\\u00a1-\\uffff0-9]-*)*[a-z\\u00a1-\\uffff0-9]+)(?:\\.(?:[a-z\\u00a1-\\uffff0-9]-*)*[a-z\\u00a1-\\uffff0-9]+)*(?:\\.(?:[a-z\\u00a1-\\uffff]{2,}))\\.?)(?::\\d{2,5})?(?:[/?#]\\S*)?$","i").test(e),justinfan:()=>`justinfan${Math.floor(8e4*Math.random()+1e3)}`,password:e=>["SCHMOOPIIE","",null].includes(e)?"SCHMOOPIIE":`oauth:${e.toLowerCase().replace("oauth:","")}`,promiseDelay:e=>new Promise((function(t){setTimeout(t,e)})),replaceAll:(e,t)=>{if(null==e)return null;for(var s in t)e=e.replace(new RegExp(s,"g"),t[s]);return e},unescapeHtml:e=>e.replace(/\\&amp\\;/g,"&").replace(/\\&lt\\;/g,"<").replace(/\\&gt\\;/g,">").replace(/\\&quot\\;/g,'"').replace(/\\&#039\\;/g,"'"),unescapeIRC:e=>e&&e.includes("\\")?e.replace(n,((e,t)=>t in i?i[t]:t)):e,actionMessage:e=>e.match(t),addWord:(e,t)=>e.length?e+" "+t:e+t,channel:e=>{var t=(e||"").toLowerCase();return"#"===t[0]?t:"#"+t},extractNumber:e=>{for(var t=e.split(" "),s=0;s<t.length;s++)if(o.isInteger(t[s]))return~~t[s];return 0},formatDate:e=>{var t=e.getHours(),s=e.getMinutes();return`${t=(t<10?"0":"")+t}:${s=(s<10?"0":"")+s}`},inherits:(e,t)=>{e.super_=t;var s=function(){};s.prototype=t.prototype,e.prototype=new s,e.prototype.constructor=e},isNode:()=>{try{return"object"==typeof process&&"[object process]"===Object.prototype.toString.call(process)}catch(e){}return!1},isExtension:()=>{try{return window.chrome&&chrome.runtime&&chrome.runtime.id}catch(e){}return!1},isReactNative:()=>{try{return navigator&&"ReactNative"==navigator.product}catch(e){}return!1},merge:Object.assign,splitLine:(e,t)=>{var s=e.substring(0,t).lastIndexOf(" ");return-1===s&&(s=t-1),[e.substring(0,s),e.substring(s+1)]},toNumber:(e,t)=>{if(null===e)return 0;var s=Math.pow(10,o.isFinite(t)?t:0);return Math.round(e*s)/s},union:(e,t)=>{for(var s={},n=[],i=0;i<e.length;i++)s[o=e[i]]||(s[o]=!0,n.push(o));for(i=0;i<t.length;i++){var o;s[o=t[i]]||(s[o]=!0,n.push(o))}return n},username:e=>{var t=(e||"").toLowerCase();return"#"===t[0]?t.slice(1):t}}},607:(e,t,s)=>{"use strict";var n,i,o;s(153),s(626),s(478),s(816);var r=s(824),a=s(320),c=s(651),l=s(18),h=s(877),u=s(842),m=new URLSearchParams(window.location.search),p=null!==(n=m.get("channel"))&&void 0!==n?n:"",d=parseInt(null!==(i=m.get("timeout"))&&void 0!==i?i:"10"),f=parseInt(null!==(o=m.get("requiredPings"))&&void 0!==o?o:"5"),g=new r.Job(d,f),_=new a.TwitchChat(p),v="pie"==(m.has("type")?m.get("type"):null)?new l.Pie({elementId:"bar",background:"none",x:-1,y:-1,radiusFactor:2}):new h.Bar({elementId:"bar",background:"none",barMarginHeight:0,barMarginWidth:0,strokeMarginHeight:0,strokeMarginWidth:0}),y=new c.ReactionStorage(_,g),b=new u.CanvasAnimation("bar");b.on("fadeEnd",(function(e,t,s){console.log("fadeEnd:",e,t,s),s==u.FadeDirection.OUT&&v.clear()})),y.on("update",(function(e,t,s){console.log("on: update =",t,s,g.isActive(),s==c.UpdateMode.INCREMENT),s==c.UpdateMode.INCREMENT&&g.isActive()})),g.on("start",(function(){console.log("Job started!"),y.drawChart(v),b.fade(500,25,u.FadeDirection.IN)})),g.on("cancel",(function(){console.log("Job canceled!"),y.resetStorage(),b.fade(500,25,u.FadeDirection.OUT)}))},842:function(e,t,s){"use strict";var n,i=this&&this.__extends||(n=function(e,t){return(n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var s in t)Object.prototype.hasOwnProperty.call(t,s)&&(e[s]=t[s])})(e,t)},function(e,t){function s(){this.constructor=e}n(e,t),e.prototype=null===t?Object.create(t):(s.prototype=t.prototype,new s)});Object.defineProperty(t,"__esModule",{value:!0}),t.CanvasAnimation=t.FadeDirection=t.Animation=void 0;var o,r=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return i(t,e),t}(s(187).EventEmitter);t.Animation=r,function(e){e[e.IN=0]="IN",e[e.OUT=1]="OUT"}(o=t.FadeDirection||(t.FadeDirection={}));var a=function(e){function t(t){var s=e.call(this)||this;s.elementId=t;var n=document.getElementById(s.elementId);if(!(n instanceof HTMLCanvasElement))throw new Error("Canvas not found.");return s.canvas=n,s}return i(t,e),t.prototype.cancelInterval=function(){null!=this.intervalTimer&&(window.clearInterval(this.intervalTimer),this.intervalTimer=null,this.emit("cancelInterval"))},t.prototype.cancelTimer=function(){null!=this.timeoutTimer&&(window.clearTimeout(this.timeoutTimer),this.timeoutTimer=null,this.emit("cancelInterval"))},t.prototype.cancelAnimations=function(){this.cancelInterval(),this.cancelTimer()},t.prototype.fade=function(e,t,s){var n=this;this.cancelInterval();var i=0;this.intervalTimer=window.setInterval((function(){var r=(i+=t)/e;if(s==o.OUT&&(r=1-r),n.canvas.style.opacity=""+r,console.log("-> "+i+": "+r+"%"),i>=e)return n.cancelInterval(),void n.emit("fadeEnd",e,t,s)}),t)},t.prototype.fadeIn=function(e,t){this.fade(e,t,o.IN)},t.prototype.fadeOut=function(e,t){this.fade(e,t,o.OUT)},t}(r);t.CanvasAnimation=a},877:function(e,t,s){"use strict";var n,i=this&&this.__extends||(n=function(e,t){return(n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var s in t)Object.prototype.hasOwnProperty.call(t,s)&&(e[s]=t[s])})(e,t)},function(e,t){function s(){this.constructor=e}n(e,t),e.prototype=null===t?Object.create(t):(s.prototype=t.prototype,new s)}),o=this&&this.__assign||function(){return(o=Object.assign||function(e){for(var t,s=1,n=arguments.length;s<n;s++)for(var i in t=arguments[s])Object.prototype.hasOwnProperty.call(t,i)&&(e[i]=t[i]);return e}).apply(this,arguments)};Object.defineProperty(t,"__esModule",{value:!0}),t.Bar=t.FONT_DYNAMIC=void 0;var r=s(256),a=s(613);t.FONT_DYNAMIC=-1;var c={elementId:"",barMarginHeight:10,barMarginWidth:10,strokeMarginHeight:5,strokeMarginWidth:5,valueColors:r.colors,strokeColor:"#34495e",strokeIterations:1,fontSize:-1,fontFamily:"courier",fontSizeFactor:1.8,fontColorFactor:.65,textRound:!0},l=function(e){function t(t){var s=e.call(this,t)||this;return s.properties=t,s.properties=o(o({},c),s.properties),console.log(s.properties),s}return i(t,e),t.prototype.init=function(){},t.prototype.draw=function(e,t,s){void 0===t&&(t=!0),void 0===s&&(s=!0),s&&this.clear();var n=this.properties,i=this.width-2*n.barMarginWidth,o=this.height-2*n.barMarginHeight,a=n.fontSize;-1===a&&(a=o*(2/3));var c=a/n.fontSizeFactor;this.ctx.font=Math.round(a)+"px "+n.fontFamily,this.ctx.strokeStyle=n.strokeColor;for(var l=0;l<n.strokeIterations;l++)this.ctx.beginPath(),this.ctx.rect(this.x+n.barMarginWidth-n.strokeMarginWidth-l,this.y+n.barMarginHeight-n.strokeMarginHeight-l,i+2*n.strokeMarginWidth+l,o+2*n.strokeMarginHeight+l),this.ctx.stroke(),this.ctx.closePath();for(var h=e.reduce((function(e,t){return e+t})),u=n.barMarginWidth,m=0;m<e.length;m++){var p=e[m]/h;if(0!=p){var d=i*p;if(this.ctx.fillStyle=n.valueColors[m%n.valueColors.length],this.ctx.beginPath(),this.ctx.rect(this.x+u,this.y+n.barMarginHeight,d,o),this.ctx.fill(),this.ctx.closePath(),t){var f;f=n.textRound?Math.round(100*p)+"%":100*p+"%",this.ctx.beginPath(),this.ctx.fillStyle=r.darkenHexColor(this.ctx.fillStyle,n.fontColorFactor),this.ctx.fillText(f,this.x+u+d/2-c*f.length/2,this.y+n.barMarginHeight+o/2+c/2),this.ctx.closePath()}u+=d}}},t.prototype.clear=function(){this.ctx.clearRect(this.x,this.y,this.width,this.height)},t}(a.Chart);t.Bar=l},613:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.Chart=void 0;t.Chart=function(e){var t,s,n,i,o,r;this.canvasElementId=e.elementId,this.x=null!==(t=e.x)&&void 0!==t?t:0,this.y=null!==(s=e.y)&&void 0!==s?s:0,this.width=null!==(n=e.width)&&void 0!==n?n:-1,this.height=null!==(i=e.height)&&void 0!==i?i:-1,-1===this.width?this.width=document.defaultView.innerWidth:-2===this.x&&(this.x=document.defaultView.innerWidth/2-this.width/2),-1==this.height?this.height=document.defaultView.innerHeight:-2===this.x&&(this.y=document.defaultView.innerHeight/2-this.height/2);var a=document.getElementById(this.canvasElementId);if(null!=a){this.canvas=a;var c=this.canvas.getContext("2d");null!=c?(this.ctx=c,this.canvas.height=this.height,this.canvas.width=this.width,"none"!=(null!==(o=e.background)&&void 0!==o?o:"#2c3e50")&&(this.canvas.style.background=null!==(r=e.background)&&void 0!==r?r:"#2c3e50"),this.error||this.init()):this.error="Context not found."}else this.error="Canvas not found."}},18:function(e,t,s){"use strict";var n,i=this&&this.__extends||(n=function(e,t){return(n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var s in t)Object.prototype.hasOwnProperty.call(t,s)&&(e[s]=t[s])})(e,t)},function(e,t){function s(){this.constructor=e}n(e,t),e.prototype=null===t?Object.create(t):(s.prototype=t.prototype,new s)}),o=this&&this.__assign||function(){return(o=Object.assign||function(e){for(var t,s=1,n=arguments.length;s<n;s++)for(var i in t=arguments[s])Object.prototype.hasOwnProperty.call(t,i)&&(e[i]=t[i]);return e}).apply(this,arguments)};Object.defineProperty(t,"__esModule",{value:!0}),t.Pie=t.LOCATION_CENTER=void 0;var r=s(613),a=s(256);t.LOCATION_CENTER=-1;var c={elementId:"",fontSize:25,round:!0,radiusFactor:4.5,fontFamily:"courier",fontColorFactor:.65},l=function(e){function t(t){var s=e.call(this,t)||this;return s.properties=t,s.properties=o(o({},c),s.properties),-1===s.x&&(s.x=s.width/2),-1===s.y&&(s.y=s.height/2),s.r=Math.min(s.height,s.width)/s.properties.radiusFactor,s}return i(t,e),t.prototype.init=function(){},t.prototype.draw=function(e,t,s){void 0===t&&(t=!0),void 0===s&&(s=!0),s&&this.clear();var n=this.properties,i=e.reduce((function(e,t){return e+t}));this.endAngle=0;for(var o=0;o<e.length;o++){var r=e[o]/i*100;if(0!=r){var c=a.colors[o%a.colors.length],l=Math.PI/50*r;this.ctx.beginPath(),this.ctx.moveTo(this.x,this.y),this.ctx.arc(this.x,this.y,this.r,this.endAngle-.5*Math.PI,this.endAngle+l-.5*Math.PI),this.ctx.fillStyle=c,this.ctx.fill(),this.ctx.closePath();var h=this.endAngle+l/2;if(t){this.ctx.fillStyle=a.darkenHexColor(this.ctx.fillStyle,n.fontColorFactor),this.ctx.font=n.fontSize+"px "+n.fontFamily;var u,m=15*(u=n.round?Math.round(r)+"%":r+"$").length,p=this.r-50,d=this.x+(Math.sin(h)*p+m/2*(Math.sin(h)-1)),f=this.y-(Math.cos(h)*p+7.5*(Math.cos(h)-1));this.ctx.fillText(u,d,f)}this.endAngle+=l}}},t.prototype.clear=function(){this.ctx.clearRect(0,0,this.width,this.height)},t}(r.Chart);t.Pie=l},131:function(e,t,s){"use strict";var n,i=this&&this.__extends||(n=function(e,t){return(n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var s in t)Object.prototype.hasOwnProperty.call(t,s)&&(e[s]=t[s])})(e,t)},function(e,t){function s(){this.constructor=e}n(e,t),e.prototype=null===t?Object.create(t):(s.prototype=t.prototype,new s)});Object.defineProperty(t,"__esModule",{value:!0}),t.Chat=void 0;var o=function(e){function t(t){var s=e.call(this)||this;return s.channel=t,s}return i(t,e),t.prototype.onMessage=function(e){this.on("message",e)},t.prototype.emitMessage=function(e,t){this.emit("message",e,t)},t}(s(187).EventEmitter);t.Chat=o},320:function(e,t,s){"use strict";var n,i=this&&this.__extends||(n=function(e,t){return(n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var s in t)Object.prototype.hasOwnProperty.call(t,s)&&(e[s]=t[s])})(e,t)},function(e,t){function s(){this.constructor=e}n(e,t),e.prototype=null===t?Object.create(t):(s.prototype=t.prototype,new s)});Object.defineProperty(t,"__esModule",{value:!0}),t.TwitchChat=void 0;var o=s(131),r=s(993),a=function(e){function t(t){var s=e.call(this,t)||this;return s.client=r.Client({connection:{secure:!0,reconnect:!0},channels:[s.channel]}),console.log("[Chat] Connecting to channel: "+t),s.client.connect(),console.log("[Chat] Connected!"),s.client.on("message",(function(e,t,n,i){s.emitMessage(t.username,n)})),s}return i(t,e),t}(o.Chat);t.TwitchChat=a},256:(e,t)=>{"use strict";function s(e,t,s,n){return void 0===n&&(n=!0),(n?"#":"")+(16777215&(e<<16|t<<8|s)).toString(16)}function n(e){e.startsWith("#")&&(e=e.substring(1));var t=parseInt(e,16);return[t>>16&255,t>>8&255,255&t]}function i(e,t,n,i){return s(e=Math.max(0,e*i),t=Math.max(0,t*i),n=Math.max(0,n*i))}Object.defineProperty(t,"__esModule",{value:!0}),t.darkenHexColor=t.darkenRGBColor=t.Hex2RGB=t.RGB2Hex=t.colors=void 0,t.colors=["#3498db","#f1c40f","#e74c3c","#3498db","#2ecc71","#1abc9c","#9b59b6","#f1c40f","#e67e22","#e74c3c","#ecf0f1"],t.RGB2Hex=s,t.Hex2RGB=n,t.darkenRGBColor=i,t.darkenHexColor=function(e,t){var s=n(e);return i(s[0],s[1],s[2],t)}},824:function(e,t,s){"use strict";var n,i=this&&this.__extends||(n=function(e,t){return(n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var s in t)Object.prototype.hasOwnProperty.call(t,s)&&(e[s]=t[s])})(e,t)},function(e,t){function s(){this.constructor=e}n(e,t),e.prototype=null===t?Object.create(t):(s.prototype=t.prototype,new s)});Object.defineProperty(t,"__esModule",{value:!0}),t.Job=void 0;var o=function(e){function t(t,s){void 0===t&&(t=10),void 0===s&&(s=1);var n=e.call(this)||this;return n.timeout=t,n.requiredPings=s,n.current=0,n.currentPing=0,n}return i(t,e),t.prototype.onTime=function(){this.current++,this.current>=this.timeout&&(this.stopTimer(),this.emit("cancel"))},t.prototype.ping=function(){var e=this;this.currentPing++,this.currentPing<this.requiredPings||(this.current=0,this.currentPing=0,null==this.timer&&(this.timer=window.setInterval((function(){return e.onTime()}),1e3),this.emit("start")))},t.prototype.stopTimer=function(){this.isActive()&&(window.clearInterval(this.timer),this.timer=null),this.current=0,this.currentPing=0},t.prototype.isActive=function(){return null!=this.timer},t}(s(187).EventEmitter);t.Job=o},834:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.reactions=t.getReactionByKeyword=void 0;var s=[{sorting:0,display:"+1",keywords:["+1","1","yes","ye","ja"]},{sorting:2,display:"~",keywords:["2","wtf"]},{sorting:3,display:"-1",keywords:["-1","0","no","nein"]}];t.reactions=s,t.getReactionByKeyword=function(e){e=e.toLowerCase();for(var t=0;t<s.length;t++)for(var n=s[t],i=0;i<n.keywords.length;i++)if(n.keywords[i]==e)return n;return null}},651:function(e,t,s){"use strict";var n,i=this&&this.__extends||(n=function(e,t){return(n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var s in t)Object.prototype.hasOwnProperty.call(t,s)&&(e[s]=t[s])})(e,t)},function(e,t){function s(){this.constructor=e}n(e,t),e.prototype=null===t?Object.create(t):(s.prototype=t.prototype,new s)});Object.defineProperty(t,"__esModule",{value:!0}),t.ReactionStorage=t.UpdateMode=void 0;var o,r=s(187),a=s(834);!function(e){e[e.INCREMENT=1]="INCREMENT",e[e.DECREMENT=-1]="DECREMENT"}(o=t.UpdateMode||(t.UpdateMode={}));var c=function(e){function t(t,s,n){void 0===n&&(n=!0);var i=e.call(this)||this;return i.chat=t,i.job=s,i.duplicationChecking=n,i.users=new Map,i.reactions=new Map,i.chat.onMessage((function(e,t){i.onMessage(e,t)})),i}return i(t,e),t.prototype.onMessage=function(e,t){if(null!=e&&null!=t){var s=a.getReactionByKeyword(t);null!=s&&(this.job.ping(),this.react(e,s))}else console.log("[Storage]","Null:",e,"or",t)},t.prototype.getReaction=function(e){var t;return null!==(t=this.reactions.get(e))&&void 0!==t?t:0},t.prototype.updateReaction=function(e,t){var s=this.getReaction(e);switch(t){case o.INCREMENT:s++;break;case o.DECREMENT:s--}return this.reactions.set(e,s),this.emit("update",e,s,t),s},t.prototype.react=function(e,t){if(1==this.duplicationChecking){if(this.users.has(e)){var s=this.users.get(e);if(s==t)return;this.updateReaction(s,o.DECREMENT)}this.users.set(e,t)}this.updateReaction(t,o.INCREMENT),this.emit("reaction",e,t)},t.prototype.resetStorage=function(){this.users.clear(),this.reactions.clear(),console.log("[Storage]","Reset users and reactions!")},t.prototype.getValues=function(){var e=this,t=[],s=new Map;a.reactions.forEach((function(n){s.set(n.sorting,e.getReaction(n)),t.push(n.sorting)}));for(var n=0;n<t.length;n++)for(var i=0;i<t.length;i++)if(n!=i){var o=t[n],r=t[i];o<r&&(t[n]=r,t[i]=o)}var c=[];for(n=0;n<t.length;n++)c.push(s.get(t[n]));return c},t.prototype.drawChart=function(e){var t=this.getValues();e.draw(t,!0,!0)},t}(r.EventEmitter);t.ReactionStorage=c},887:()=>{},418:()=>{}},t={};function s(n){if(t[n])return t[n].exports;var i=t[n]={id:n,exports:{}};return e[n].call(i.exports,i,i.exports,s),i.exports}s.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return s.d(t,{a:t}),t},s.d=(e,t)=>{for(var n in t)s.o(t,n)&&!s.o(e,n)&&Object.defineProperty(e,n,{enumerable:!0,get:t[n]})},s.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),s.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),s.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},s(607)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly90d2l0Y2gtcG9sbC1vdmVybGF5Ly4vc3JjL2Fzc2V0cy9zdHlsZXMvbWFpbi5zY3NzIiwid2VicGFjazovL3R3aXRjaC1wb2xsLW92ZXJsYXkvLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvYXBpLmpzIiwid2VicGFjazovL3R3aXRjaC1wb2xsLW92ZXJsYXkvLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvY3NzV2l0aE1hcHBpbmdUb1N0cmluZy5qcyIsIndlYnBhY2s6Ly90d2l0Y2gtcG9sbC1vdmVybGF5Ly4vbm9kZV9tb2R1bGVzL2V2ZW50cy9ldmVudHMuanMiLCJ3ZWJwYWNrOi8vdHdpdGNoLXBvbGwtb3ZlcmxheS8uL3NyYy9hc3NldHMvaW1nL2ltZ19iYXIucG5nIiwid2VicGFjazovL3R3aXRjaC1wb2xsLW92ZXJsYXkvLi9zcmMvYXNzZXRzL2ltZy9pbWdfcGllLnBuZyIsIndlYnBhY2s6Ly90d2l0Y2gtcG9sbC1vdmVybGF5Ly4vc3JjL2J1aWxkZXIuaHRtbCIsIndlYnBhY2s6Ly90d2l0Y2gtcG9sbC1vdmVybGF5Ly4vbm9kZV9tb2R1bGVzL2h0bWwtbG9hZGVyL2Rpc3QvcnVudGltZS9nZXRVcmwuanMiLCJ3ZWJwYWNrOi8vdHdpdGNoLXBvbGwtb3ZlcmxheS8uL3NyYy9hc3NldHMvc3R5bGVzL21haW4uc2Nzcz9kOGFjIiwid2VicGFjazovL3R3aXRjaC1wb2xsLW92ZXJsYXkvLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbmplY3RTdHlsZXNJbnRvU3R5bGVUYWcuanMiLCJ3ZWJwYWNrOi8vdHdpdGNoLXBvbGwtb3ZlcmxheS8uL25vZGVfbW9kdWxlcy90bWkuanMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vdHdpdGNoLXBvbGwtb3ZlcmxheS8uL25vZGVfbW9kdWxlcy90bWkuanMvbGliL2FwaS5qcyIsIndlYnBhY2s6Ly90d2l0Y2gtcG9sbC1vdmVybGF5Ly4vbm9kZV9tb2R1bGVzL3RtaS5qcy9saWIvY2xpZW50LmpzIiwid2VicGFjazovL3R3aXRjaC1wb2xsLW92ZXJsYXkvLi9ub2RlX21vZHVsZXMvdG1pLmpzL2xpYi9jb21tYW5kcy5qcyIsIndlYnBhY2s6Ly90d2l0Y2gtcG9sbC1vdmVybGF5Ly4vbm9kZV9tb2R1bGVzL3RtaS5qcy9saWIvZXZlbnRzLmpzIiwid2VicGFjazovL3R3aXRjaC1wb2xsLW92ZXJsYXkvLi9ub2RlX21vZHVsZXMvdG1pLmpzL2xpYi9sb2dnZXIuanMiLCJ3ZWJwYWNrOi8vdHdpdGNoLXBvbGwtb3ZlcmxheS8uL25vZGVfbW9kdWxlcy90bWkuanMvbGliL3BhcnNlci5qcyIsIndlYnBhY2s6Ly90d2l0Y2gtcG9sbC1vdmVybGF5Ly4vbm9kZV9tb2R1bGVzL3RtaS5qcy9saWIvdGltZXIuanMiLCJ3ZWJwYWNrOi8vdHdpdGNoLXBvbGwtb3ZlcmxheS8uL25vZGVfbW9kdWxlcy90bWkuanMvbGliL3V0aWxzLmpzIiwid2VicGFjazovL3R3aXRjaC1wb2xsLW92ZXJsYXkvLi9zcmMvaW5kZXgudHMiLCJ3ZWJwYWNrOi8vdHdpdGNoLXBvbGwtb3ZlcmxheS8uL3NyYy90cy9hbmltYXRpb24udHMiLCJ3ZWJwYWNrOi8vdHdpdGNoLXBvbGwtb3ZlcmxheS8uL3NyYy90cy9jaGFydHMvYmFyLnRzIiwid2VicGFjazovL3R3aXRjaC1wb2xsLW92ZXJsYXkvLi9zcmMvdHMvY2hhcnRzL2NoYXJ0LnRzIiwid2VicGFjazovL3R3aXRjaC1wb2xsLW92ZXJsYXkvLi9zcmMvdHMvY2hhcnRzL3BpZS50cyIsIndlYnBhY2s6Ly90d2l0Y2gtcG9sbC1vdmVybGF5Ly4vc3JjL3RzL2NoYXRzL2NoYXQudHMiLCJ3ZWJwYWNrOi8vdHdpdGNoLXBvbGwtb3ZlcmxheS8uL3NyYy90cy9jaGF0cy90d2l0Y2guY2hhdC50cyIsIndlYnBhY2s6Ly90d2l0Y2gtcG9sbC1vdmVybGF5Ly4vc3JjL3RzL2NvbG9yLnRzIiwid2VicGFjazovL3R3aXRjaC1wb2xsLW92ZXJsYXkvLi9zcmMvdHMvam9iLnRzIiwid2VicGFjazovL3R3aXRjaC1wb2xsLW92ZXJsYXkvLi9zcmMvdHMva2V5d29yZHMudHMiLCJ3ZWJwYWNrOi8vdHdpdGNoLXBvbGwtb3ZlcmxheS8uL3NyYy90cy9yZWFjdGlvbnN0b3JhZ2UudHMiLCJ3ZWJwYWNrOi8vdHdpdGNoLXBvbGwtb3ZlcmxheS93ZWJwYWNrL2Jvb3RzdHJhcCIsIndlYnBhY2s6Ly90d2l0Y2gtcG9sbC1vdmVybGF5L3dlYnBhY2svcnVudGltZS9jb21wYXQgZ2V0IGRlZmF1bHQgZXhwb3J0Iiwid2VicGFjazovL3R3aXRjaC1wb2xsLW92ZXJsYXkvd2VicGFjay9ydW50aW1lL2RlZmluZSBwcm9wZXJ0eSBnZXR0ZXJzIiwid2VicGFjazovL3R3aXRjaC1wb2xsLW92ZXJsYXkvd2VicGFjay9ydW50aW1lL2dsb2JhbCIsIndlYnBhY2s6Ly90d2l0Y2gtcG9sbC1vdmVybGF5L3dlYnBhY2svcnVudGltZS9oYXNPd25Qcm9wZXJ0eSBzaG9ydGhhbmQiLCJ3ZWJwYWNrOi8vdHdpdGNoLXBvbGwtb3ZlcmxheS93ZWJwYWNrL3J1bnRpbWUvbWFrZSBuYW1lc3BhY2Ugb2JqZWN0Iiwid2VicGFjazovL3R3aXRjaC1wb2xsLW92ZXJsYXkvd2VicGFjay9zdGFydHVwIl0sIm5hbWVzIjpbIl9fX0NTU19MT0FERVJfRVhQT1JUX19fIiwicHVzaCIsIm1vZHVsZSIsImlkIiwiZXhwb3J0cyIsImNzc1dpdGhNYXBwaW5nVG9TdHJpbmciLCJsaXN0IiwidG9TdHJpbmciLCJ0aGlzIiwibWFwIiwiaXRlbSIsImNvbnRlbnQiLCJjb25jYXQiLCJqb2luIiwiaSIsIm1vZHVsZXMiLCJtZWRpYVF1ZXJ5IiwiZGVkdXBlIiwiYWxyZWFkeUltcG9ydGVkTW9kdWxlcyIsImxlbmd0aCIsIl9pIiwiX2FycmF5TGlrZVRvQXJyYXkiLCJhcnIiLCJsZW4iLCJhcnIyIiwiQXJyYXkiLCJfaXRlbSIsImlzQXJyYXkiLCJfYXJyYXlXaXRoSG9sZXMiLCJTeW1ib2wiLCJpdGVyYXRvciIsIk9iamVjdCIsIl9hcnIiLCJfbiIsIl9kIiwiX2UiLCJ1bmRlZmluZWQiLCJfcyIsIm5leHQiLCJkb25lIiwidmFsdWUiLCJlcnIiLCJfaXRlcmFibGVUb0FycmF5TGltaXQiLCJvIiwibWluTGVuIiwibiIsInByb3RvdHlwZSIsImNhbGwiLCJzbGljZSIsImNvbnN0cnVjdG9yIiwibmFtZSIsImZyb20iLCJ0ZXN0IiwiX3Vuc3VwcG9ydGVkSXRlcmFibGVUb0FycmF5IiwiVHlwZUVycm9yIiwiX25vbkl0ZXJhYmxlUmVzdCIsImNzc01hcHBpbmciLCJidG9hIiwiYmFzZTY0IiwidW5lc2NhcGUiLCJlbmNvZGVVUklDb21wb25lbnQiLCJKU09OIiwic3RyaW5naWZ5IiwiZGF0YSIsInNvdXJjZU1hcHBpbmciLCJzb3VyY2VVUkxzIiwic291cmNlcyIsInNvdXJjZSIsInNvdXJjZVJvb3QiLCJSZWZsZWN0T3duS2V5cyIsIlIiLCJSZWZsZWN0IiwiUmVmbGVjdEFwcGx5IiwiYXBwbHkiLCJ0YXJnZXQiLCJyZWNlaXZlciIsImFyZ3MiLCJGdW5jdGlvbiIsIm93bktleXMiLCJnZXRPd25Qcm9wZXJ0eVN5bWJvbHMiLCJnZXRPd25Qcm9wZXJ0eU5hbWVzIiwiTnVtYmVySXNOYU4iLCJOdW1iZXIiLCJpc05hTiIsIkV2ZW50RW1pdHRlciIsImluaXQiLCJvbmNlIiwiZW1pdHRlciIsIlByb21pc2UiLCJyZXNvbHZlIiwicmVqZWN0IiwiZXZlbnRMaXN0ZW5lciIsImVycm9yTGlzdGVuZXIiLCJyZW1vdmVMaXN0ZW5lciIsImFyZ3VtZW50cyIsIl9ldmVudHMiLCJfZXZlbnRzQ291bnQiLCJfbWF4TGlzdGVuZXJzIiwiZGVmYXVsdE1heExpc3RlbmVycyIsImNoZWNrTGlzdGVuZXIiLCJsaXN0ZW5lciIsIl9nZXRNYXhMaXN0ZW5lcnMiLCJ0aGF0IiwiX2FkZExpc3RlbmVyIiwidHlwZSIsInByZXBlbmQiLCJtIiwiZXZlbnRzIiwiZXhpc3RpbmciLCJ3YXJuaW5nIiwiY3JlYXRlIiwibmV3TGlzdGVuZXIiLCJlbWl0IiwidW5zaGlmdCIsIndhcm5lZCIsInciLCJFcnJvciIsIlN0cmluZyIsImNvdW50IiwiY29uc29sZSIsIndhcm4iLCJvbmNlV3JhcHBlciIsImZpcmVkIiwid3JhcEZuIiwiX29uY2VXcmFwIiwic3RhdGUiLCJ3cmFwcGVkIiwiYmluZCIsIl9saXN0ZW5lcnMiLCJ1bndyYXAiLCJldmxpc3RlbmVyIiwicmV0IiwidW53cmFwTGlzdGVuZXJzIiwiYXJyYXlDbG9uZSIsImxpc3RlbmVyQ291bnQiLCJjb3B5IiwiZGVmaW5lUHJvcGVydHkiLCJlbnVtZXJhYmxlIiwiZ2V0Iiwic2V0IiwiYXJnIiwiUmFuZ2VFcnJvciIsImdldFByb3RvdHlwZU9mIiwic2V0TWF4TGlzdGVuZXJzIiwiZ2V0TWF4TGlzdGVuZXJzIiwiZG9FcnJvciIsImVycm9yIiwiZXIiLCJtZXNzYWdlIiwiY29udGV4dCIsImhhbmRsZXIiLCJsaXN0ZW5lcnMiLCJhZGRMaXN0ZW5lciIsIm9uIiwicHJlcGVuZExpc3RlbmVyIiwicHJlcGVuZE9uY2VMaXN0ZW5lciIsInBvc2l0aW9uIiwib3JpZ2luYWxMaXN0ZW5lciIsInNoaWZ0IiwiaW5kZXgiLCJwb3AiLCJzcGxpY2VPbmUiLCJvZmYiLCJyZW1vdmVBbGxMaXN0ZW5lcnMiLCJrZXkiLCJrZXlzIiwicmF3TGlzdGVuZXJzIiwiZXZlbnROYW1lcyIsIl9fX0hUTUxfTE9BREVSX0dFVF9TT1VSQ0VfRlJPTV9JTVBPUlRfX18iLCJfX19IVE1MX0xPQURFUl9JTVBPUlRfMF9fXyIsIl9fX0hUTUxfTE9BREVSX0lNUE9SVF8xX19fIiwiY29kZSIsInVybCIsIm9wdGlvbnMiLCJfX2VzTW9kdWxlIiwiZGVmYXVsdCIsImhhc2giLCJtYXliZU5lZWRRdW90ZXMiLCJtZW1vIiwiZ2V0VGFyZ2V0Iiwic3R5bGVUYXJnZXQiLCJkb2N1bWVudCIsInF1ZXJ5U2VsZWN0b3IiLCJ3aW5kb3ciLCJIVE1MSUZyYW1lRWxlbWVudCIsImNvbnRlbnREb2N1bWVudCIsImhlYWQiLCJlIiwic3R5bGVzSW5Eb20iLCJnZXRJbmRleEJ5SWRlbnRpZmllciIsImlkZW50aWZpZXIiLCJyZXN1bHQiLCJtb2R1bGVzVG9Eb20iLCJpZENvdW50TWFwIiwiaWRlbnRpZmllcnMiLCJiYXNlIiwib2JqIiwiY3NzIiwibWVkaWEiLCJzb3VyY2VNYXAiLCJyZWZlcmVuY2VzIiwidXBkYXRlciIsImFkZFN0eWxlIiwiaW5zZXJ0U3R5bGVFbGVtZW50Iiwic3R5bGUiLCJjcmVhdGVFbGVtZW50IiwiYXR0cmlidXRlcyIsIm5vbmNlIiwiZm9yRWFjaCIsInNldEF0dHJpYnV0ZSIsImluc2VydCIsImFwcGVuZENoaWxkIiwidGV4dFN0b3JlIiwicmVwbGFjZVRleHQiLCJyZXBsYWNlbWVudCIsImZpbHRlciIsIkJvb2xlYW4iLCJhcHBseVRvU2luZ2xldG9uVGFnIiwicmVtb3ZlIiwic3R5bGVTaGVldCIsImNzc1RleHQiLCJjc3NOb2RlIiwiY3JlYXRlVGV4dE5vZGUiLCJjaGlsZE5vZGVzIiwicmVtb3ZlQ2hpbGQiLCJpbnNlcnRCZWZvcmUiLCJhcHBseVRvVGFnIiwicmVtb3ZlQXR0cmlidXRlIiwiZmlyc3RDaGlsZCIsInNpbmdsZXRvbiIsInNpbmdsZXRvbkNvdW50ZXIiLCJ1cGRhdGUiLCJzdHlsZUluZGV4IiwicGFyZW50Tm9kZSIsInJlbW92ZVN0eWxlRWxlbWVudCIsIm5ld09iaiIsImFsbCIsImF0b2IiLCJsYXN0SWRlbnRpZmllcnMiLCJuZXdMaXN0IiwibmV3TGFzdElkZW50aWZpZXJzIiwiX2luZGV4Iiwic3BsaWNlIiwiY2xpZW50IiwiQ2xpZW50IiwicmVxdWVzdCIsIl8iLCJjYWxsYmFjayIsInVyaSIsImlzVVJMIiwiaXNOb2RlIiwibWVyZ2UiLCJtZXRob2QiLCJqc29uIiwiaXNFeHRlbnNpb24iLCJpc1JlYWN0TmF0aXZlIiwiaGVhZGVycyIsInhociIsIlhNTEh0dHBSZXF1ZXN0Iiwib3BlbiIsInNldFJlcXVlc3RIZWFkZXIiLCJyZXNwb25zZVR5cGUiLCJhZGRFdmVudExpc3RlbmVyIiwiZXYiLCJyZWFkeVN0YXRlIiwic3RhdHVzIiwicmVzcG9uc2UiLCJzZW5kIiwiY2FsbGJhY2tOYW1lIiwiTWF0aCIsInJvdW5kIiwicmFuZG9tIiwiYm9keSIsInNjcmlwdCIsInNyYyIsImluY2x1ZGVzIiwiYXBpIiwiY29tbWFuZHMiLCJldmVudEVtaXR0ZXIiLCJsb2dnZXIiLCJwYXJzZSIsInRpbWVyIiwid3MiLCJnIiwiV2ViU29ja2V0IiwiTW96V2ViU29ja2V0Iiwib3B0cyIsImNoYW5uZWxzIiwiY29ubmVjdGlvbiIsImlkZW50aXR5IiwiY2xpZW50SWQiLCJtYXhSZWNvbm5lY3RBdHRlbXB0cyIsIkluZmluaXR5IiwibWF4UmVjb25uZWN0SW50ZXJ2YWwiLCJyZWNvbm5lY3QiLCJyZWNvbm5lY3REZWNheSIsInJlY29ubmVjdEludGVydmFsIiwicmVjb25uZWN0aW5nIiwicmVjb25uZWN0aW9ucyIsInJlY29ubmVjdFRpbWVyIiwic2VjdXJlIiwiZW1vdGVzIiwiZW1vdGVzZXRzIiwiY3VycmVudExhdGVuY3kiLCJnbG9iYWx1c2Vyc3RhdGUiLCJsYXN0Sm9pbmVkIiwibGF0ZW5jeSIsIkRhdGUiLCJtb2RlcmF0b3JzIiwicGluZ0xvb3AiLCJwaW5nVGltZW91dCIsInJlYXNvbiIsInVzZXJuYW1lIiwidXNlcnN0YXRlIiwid2FzQ2xvc2VDYWxsZWQiLCJsZXZlbCIsImRlYnVnIiwibG9nIiwic2V0TGV2ZWwiLCJwYXJ0IiwidGhlQXJyYXkiLCJjaGFubmVsIiwibWV0aG9kTmFtZSIsImluaGVyaXRzIiwiaGFuZGxlTWVzc2FnZSIsImlzTnVsbCIsInBhcmFtcyIsIm1zZyIsIm1zZ2lkIiwidGFncyIsImJhZGdlcyIsImJhZGdlSW5mbyIsImlzQm9vbGVhbiIsImlzU3RyaW5nIiwidW5lc2NhcGVJUkMiLCJwcmVmaXgiLCJjb21tYW5kIiwiY3VyckRhdGUiLCJnZXRUaW1lIiwiZW1pdHMiLCJjbGVhclRpbWVvdXQiLCJpbmZvIiwic2VydmVyIiwicG9ydCIsInNldEludGVydmFsIiwic2V0VGltZW91dCIsImNsb3NlIiwiY2xlYXJJbnRlcnZhbCIsInRpbWVvdXQiLCJqb2luUXVldWUiLCJxdWV1ZSIsImpvaW5DaGFubmVscyIsInVuaW9uIiwiYWRkIiwiY2F0Y2giLCJydW4iLCJudWxsQXJyIiwibm90aWNlQXJyIiwiY2hhbm5lbFRydWVBcnIiLCJjaGFubmVsRmFsc2VBcnIiLCJub3RpY2VBbmROdWxsIiwibm90aWNlQW5kTXNnaWQiLCJiYXNpY0xvZyIsIm1vZHMiLCJzcGxpdCIsInRvTG93ZXJDYXNlIiwiZW5kc1dpdGgiLCJ2aXBzIiwicmVtYWluaW5nSG9zdCIsInBhcnNlSW50IiwicGxhbiIsInBsYW5OYW1lIiwibWV0aG9kcyIsInByaW1lIiwic3RyZWFrTW9udGhzIiwicmVjaXBpZW50IiwiZ2lmdFN1YkNvdW50Iiwic2VuZGVyIiwidmlld2VycyIsIm1zZ1NwbGl0IiwiZHVyYXRpb24iLCJkZWxldGVkTWVzc2FnZSIsImRpc2Nvbm5lY3QiLCJjb25uZWN0IiwiaXNKdXN0aW5mYW4iLCJnZXRVc2VybmFtZSIsIl91cGRhdGVFbW90ZXNldCIsImhhc093blByb3BlcnR5Iiwic2xvdyIsImVuYWJsZWQiLCJkaXNhYmxlZCIsIm5pY2siLCJpc1NlbGYiLCJpbmRleE9mIiwiYXV0b2hvc3QiLCJleHRyYWN0TnVtYmVyIiwiYWN0aW9uTWVzc2FnZSIsIl9vcGVuQ29ubmVjdGlvbiIsIm9ubWVzc2FnZSIsIl9vbk1lc3NhZ2UiLCJvbmVycm9yIiwiX29uRXJyb3IiLCJvbmNsb3NlIiwiX29uQ2xvc2UiLCJvbm9wZW4iLCJfb25PcGVuIiwianVzdGluZmFuIiwicGFzc3dvcmQiLCJldmVudCIsInN0ciIsIl9nZXRQcm9taXNlRGVsYXkiLCJfc2VuZENvbW1hbmQiLCJkZWxheSIsImZuIiwicHJvbWlzZURlbGF5IiwidGhlbiIsImNoYW4iLCJfc2VuZE1lc3NhZ2UiLCJzcGxpdExpbmUiLCJlbW90ZSIsImlzUmVnZXgiLCJlbW90ZVJlZ2V4IiwiZW1vdGVTdHJpbmciLCJ0cmFuc2Zvcm1FbW90ZXMiLCJzZXRzIiwicmVwbGFjZSIsInJlcyIsImdldE9wdGlvbnMiLCJnZXRDaGFubmVscyIsImlzTW9kIiwidG1pIiwiZm9sbG93ZXJzb25seSIsIm1pbnV0ZXMiLCJmb2xsb3dlcnNvbmx5b2ZmIiwicjlrYmV0YSIsInI5a2JldGFvZmYiLCJzZWNvbmRzIiwic2xvd29mZiIsImFjdGlvbiIsImJhbiIsImNsZWFyIiwiY29sb3IiLCJuZXdDb2xvciIsImNvbW1lcmNpYWwiLCJkZWxldGVtZXNzYWdlIiwibWVzc2FnZVVVSUQiLCJlbW90ZW9ubHkiLCJlbW90ZW9ubHlvZmYiLCJmb2xsb3dlcnNtb2RlIiwiZm9sbG93ZXJzbW9kZW9mZiIsImhvc3QiLCJyZW1haW5pbmciLCJldmVudE5hbWUiLCJoYXNGdWxmaWxsZWQiLCJqb2luZWRDaGFubmVsIiwibW9kIiwibGVhdmUiLCJwaW5nIiwicGFyc2VGbG9hdCIsInI5a21vZGUiLCJyOWttb2Rlb2ZmIiwicmF3Iiwic2F5Iiwic3RhcnRzV2l0aCIsInN1YnN0ciIsInNsb3dtb2RlIiwic2xvd21vZGVvZmYiLCJzdWJzY3JpYmVycyIsInN1YnNjcmliZXJzb2ZmIiwiaXNJbnRlZ2VyIiwidW5iYW4iLCJ1bmhvc3QiLCJ1bm1vZCIsInVudmlwIiwidmlwIiwid2hpc3BlciIsImlzRnVuY3Rpb24iLCJpc09iamVjdCIsImlzVW5kZWZpbmVkIiwic2VhcmNoU3RyaW5nIiwidHlwZXMiLCJ2YWx1ZXMiLCJ2YWwiLCJ0cmFjZSIsImNoYXJBdCIsInNlYXJjaEZvciIsImsiLCJzdWJzdHJpbmciLCJjdXJyZW50TGV2ZWwiLCJsZXZlbHMiLCJmb3JtYXREYXRlIiwiZmF0YWwiLCJub25zcGFjZVJlZ2V4IiwicGFyc2VDb21wbGV4VGFnIiwidGFnS2V5Iiwic3BsQSIsInNwbEIiLCJzcGxDIiwidGFnSXNTdHJpbmciLCJzcGwiLCJwYXJ0cyIsImxhc3RJbmRleCIsIm1hdGNoIiwicmVnZXgiLCJSZWdFeHAiLCJ1bmVzY2FwZUh0bWwiLCJleGVjIiwidHJhbnNmb3JtZWQiLCJuZXh0c3BhY2UiLCJjaGFyQ29kZUF0IiwicmF3VGFncyIsInRhZyIsInBhaXIiLCJkZWZhdWx0RGVsYXkiLCJhdCIsInJlc2V0IiwiYWN0aW9uTWVzc2FnZVJlZ2V4IiwianVzdGluRmFuUmVnZXgiLCJ1bmVzY2FwZUlSQ1JlZ2V4IiwiaXJjRXNjYXBlZENoYXJzIiwicyIsInIiLCJzZWxmIiwib2JqMSIsIm9iajIiLCJpc0Zpbml0ZSIsImludCIsInRvTnVtYmVyIiwiZmxvb3IiLCJ0aW1lIiwicmVwbGFjZUFsbCIsIngiLCJzYWZlIiwicCIsImFkZFdvcmQiLCJsaW5lIiwid29yZCIsImRhdGUiLCJob3VycyIsImdldEhvdXJzIiwibWlucyIsImdldE1pbnV0ZXMiLCJjdG9yIiwic3VwZXJDdG9yIiwic3VwZXJfIiwiVGVtcEN0b3IiLCJwcm9jZXNzIiwiY2hyb21lIiwicnVudGltZSIsIm5hdmlnYXRvciIsInByb2R1Y3QiLCJhc3NpZ24iLCJpbnB1dCIsImxhc3RTcGFjZSIsImxhc3RJbmRleE9mIiwibnVtIiwicHJlY2lzaW9uIiwiZmFjdG9yIiwicG93IiwiYXJyMSIsIlVSTFNlYXJjaFBhcmFtcyIsImxvY2F0aW9uIiwic2VhcmNoIiwicmVxdWlyZWRQaW5ncyIsImpvYiIsIkpvYiIsImNoYXQiLCJUd2l0Y2hDaGF0IiwiY2hhcnQiLCJoYXMiLCJQaWUiLCJlbGVtZW50SWQiLCJiYWNrZ3JvdW5kIiwieSIsInJhZGl1c0ZhY3RvciIsIkJhciIsImJhck1hcmdpbkhlaWdodCIsImJhck1hcmdpbldpZHRoIiwic3Ryb2tlTWFyZ2luSGVpZ2h0Iiwic3Ryb2tlTWFyZ2luV2lkdGgiLCJzdG9yYWdlIiwiUmVhY3Rpb25TdG9yYWdlIiwiYW5pbWF0aW9uIiwiQ2FudmFzQW5pbWF0aW9uIiwiZHVyYXRpb25Jbk1zIiwic21vb3RobmVzcyIsImRpciIsIkZhZGVEaXJlY3Rpb24iLCJPVVQiLCJyZWFjdGlvbiIsIm1vZGUiLCJpc0FjdGl2ZSIsIlVwZGF0ZU1vZGUiLCJJTkNSRU1FTlQiLCJkcmF3Q2hhcnQiLCJmYWRlIiwiSU4iLCJyZXNldFN0b3JhZ2UiLCJBbmltYXRpb24iLCJlbGVtIiwiZ2V0RWxlbWVudEJ5SWQiLCJIVE1MQ2FudmFzRWxlbWVudCIsImNhbnZhcyIsImNhbmNlbEludGVydmFsIiwiaW50ZXJ2YWxUaW1lciIsImNhbmNlbFRpbWVyIiwidGltZW91dFRpbWVyIiwiY2FuY2VsQW5pbWF0aW9ucyIsImN1cnJlbnQiLCJvcGFjaXR5IiwiZmFkZUluIiwiZmFkZU91dCIsIkZPTlRfRFlOQU1JQyIsImRlZmF1bHRCYXJQcm9wZXJ0aWVzIiwidmFsdWVDb2xvcnMiLCJjb2xvcnMiLCJzdHJva2VDb2xvciIsInN0cm9rZUl0ZXJhdGlvbnMiLCJmb250U2l6ZSIsImZvbnRGYW1pbHkiLCJmb250U2l6ZUZhY3RvciIsImZvbnRDb2xvckZhY3RvciIsInRleHRSb3VuZCIsInByb3BlcnRpZXMiLCJkcmF3IiwiZHJhd1RleHQiLCJwcm9wIiwicmVjdFdpZHRoIiwid2lkdGgiLCJyZWN0SGVpZ2h0IiwiaGVpZ2h0IiwiZm9udE1wIiwiY3R4IiwiZm9udCIsInN0cm9rZVN0eWxlIiwiaiIsImJlZ2luUGF0aCIsInJlY3QiLCJzdHJva2UiLCJjbG9zZVBhdGgiLCJzdW0iLCJyZWR1Y2UiLCJhIiwiYyIsImxhc3RYIiwicGVyY2VudGFnZSIsInZhbHVlV2lkdGgiLCJmaWxsU3R5bGUiLCJmaWxsIiwidHh0IiwiZGFya2VuSGV4Q29sb3IiLCJmaWxsVGV4dCIsImNsZWFyUmVjdCIsIkNoYXJ0IiwiY2FudmFzRWxlbWVudElkIiwiZGVmYXVsdFZpZXciLCJpbm5lcldpZHRoIiwiaW5uZXJIZWlnaHQiLCJnZXRDb250ZXh0IiwiTE9DQVRJT05fQ0VOVEVSIiwiZGVmYXVsdFBpZVBhcmFtcyIsIm1pbiIsImVuZEFuZ2xlIiwiY3VycmVudEFuZ2xlIiwiUEkiLCJtb3ZlVG8iLCJhcmMiLCJiZXRhIiwidCIsIkFicyIsIlR4Iiwic2luIiwiVHkiLCJjb3MiLCJvbk1lc3NhZ2UiLCJlbWl0TWVzc2FnZSIsIkNoYXQiLCJ1IiwiUkdCMkhleCIsImIiLCJsZWFkaW5nSGFzaCIsIkhleDJSR0IiLCJoZXgiLCJyZ2IiLCJkYXJrZW5SR0JDb2xvciIsIm1wIiwibWF4IiwiY3VycmVudFBpbmciLCJvblRpbWUiLCJzdG9wVGltZXIiLCJyZWFjdGlvbnMiLCJzb3J0aW5nIiwiZGlzcGxheSIsImtleXdvcmRzIiwia2V5d29yZCIsImR1cGxpY2F0aW9uQ2hlY2tpbmciLCJ1c2VycyIsIk1hcCIsImdldFJlYWN0aW9uQnlLZXl3b3JkIiwicmVhY3QiLCJnZXRSZWFjdGlvbiIsInVwZGF0ZVJlYWN0aW9uIiwiREVDUkVNRU5UIiwib2xkUmVhY3Rpb24iLCJnZXRWYWx1ZXMiLCJfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX18iLCJfX3dlYnBhY2tfcmVxdWlyZV9fIiwibW9kdWxlSWQiLCJfX3dlYnBhY2tfbW9kdWxlc19fIiwiZ2V0dGVyIiwiZCIsImRlZmluaXRpb24iLCJnbG9iYWxUaGlzIiwidG9TdHJpbmdUYWciXSwibWFwcGluZ3MiOiJ1RkFHSUEsRSxNQUEwQixHQUE0QixLQUUxREEsRUFBd0JDLEtBQUssQ0FBQ0MsRUFBT0MsR0FBSSxHQUFJLEdBQUcsQ0FBQyxRQUFVLEVBQUUsUUFBVSxHQUFHLE1BQVEsR0FBRyxTQUFXLEdBQUcsV0FBYSxNQUVoSCxXLHFCQ0NBRCxFQUFPRSxRQUFVLFNBQVVDLEdBQ3pCLElBQUlDLEVBQU8sR0F1RFgsT0FyREFBLEVBQUtDLFNBQVcsV0FDZCxPQUFPQyxLQUFLQyxLQUFJLFNBQVVDLEdBQ3hCLElBQUlDLEVBQVVOLEVBQXVCSyxHQUVyQyxPQUFJQSxFQUFLLEdBQ0EsVUFBVUUsT0FBT0YsRUFBSyxHQUFJLE1BQU1FLE9BQU9ELEVBQVMsS0FHbERBLEtBQ05FLEtBQUssS0FLVlAsRUFBS1EsRUFBSSxTQUFVQyxFQUFTQyxFQUFZQyxHQUNmLGlCQUFaRixJQUVUQSxFQUFVLENBQUMsQ0FBQyxLQUFNQSxFQUFTLE1BRzdCLElBQUlHLEVBQXlCLEdBRTdCLEdBQUlELEVBQ0YsSUFBSyxJQUFJSCxFQUFJLEVBQUdBLEVBQUlOLEtBQUtXLE9BQVFMLElBQUssQ0FFcEMsSUFBSVgsRUFBS0ssS0FBS00sR0FBRyxHQUVQLE1BQU5YLElBQ0ZlLEVBQXVCZixJQUFNLEdBS25DLElBQUssSUFBSWlCLEVBQUssRUFBR0EsRUFBS0wsRUFBUUksT0FBUUMsSUFBTSxDQUMxQyxJQUFJVixFQUFPLEdBQUdFLE9BQU9HLEVBQVFLLElBRXpCSCxHQUFVQyxFQUF1QlIsRUFBSyxNQUt0Q00sSUFDR04sRUFBSyxHQUdSQSxFQUFLLEdBQUssR0FBR0UsT0FBT0ksRUFBWSxTQUFTSixPQUFPRixFQUFLLElBRnJEQSxFQUFLLEdBQUtNLEdBTWRWLEVBQUtMLEtBQUtTLE1BSVBKLEksb0JDeERULFNBQVNlLEVBQWtCQyxFQUFLQyxJQUFrQixNQUFQQSxHQUFlQSxFQUFNRCxFQUFJSCxVQUFRSSxFQUFNRCxFQUFJSCxRQUFRLElBQUssSUFBSUwsRUFBSSxFQUFHVSxFQUFPLElBQUlDLE1BQU1GLEdBQU1ULEVBQUlTLEVBQUtULElBQU9VLEVBQUtWLEdBQUtRLEVBQUlSLEdBQU0sT0FBT1UsRUFNaEx0QixFQUFPRSxRQUFVLFNBQWdDTSxHQUMvQyxJQWJzQlksRUFBS1IsRUFhdkJZLEdBYnVCWixFQWFNLEVBSG5DLFNBQXlCUSxHQUFPLEdBQUlHLE1BQU1FLFFBQVFMLEdBQU0sT0FBT0EsRUFWdEJNLENBQWpCTixFQWFLWixJQUw3QixTQUErQlksRUFBS1IsR0FBSyxHQUFzQixvQkFBWGUsUUFBNEJBLE9BQU9DLFlBQVlDLE9BQU9ULEdBQWpFLENBQWdGLElBQUlVLEVBQU8sR0FBUUMsR0FBSyxFQUFVQyxHQUFLLEVBQVdDLE9BQUtDLEVBQVcsSUFBTSxJQUFLLElBQWlDQyxFQUE3QmpCLEVBQUtFLEVBQUlPLE9BQU9DLGNBQW1CRyxHQUFNSSxFQUFLakIsRUFBR2tCLFFBQVFDLFFBQW9CUCxFQUFLL0IsS0FBS29DLEVBQUdHLFFBQVkxQixHQUFLa0IsRUFBS2IsU0FBV0wsR0FBM0RtQixHQUFLLElBQW9FLE1BQU9RLEdBQU9QLEdBQUssRUFBTUMsRUFBS00sRUFBTyxRQUFVLElBQVdSLEdBQXNCLE1BQWhCYixFQUFXLFFBQVdBLEVBQVcsU0FBTyxRQUFVLEdBQUljLEVBQUksTUFBTUMsR0FBUSxPQUFPSCxHQVJqYVUsQ0FBc0JwQixFQUFLUixJQUk1RixTQUFxQzZCLEVBQUdDLEdBQVUsR0FBS0QsRUFBTCxDQUFnQixHQUFpQixpQkFBTkEsRUFBZ0IsT0FBT3RCLEVBQWtCc0IsRUFBR0MsR0FBUyxJQUFJQyxFQUFJZCxPQUFPZSxVQUFVdkMsU0FBU3dDLEtBQUtKLEdBQUdLLE1BQU0sR0FBSSxHQUFpRSxNQUFuRCxXQUFOSCxHQUFrQkYsRUFBRU0sY0FBYUosRUFBSUYsRUFBRU0sWUFBWUMsTUFBZ0IsUUFBTkwsR0FBcUIsUUFBTkEsRUFBb0JwQixNQUFNMEIsS0FBS1IsR0FBYyxjQUFORSxHQUFxQiwyQ0FBMkNPLEtBQUtQLEdBQVd4QixFQUFrQnNCLEVBQUdDLFFBQXpHLEdBSjNNUyxDQUE0Qi9CLEVBQUtSLElBRW5JLFdBQThCLE1BQU0sSUFBSXdDLFVBQVUsNklBRnVGQyxJQWNuSTVDLEVBQVVlLEVBQU0sR0FDaEI4QixFQUFhOUIsRUFBTSxHQUV2QixHQUFvQixtQkFBVCtCLEtBQXFCLENBRTlCLElBQUlDLEVBQVNELEtBQUtFLFNBQVNDLG1CQUFtQkMsS0FBS0MsVUFBVU4sTUFDekRPLEVBQU8sK0RBQStEbkQsT0FBTzhDLEdBQzdFTSxFQUFnQixPQUFPcEQsT0FBT21ELEVBQU0sT0FDcENFLEVBQWFULEVBQVdVLFFBQVF6RCxLQUFJLFNBQVUwRCxHQUNoRCxNQUFPLGlCQUFpQnZELE9BQU80QyxFQUFXWSxZQUFjLElBQUl4RCxPQUFPdUQsRUFBUSxVQUU3RSxNQUFPLENBQUN4RCxHQUFTQyxPQUFPcUQsR0FBWXJELE9BQU8sQ0FBQ29ELElBQWdCbkQsS0FBSyxNQUduRSxNQUFPLENBQUNGLEdBQVNFLEtBQUssUSxxQkNQeEIsSUFPSXdELEVBUEFDLEVBQXVCLGlCQUFaQyxRQUF1QkEsUUFBVSxLQUM1Q0MsRUFBZUYsR0FBd0IsbUJBQVpBLEVBQUVHLE1BQzdCSCxFQUFFRyxNQUNGLFNBQXNCQyxFQUFRQyxFQUFVQyxHQUN4QyxPQUFPQyxTQUFTL0IsVUFBVTJCLE1BQU0xQixLQUFLMkIsRUFBUUMsRUFBVUMsSUFLekRQLEVBREVDLEdBQTBCLG1CQUFkQSxFQUFFUSxRQUNDUixFQUFFUSxRQUNWL0MsT0FBT2dELHNCQUNDLFNBQXdCTCxHQUN2QyxPQUFPM0MsT0FBT2lELG9CQUFvQk4sR0FDL0I5RCxPQUFPbUIsT0FBT2dELHNCQUFzQkwsS0FHeEIsU0FBd0JBLEdBQ3ZDLE9BQU8zQyxPQUFPaUQsb0JBQW9CTixJQVF0QyxJQUFJTyxFQUFjQyxPQUFPQyxPQUFTLFNBQXFCM0MsR0FDckQsT0FBT0EsR0FBVUEsR0FHbkIsU0FBUzRDLElBQ1BBLEVBQWFDLEtBQUt0QyxLQUFLdkMsTUFFekJOLEVBQU9FLFFBQVVnRixFQUNqQmxGLEVBQU9FLFFBQVFrRixLQXdZZixTQUFjQyxFQUFTckMsR0FDckIsT0FBTyxJQUFJc0MsU0FBUSxTQUFVQyxFQUFTQyxHQUNwQyxTQUFTQyxTQUNldkQsSUFBbEJ3RCxHQUNGTCxFQUFRTSxlQUFlLFFBQVNELEdBRWxDSCxFQUFRLEdBQUd6QyxNQUFNRCxLQUFLK0MsWUFFeEIsSUFBSUYsRUFRUyxVQUFUMUMsSUFDRjBDLEVBQWdCLFNBQXVCbkQsR0FDckM4QyxFQUFRTSxlQUFlM0MsRUFBTXlDLEdBQzdCRCxFQUFPakQsSUFHVDhDLEVBQVFELEtBQUssUUFBU00sSUFHeEJMLEVBQVFELEtBQUtwQyxFQUFNeUMsT0E5WnZCUCxFQUFhQSxhQUFlQSxFQUU1QkEsRUFBYXRDLFVBQVVpRCxhQUFVM0QsRUFDakNnRCxFQUFhdEMsVUFBVWtELGFBQWUsRUFDdENaLEVBQWF0QyxVQUFVbUQsbUJBQWdCN0QsRUFJdkMsSUFBSThELEVBQXNCLEdBRTFCLFNBQVNDLEVBQWNDLEdBQ3JCLEdBQXdCLG1CQUFiQSxFQUNULE1BQU0sSUFBSTlDLFVBQVUsMEVBQTRFOEMsR0FzQ3BHLFNBQVNDLEVBQWlCQyxHQUN4QixZQUEyQmxFLElBQXZCa0UsRUFBS0wsY0FDQWIsRUFBYWMsb0JBQ2ZJLEVBQUtMLGNBbURkLFNBQVNNLEVBQWE3QixFQUFROEIsRUFBTUosRUFBVUssR0FDNUMsSUFBSUMsRUFDQUMsRUFDQUMsRUExSHNCQyxFQWdKMUIsR0FwQkFWLEVBQWNDLFFBR0NoRSxLQURmdUUsRUFBU2pDLEVBQU9xQixVQUVkWSxFQUFTakMsRUFBT3FCLFFBQVVoRSxPQUFPK0UsT0FBTyxNQUN4Q3BDLEVBQU9zQixhQUFlLFNBSUs1RCxJQUF2QnVFLEVBQU9JLGNBQ1RyQyxFQUFPc0MsS0FBSyxjQUFlUixFQUNmSixFQUFTQSxTQUFXQSxFQUFTQSxTQUFXQSxHQUlwRE8sRUFBU2pDLEVBQU9xQixTQUVsQmEsRUFBV0QsRUFBT0gsU0FHSHBFLElBQWJ3RSxFQUVGQSxFQUFXRCxFQUFPSCxHQUFRSixJQUN4QjFCLEVBQU9zQixrQkFlVCxHQWJ3QixtQkFBYlksRUFFVEEsRUFBV0QsRUFBT0gsR0FDaEJDLEVBQVUsQ0FBQ0wsRUFBVVEsR0FBWSxDQUFDQSxFQUFVUixHQUVyQ0ssRUFDVEcsRUFBU0ssUUFBUWIsR0FFakJRLEVBQVMzRyxLQUFLbUcsSUFJaEJNLEVBQUlMLEVBQWlCM0IsSUFDYixHQUFLa0MsRUFBU3pGLE9BQVN1RixJQUFNRSxFQUFTTSxPQUFRLENBQ3BETixFQUFTTSxRQUFTLEVBR2xCLElBQUlDLEVBQUksSUFBSUMsTUFBTSwrQ0FDRVIsRUFBU3pGLE9BQVMsSUFBTWtHLE9BQU9iLEdBRGpDLHFFQUlsQlcsRUFBRWpFLEtBQU8sOEJBQ1RpRSxFQUFFNUIsUUFBVWIsRUFDWnlDLEVBQUVYLEtBQU9BLEVBQ1RXLEVBQUVHLE1BQVFWLEVBQVN6RixPQTdLRzBGLEVBOEtITSxFQTdLbkJJLFNBQVdBLFFBQVFDLE1BQU1ELFFBQVFDLEtBQUtYLEdBaUwxQyxPQUFPbkMsRUFjVCxTQUFTK0MsSUFDUCxJQUFLakgsS0FBS2tILE1BR1IsT0FGQWxILEtBQUtrRSxPQUFPbUIsZUFBZXJGLEtBQUtnRyxLQUFNaEcsS0FBS21ILFFBQzNDbkgsS0FBS2tILE9BQVEsRUFDWSxJQUFyQjVCLFVBQVUzRSxPQUNMWCxLQUFLNEYsU0FBU3JELEtBQUt2QyxLQUFLa0UsUUFDMUJsRSxLQUFLNEYsU0FBUzNCLE1BQU1qRSxLQUFLa0UsT0FBUW9CLFdBSTVDLFNBQVM4QixFQUFVbEQsRUFBUThCLEVBQU1KLEdBQy9CLElBQUl5QixFQUFRLENBQUVILE9BQU8sRUFBT0MsWUFBUXZGLEVBQVdzQyxPQUFRQSxFQUFROEIsS0FBTUEsRUFBTUosU0FBVUEsR0FDakYwQixFQUFVTCxFQUFZTSxLQUFLRixHQUcvQixPQUZBQyxFQUFRMUIsU0FBV0EsRUFDbkJ5QixFQUFNRixPQUFTRyxFQUNSQSxFQTBIVCxTQUFTRSxFQUFXdEQsRUFBUThCLEVBQU15QixHQUNoQyxJQUFJdEIsRUFBU2pDLEVBQU9xQixRQUVwQixRQUFlM0QsSUFBWHVFLEVBQ0YsTUFBTyxHQUVULElBQUl1QixFQUFhdkIsRUFBT0gsR0FDeEIsWUFBbUJwRSxJQUFmOEYsRUFDSyxHQUVpQixtQkFBZkEsRUFDRkQsRUFBUyxDQUFDQyxFQUFXOUIsVUFBWThCLEdBQWMsQ0FBQ0EsR0FFbERELEVBc0RULFNBQXlCM0csR0FFdkIsSUFEQSxJQUFJNkcsRUFBTSxJQUFJMUcsTUFBTUgsRUFBSUgsUUFDZkwsRUFBSSxFQUFHQSxFQUFJcUgsRUFBSWhILFNBQVVMLEVBQ2hDcUgsRUFBSXJILEdBQUtRLEVBQUlSLEdBQUdzRixVQUFZOUUsRUFBSVIsR0FFbEMsT0FBT3FILEVBMURMQyxDQUFnQkYsR0FBY0csRUFBV0gsRUFBWUEsRUFBVy9HLFFBb0JwRSxTQUFTbUgsRUFBYzlCLEdBQ3JCLElBQUlHLEVBQVNuRyxLQUFLdUYsUUFFbEIsUUFBZTNELElBQVh1RSxFQUFzQixDQUN4QixJQUFJdUIsRUFBYXZCLEVBQU9ILEdBRXhCLEdBQTBCLG1CQUFmMEIsRUFDVCxPQUFPLEVBQ0YsUUFBbUI5RixJQUFmOEYsRUFDVCxPQUFPQSxFQUFXL0csT0FJdEIsT0FBTyxFQU9ULFNBQVNrSCxFQUFXL0csRUFBS3VCLEdBRXZCLElBREEsSUFBSTBGLEVBQU8sSUFBSTlHLE1BQU1vQixHQUNaL0IsRUFBSSxFQUFHQSxFQUFJK0IsSUFBSy9CLEVBQ3ZCeUgsRUFBS3pILEdBQUtRLEVBQUlSLEdBQ2hCLE9BQU95SCxFQXBXVHhHLE9BQU95RyxlQUFlcEQsRUFBYyxzQkFBdUIsQ0FDekRxRCxZQUFZLEVBQ1pDLElBQUssV0FDSCxPQUFPeEMsR0FFVHlDLElBQUssU0FBU0MsR0FDWixHQUFtQixpQkFBUkEsR0FBb0JBLEVBQU0sR0FBSzNELEVBQVkyRCxHQUNwRCxNQUFNLElBQUlDLFdBQVcsa0dBQW9HRCxFQUFNLEtBRWpJMUMsRUFBc0IwQyxLQUkxQnhELEVBQWFDLEtBQU8sZ0JBRUdqRCxJQUFqQjVCLEtBQUt1RixTQUNMdkYsS0FBS3VGLFVBQVloRSxPQUFPK0csZUFBZXRJLE1BQU11RixVQUMvQ3ZGLEtBQUt1RixRQUFVaEUsT0FBTytFLE9BQU8sTUFDN0J0RyxLQUFLd0YsYUFBZSxHQUd0QnhGLEtBQUt5RixjQUFnQnpGLEtBQUt5RixvQkFBaUI3RCxHQUs3Q2dELEVBQWF0QyxVQUFVaUcsZ0JBQWtCLFNBQXlCbEcsR0FDaEUsR0FBaUIsaUJBQU5BLEdBQWtCQSxFQUFJLEdBQUtvQyxFQUFZcEMsR0FDaEQsTUFBTSxJQUFJZ0csV0FBVyxnRkFBa0ZoRyxFQUFJLEtBRzdHLE9BREFyQyxLQUFLeUYsY0FBZ0JwRCxFQUNkckMsTUFTVDRFLEVBQWF0QyxVQUFVa0csZ0JBQWtCLFdBQ3ZDLE9BQU8zQyxFQUFpQjdGLE9BRzFCNEUsRUFBYXRDLFVBQVVrRSxLQUFPLFNBQWNSLEdBRTFDLElBREEsSUFBSTVCLEVBQU8sR0FDRjlELEVBQUksRUFBR0EsRUFBSWdGLFVBQVUzRSxPQUFRTCxJQUFLOEQsRUFBSzNFLEtBQUs2RixVQUFVaEYsSUFDL0QsSUFBSW1JLEVBQW9CLFVBQVR6QyxFQUVYRyxFQUFTbkcsS0FBS3VGLFFBQ2xCLFFBQWUzRCxJQUFYdUUsRUFDRnNDLEVBQVdBLFFBQTRCN0csSUFBakJ1RSxFQUFPdUMsV0FDMUIsSUFBS0QsRUFDUixPQUFPLEVBR1QsR0FBSUEsRUFBUyxDQUNYLElBQUlFLEVBR0osR0FGSXZFLEVBQUt6RCxPQUFTLElBQ2hCZ0ksRUFBS3ZFLEVBQUssSUFDUnVFLGFBQWMvQixNQUdoQixNQUFNK0IsRUFHUixJQUFJMUcsRUFBTSxJQUFJMkUsTUFBTSxvQkFBc0IrQixFQUFLLEtBQU9BLEVBQUdDLFFBQVUsSUFBTSxLQUV6RSxNQURBM0csRUFBSTRHLFFBQVVGLEVBQ1IxRyxFQUdSLElBQUk2RyxFQUFVM0MsRUFBT0gsR0FFckIsUUFBZ0JwRSxJQUFaa0gsRUFDRixPQUFPLEVBRVQsR0FBdUIsbUJBQVpBLEVBQ1Q5RSxFQUFhOEUsRUFBUzlJLEtBQU1vRSxPQUU1QixLQUFJckQsRUFBTStILEVBQVFuSSxPQUNkb0ksRUFBWWxCLEVBQVdpQixFQUFTL0gsR0FDcEMsSUFBU1QsRUFBSSxFQUFHQSxFQUFJUyxJQUFPVCxFQUN6QjBELEVBQWErRSxFQUFVekksR0FBSU4sS0FBTW9FLEdBR3JDLE9BQU8sR0FpRVRRLEVBQWF0QyxVQUFVMEcsWUFBYyxTQUFxQmhELEVBQU1KLEdBQzlELE9BQU9HLEVBQWEvRixLQUFNZ0csRUFBTUosR0FBVSxJQUc1Q2hCLEVBQWF0QyxVQUFVMkcsR0FBS3JFLEVBQWF0QyxVQUFVMEcsWUFFbkRwRSxFQUFhdEMsVUFBVTRHLGdCQUNuQixTQUF5QmxELEVBQU1KLEdBQzdCLE9BQU9HLEVBQWEvRixLQUFNZ0csRUFBTUosR0FBVSxJQXFCaERoQixFQUFhdEMsVUFBVXdDLEtBQU8sU0FBY2tCLEVBQU1KLEdBR2hELE9BRkFELEVBQWNDLEdBQ2Q1RixLQUFLaUosR0FBR2pELEVBQU1vQixFQUFVcEgsS0FBTWdHLEVBQU1KLElBQzdCNUYsTUFHVDRFLEVBQWF0QyxVQUFVNkcsb0JBQ25CLFNBQTZCbkQsRUFBTUosR0FHakMsT0FGQUQsRUFBY0MsR0FDZDVGLEtBQUtrSixnQkFBZ0JsRCxFQUFNb0IsRUFBVXBILEtBQU1nRyxFQUFNSixJQUMxQzVGLE1BSWI0RSxFQUFhdEMsVUFBVStDLGVBQ25CLFNBQXdCVyxFQUFNSixHQUM1QixJQUFJOUYsRUFBTXFHLEVBQVFpRCxFQUFVOUksRUFBRytJLEVBSy9CLEdBSEExRCxFQUFjQyxRQUdDaEUsS0FEZnVFLEVBQVNuRyxLQUFLdUYsU0FFWixPQUFPdkYsS0FHVCxRQUFhNEIsS0FEYjlCLEVBQU9xRyxFQUFPSCxJQUVaLE9BQU9oRyxLQUVULEdBQUlGLElBQVM4RixHQUFZOUYsRUFBSzhGLFdBQWFBLEVBQ2IsS0FBdEI1RixLQUFLd0YsYUFDVHhGLEtBQUt1RixRQUFVaEUsT0FBTytFLE9BQU8sY0FFdEJILEVBQU9ILEdBQ1ZHLEVBQU9kLGdCQUNUckYsS0FBS3dHLEtBQUssaUJBQWtCUixFQUFNbEcsRUFBSzhGLFVBQVlBLFNBRWxELEdBQW9CLG1CQUFUOUYsRUFBcUIsQ0FHckMsSUFGQXNKLEdBQVksRUFFUDlJLEVBQUlSLEVBQUthLE9BQVMsRUFBR0wsR0FBSyxFQUFHQSxJQUNoQyxHQUFJUixFQUFLUSxLQUFPc0YsR0FBWTlGLEVBQUtRLEdBQUdzRixXQUFhQSxFQUFVLENBQ3pEeUQsRUFBbUJ2SixFQUFLUSxHQUFHc0YsU0FDM0J3RCxFQUFXOUksRUFDWCxNQUlKLEdBQUk4SSxFQUFXLEVBQ2IsT0FBT3BKLEtBRVEsSUFBYm9KLEVBQ0Z0SixFQUFLd0osUUFpSWYsU0FBbUJ4SixFQUFNeUosR0FDdkIsS0FBT0EsRUFBUSxFQUFJekosRUFBS2EsT0FBUTRJLElBQzlCekosRUFBS3lKLEdBQVN6SixFQUFLeUosRUFBUSxHQUM3QnpKLEVBQUswSixNQWxJR0MsQ0FBVTNKLEVBQU1zSixHQUdFLElBQWhCdEosRUFBS2EsU0FDUHdGLEVBQU9ILEdBQVFsRyxFQUFLLFNBRVE4QixJQUExQnVFLEVBQU9kLGdCQUNUckYsS0FBS3dHLEtBQUssaUJBQWtCUixFQUFNcUQsR0FBb0J6RCxHQUcxRCxPQUFPNUYsTUFHYjRFLEVBQWF0QyxVQUFVb0gsSUFBTTlFLEVBQWF0QyxVQUFVK0MsZUFFcERULEVBQWF0QyxVQUFVcUgsbUJBQ25CLFNBQTRCM0QsR0FDMUIsSUFBSStDLEVBQVc1QyxFQUFRN0YsRUFHdkIsUUFBZXNCLEtBRGZ1RSxFQUFTbkcsS0FBS3VGLFNBRVosT0FBT3ZGLEtBR1QsUUFBOEI0QixJQUExQnVFLEVBQU9kLGVBVVQsT0FUeUIsSUFBckJDLFVBQVUzRSxRQUNaWCxLQUFLdUYsUUFBVWhFLE9BQU8rRSxPQUFPLE1BQzdCdEcsS0FBS3dGLGFBQWUsUUFDTTVELElBQWpCdUUsRUFBT0gsS0FDWSxLQUF0QmhHLEtBQUt3RixhQUNUeEYsS0FBS3VGLFFBQVVoRSxPQUFPK0UsT0FBTyxhQUV0QkgsRUFBT0gsSUFFWGhHLEtBSVQsR0FBeUIsSUFBckJzRixVQUFVM0UsT0FBYyxDQUMxQixJQUNJaUosRUFEQUMsRUFBT3RJLE9BQU9zSSxLQUFLMUQsR0FFdkIsSUFBSzdGLEVBQUksRUFBR0EsRUFBSXVKLEVBQUtsSixTQUFVTCxFQUVqQixvQkFEWnNKLEVBQU1DLEVBQUt2SixLQUVYTixLQUFLMkosbUJBQW1CQyxHQUsxQixPQUhBNUosS0FBSzJKLG1CQUFtQixrQkFDeEIzSixLQUFLdUYsUUFBVWhFLE9BQU8rRSxPQUFPLE1BQzdCdEcsS0FBS3dGLGFBQWUsRUFDYnhGLEtBS1QsR0FBeUIsbUJBRnpCK0ksRUFBWTVDLEVBQU9ILElBR2pCaEcsS0FBS3FGLGVBQWVXLEVBQU0rQyxRQUNyQixRQUFrQm5ILElBQWRtSCxFQUVULElBQUt6SSxFQUFJeUksRUFBVXBJLE9BQVMsRUFBR0wsR0FBSyxFQUFHQSxJQUNyQ04sS0FBS3FGLGVBQWVXLEVBQU0rQyxFQUFVekksSUFJeEMsT0FBT04sTUFvQmI0RSxFQUFhdEMsVUFBVXlHLFVBQVksU0FBbUIvQyxHQUNwRCxPQUFPd0IsRUFBV3hILEtBQU1nRyxHQUFNLElBR2hDcEIsRUFBYXRDLFVBQVV3SCxhQUFlLFNBQXNCOUQsR0FDMUQsT0FBT3dCLEVBQVd4SCxLQUFNZ0csR0FBTSxJQUdoQ3BCLEVBQWFrRCxjQUFnQixTQUFTL0MsRUFBU2lCLEdBQzdDLE1BQXFDLG1CQUExQmpCLEVBQVErQyxjQUNWL0MsRUFBUStDLGNBQWM5QixHQUV0QjhCLEVBQWN2RixLQUFLd0MsRUFBU2lCLElBSXZDcEIsRUFBYXRDLFVBQVV3RixjQUFnQkEsRUFpQnZDbEQsRUFBYXRDLFVBQVV5SCxXQUFhLFdBQ2xDLE9BQU8vSixLQUFLd0YsYUFBZSxFQUFJM0IsRUFBZTdELEtBQUt1RixTQUFXLEsseURDeGFoRSxrRCx5RENBQSxrRCxjQ0NBLElBQUl5RSxFQUEyQyxFQUFRLElBQ25EQyxFQUE2QixFQUFRLEtBQ3JDQyxFQUE2QixFQUFRLEtBSXJDQyxFQUFPLDRyREFGMkJILEVBQXlDQyxHQUUwdUQsMk5BRG54REQsRUFBeUNFLEdBQzYvRCxtd0RBRTVrRXhLLEVBQU9FLFFBQVV1SyxHLG9CQ1BqQnpLLEVBQU9FLFFBQVUsU0FBVXdLLEVBQUtDLEdBUzlCLE9BUktBLElBRUhBLEVBQVUsSUFNTyxpQkFGbkJELEVBQU1BLEdBQU9BLEVBQUlFLFdBQWFGLEVBQUlHLFFBQVVILEdBR25DQSxHQUdMQyxFQUFRRyxPQUVWSixHQUFPQyxFQUFRRyxNQUdiSCxFQUFRSSxpQkFBbUIsb0JBQW9CN0gsS0FBS3dILEdBQy9DLElBQUtoSyxPQUFPZ0ssRUFBSyxLQUduQkEsSyx3RkNoQkksSUFBSSxJQUxILENBRWQsT0FBaUIsT0FDakIsV0FBb0IsSUFNcEIsUUFBZSxZQUFrQixJLDJCQ1ZqQyxJQUNNTSxFQWVGQyxFQUFZLFdBQ2QsSUFBSUQsRUFBTyxHQUNYLE9BQU8sU0FBa0J4RyxHQUN2QixRQUE0QixJQUFqQndHLEVBQUt4RyxHQUF5QixDQUN2QyxJQUFJMEcsRUFBY0MsU0FBU0MsY0FBYzVHLEdBRXpDLEdBQUk2RyxPQUFPQyxtQkFBcUJKLGFBQXVCRyxPQUFPQyxrQkFDNUQsSUFHRUosRUFBY0EsRUFBWUssZ0JBQWdCQyxLQUMxQyxNQUFPQyxHQUVQUCxFQUFjLEtBSWxCRixFQUFLeEcsR0FBVTBHLEVBR2pCLE9BQU9GLEVBQUt4RyxJQXBCQSxHQXdCWmtILEVBQWMsR0FFbEIsU0FBU0MsRUFBcUJDLEdBRzVCLElBRkEsSUFBSUMsR0FBVSxFQUVMakwsRUFBSSxFQUFHQSxFQUFJOEssRUFBWXpLLE9BQVFMLElBQ3RDLEdBQUk4SyxFQUFZOUssR0FBR2dMLGFBQWVBLEVBQVksQ0FDNUNDLEVBQVNqTCxFQUNULE1BSUosT0FBT2lMLEVBR1QsU0FBU0MsRUFBYTFMLEVBQU11SyxHQUkxQixJQUhBLElBQUlvQixFQUFhLEdBQ2JDLEVBQWMsR0FFVHBMLEVBQUksRUFBR0EsRUFBSVIsRUFBS2EsT0FBUUwsSUFBSyxDQUNwQyxJQUFJSixFQUFPSixFQUFLUSxHQUNaWCxFQUFLMEssRUFBUXNCLEtBQU96TCxFQUFLLEdBQUttSyxFQUFRc0IsS0FBT3pMLEVBQUssR0FDbEQ0RyxFQUFRMkUsRUFBVzlMLElBQU8sRUFDMUIyTCxFQUFhLEdBQUdsTCxPQUFPVCxFQUFJLEtBQUtTLE9BQU8wRyxHQUMzQzJFLEVBQVc5TCxHQUFNbUgsRUFBUSxFQUN6QixJQUFJeUMsRUFBUThCLEVBQXFCQyxHQUM3Qk0sRUFBTSxDQUNSQyxJQUFLM0wsRUFBSyxHQUNWNEwsTUFBTzVMLEVBQUssR0FDWjZMLFVBQVc3TCxFQUFLLEtBR0gsSUFBWHFKLEdBQ0Y2QixFQUFZN0IsR0FBT3lDLGFBQ25CWixFQUFZN0IsR0FBTzBDLFFBQVFMLElBRTNCUixFQUFZM0wsS0FBSyxDQUNmNkwsV0FBWUEsRUFDWlcsUUFBU0MsRUFBU04sRUFBS3ZCLEdBQ3ZCMkIsV0FBWSxJQUloQk4sRUFBWWpNLEtBQUs2TCxHQUduQixPQUFPSSxFQUdULFNBQVNTLEVBQW1COUIsR0FDMUIsSUFBSStCLEVBQVF2QixTQUFTd0IsY0FBYyxTQUMvQkMsRUFBYWpDLEVBQVFpQyxZQUFjLEdBRXZDLFFBQWdDLElBQXJCQSxFQUFXQyxNQUF1QixDQUMzQyxJQUFJQSxFQUFtRCxLQUVuREEsSUFDRkQsRUFBV0MsTUFBUUEsR0FRdkIsR0FKQWhMLE9BQU9zSSxLQUFLeUMsR0FBWUUsU0FBUSxTQUFVNUMsR0FDeEN3QyxFQUFNSyxhQUFhN0MsRUFBSzBDLEVBQVcxQyxPQUdQLG1CQUFuQlMsRUFBUXFDLE9BQ2pCckMsRUFBUXFDLE9BQU9OLE9BQ1YsQ0FDTCxJQUFJbEksRUFBU3lHLEVBQVVOLEVBQVFxQyxRQUFVLFFBRXpDLElBQUt4SSxFQUNILE1BQU0sSUFBSTBDLE1BQU0sMkdBR2xCMUMsRUFBT3lJLFlBQVlQLEdBR3JCLE9BQU9BLEVBY1QsSUFDTVEsRUFERkMsR0FDRUQsRUFBWSxHQUNULFNBQWlCckQsRUFBT3VELEdBRTdCLE9BREFGLEVBQVVyRCxHQUFTdUQsRUFDWkYsRUFBVUcsT0FBT0MsU0FBUzNNLEtBQUssUUFJMUMsU0FBUzRNLEVBQW9CYixFQUFPN0MsRUFBTzJELEVBQVF0QixHQUNqRCxJQUFJQyxFQUFNcUIsRUFBUyxHQUFLdEIsRUFBSUUsTUFBUSxVQUFVMUwsT0FBT3dMLEVBQUlFLE1BQU8sTUFBTTFMLE9BQU93TCxFQUFJQyxJQUFLLEtBQU9ELEVBQUlDLElBSWpHLEdBQUlPLEVBQU1lLFdBQ1JmLEVBQU1lLFdBQVdDLFFBQVVQLEVBQVl0RCxFQUFPc0MsT0FDekMsQ0FDTCxJQUFJd0IsRUFBVXhDLFNBQVN5QyxlQUFlekIsR0FDbEMwQixFQUFhbkIsRUFBTW1CLFdBRW5CQSxFQUFXaEUsSUFDYjZDLEVBQU1vQixZQUFZRCxFQUFXaEUsSUFHM0JnRSxFQUFXNU0sT0FDYnlMLEVBQU1xQixhQUFhSixFQUFTRSxFQUFXaEUsSUFFdkM2QyxFQUFNTyxZQUFZVSxJQUt4QixTQUFTSyxFQUFXdEIsRUFBTy9CLEVBQVN1QixHQUNsQyxJQUFJQyxFQUFNRCxFQUFJQyxJQUNWQyxFQUFRRixFQUFJRSxNQUNaQyxFQUFZSCxFQUFJRyxVQWVwQixHQWJJRCxFQUNGTSxFQUFNSyxhQUFhLFFBQVNYLEdBRTVCTSxFQUFNdUIsZ0JBQWdCLFNBR3BCNUIsR0FBNkIsb0JBQVQ5SSxPQUN0QjRJLEdBQU8sdURBQXVEekwsT0FBTzZDLEtBQUtFLFNBQVNDLG1CQUFtQkMsS0FBS0MsVUFBVXlJLE1BQWUsUUFNbElLLEVBQU1lLFdBQ1JmLEVBQU1lLFdBQVdDLFFBQVV2QixNQUN0QixDQUNMLEtBQU9PLEVBQU13QixZQUNYeEIsRUFBTW9CLFlBQVlwQixFQUFNd0IsWUFHMUJ4QixFQUFNTyxZQUFZOUIsU0FBU3lDLGVBQWV6QixLQUk5QyxJQUFJZ0MsRUFBWSxLQUNaQyxFQUFtQixFQUV2QixTQUFTNUIsRUFBU04sRUFBS3ZCLEdBQ3JCLElBQUkrQixFQUNBMkIsRUFDQWIsRUFFSixHQUFJN0MsRUFBUXdELFVBQVcsQ0FDckIsSUFBSUcsRUFBYUYsSUFDakIxQixFQUFReUIsSUFBY0EsRUFBWTFCLEVBQW1COUIsSUFDckQwRCxFQUFTZCxFQUFvQjFGLEtBQUssS0FBTTZFLEVBQU80QixHQUFZLEdBQzNEZCxFQUFTRCxFQUFvQjFGLEtBQUssS0FBTTZFLEVBQU80QixHQUFZLFFBRTNENUIsRUFBUUQsRUFBbUI5QixHQUMzQjBELEVBQVNMLEVBQVduRyxLQUFLLEtBQU02RSxFQUFPL0IsR0FFdEM2QyxFQUFTLFlBeEZiLFNBQTRCZCxHQUUxQixHQUF5QixPQUFyQkEsRUFBTTZCLFdBQ1IsT0FBTyxFQUdUN0IsRUFBTTZCLFdBQVdULFlBQVlwQixHQW1GekI4QixDQUFtQjlCLElBS3ZCLE9BREEyQixFQUFPbkMsR0FDQSxTQUFxQnVDLEdBQzFCLEdBQUlBLEVBQVEsQ0FDVixHQUFJQSxFQUFPdEMsTUFBUUQsRUFBSUMsS0FBT3NDLEVBQU9yQyxRQUFVRixFQUFJRSxPQUFTcUMsRUFBT3BDLFlBQWNILEVBQUlHLFVBQ25GLE9BR0ZnQyxFQUFPbkMsRUFBTXVDLFFBRWJqQixLQUtOeE4sRUFBT0UsUUFBVSxTQUFVRSxFQUFNdUssSUFDL0JBLEVBQVVBLEdBQVcsSUFHUndELFdBQTBDLGtCQUF0QnhELEVBQVF3RCxZQUN2Q3hELEVBQVF3RCxnQkFyT1ksSUFBVG5ELElBTVRBLEVBQU9zQyxRQUFRakMsUUFBVUYsVUFBWUEsU0FBU3VELE1BQVFyRCxPQUFPc0QsT0FHeEQzRCxJQWdPVCxJQUFJNEQsRUFBa0I5QyxFQUR0QjFMLEVBQU9BLEdBQVEsR0FDMEJ1SyxHQUN6QyxPQUFPLFNBQWdCa0UsR0FHckIsR0FGQUEsRUFBVUEsR0FBVyxHQUUyQixtQkFBNUNoTixPQUFPZSxVQUFVdkMsU0FBU3dDLEtBQUtnTSxHQUFuQyxDQUlBLElBQUssSUFBSWpPLEVBQUksRUFBR0EsRUFBSWdPLEVBQWdCM04sT0FBUUwsSUFBSyxDQUMvQyxJQUNJaUosRUFBUThCLEVBREtpRCxFQUFnQmhPLElBRWpDOEssRUFBWTdCLEdBQU95QyxhQUtyQixJQUZBLElBQUl3QyxFQUFxQmhELEVBQWErQyxFQUFTbEUsR0FFdEN6SixFQUFLLEVBQUdBLEVBQUswTixFQUFnQjNOLE9BQVFDLElBQU0sQ0FDbEQsSUFFSTZOLEVBQVNwRCxFQUZLaUQsRUFBZ0IxTixJQUlLLElBQW5Dd0ssRUFBWXFELEdBQVF6QyxhQUN0QlosRUFBWXFELEdBQVF4QyxVQUVwQmIsRUFBWXNELE9BQU9ELEVBQVEsSUFJL0JILEVBQWtCRSxNLGNDMVF0QjlPLEVBQU9FLFFBQVUsQ0FDaEIrTyxPQUFRLEVBQVEsS0FDaEJDLE9BQVEsRUFBUSxPLGNDRmpCLElBQUlDLEVBQVUsRUFBUSxLQUNsQkMsRUFBSSxFQUFRLElBcURoQnBQLEVBQU9FLFFBbkRHLFNBQWF5SyxFQUFTMEUsR0FFNUIsSUFBSTNFLEVBQW1DLE9BQTdCMEUsRUFBRTVHLElBQUltQyxFQUFRRCxJQUFLLE1BQWlCMEUsRUFBRTVHLElBQUltQyxFQUFRMkUsSUFBSyxNQUFRRixFQUFFNUcsSUFBSW1DLEVBQVFELElBQUssTUFNNUYsR0FISzBFLEVBQUVHLE1BQU03RSxLQUFRQSxFQUFNLGdDQUE2QyxNQUFYQSxFQUFJLEdBQWFBLEVBQU0sSUFBSUEsTUFHcEYwRSxFQUFFSSxTQUNGTCxFQUFRQyxFQUFFSyxNQUFNLENBQUVDLE9BQVEsTUFBT0MsTUFBTSxHQUFRaEYsRUFBUyxDQUFFRCxJQUFLQSxJQUFRMkUsUUFHdEUsR0FBSUQsRUFBRVEsZUFBaUJSLEVBQUVTLGdCQUFpQixDQUMzQ2xGLEVBQVV5RSxFQUFFSyxNQUFNLENBQUUvRSxJQUFLQSxFQUFLZ0YsT0FBUSxNQUFPSSxRQUFTLElBQU1uRixHQUU1RCxJQUFJb0YsRUFBTSxJQUFJQyxlQUVkLElBQUksSUFBSWhOLEtBRFIrTSxFQUFJRSxLQUFLdEYsRUFBUStFLE9BQVEvRSxFQUFRRCxLQUFLLEdBQ3RCQyxFQUFRbUYsUUFDcEJDLEVBQUlHLGlCQUFpQmxOLEVBQU0ySCxFQUFRbUYsUUFBUTlNLElBRS9DK00sRUFBSUksYUFBZSxPQUVuQkosRUFBSUssaUJBQWlCLFFBQVNDLElBQ0wsR0FBbEJOLEVBQUlPLGFBQ2MsS0FBZFAsRUFBSVEsT0FDSGxCLEVBQVNVLEVBQUlRLE9BQVEsS0FBTSxNQUUzQmxCLEVBQVMsS0FBTSxLQUFNVSxFQUFJUyxjQUtyQ1QsRUFBSVUsV0FHSCxDQUVELElBQUlDLEVBQWUsa0JBQWtCQyxLQUFLQyxNQUFNLElBQVNELEtBQUtFLFlBQzlEeEYsT0FBT3FGLEdBQWdCLFNBQVM3TSxVQUNyQndILE9BQU9xRixHQUNkdkYsU0FBUzJGLEtBQUtoRCxZQUFZaUQsR0FDMUIxQixFQUFTLEtBQU0sS0FBTXhMLElBSXpCLElBQUlrTixFQUFTNUYsU0FBU3dCLGNBQWMsVUFDcENvRSxFQUFPQyxJQUFNLEdBQUd0RyxJQUFNQSxFQUFJdUcsU0FBUyxLQUFPLElBQU0sZUFBZVAsSUFDL0R2RixTQUFTMkYsS0FBSzdELFlBQVk4RCxNLGNDbERsQyxJQUFJRyxFQUFNLEVBQVEsS0FDZEMsRUFBVyxFQUFRLEtBQ25CQyxFQUFlLG9CQUNmQyxFQUFTLEVBQVEsS0FDakJDLEVBQVEsRUFBUSxLQUNoQkMsRUFBUSxFQUFRLEtBQ2hCQyxFQUFLLEVBQUFDLEVBQU9DLFdBQWEsRUFBQUQsRUFBT0UsY0FBZ0IsRUFBUSxLQUN4RHZDLEVBQUksRUFBUSxJQUdaSCxFQUFTLFNBQVNBLEVBQU8yQyxHQUN6QixHQUFJdFIsZ0JBQWdCMk8sR0FBVyxFQUFTLE9BQU8sSUFBSUEsRUFBTzJDLEdBQzFEdFIsS0FBS3VJLGdCQUFnQixHQUVyQnZJLEtBQUtzUixLQUFPeEMsRUFBRTVHLElBQUlvSixFQUFNLElBQ3hCdFIsS0FBS3NSLEtBQUtDLFNBQVd2UixLQUFLc1IsS0FBS0MsVUFBWSxHQUMzQ3ZSLEtBQUtzUixLQUFLRSxXQUFheFIsS0FBS3NSLEtBQUtFLFlBQWMsR0FDL0N4UixLQUFLc1IsS0FBS0csU0FBV3pSLEtBQUtzUixLQUFLRyxVQUFZLEdBQzNDelIsS0FBS3NSLEtBQUtqSCxRQUFVckssS0FBS3NSLEtBQUtqSCxTQUFXLEdBRXpDckssS0FBSzBSLFNBQVc1QyxFQUFFNUcsSUFBSWxJLEtBQUtzUixLQUFLakgsUUFBUXFILFNBQVUsTUFFbEQxUixLQUFLMlIscUJBQXVCN0MsRUFBRTVHLElBQUlsSSxLQUFLc1IsS0FBS0UsV0FBV0cscUJBQXNCQyxLQUM3RTVSLEtBQUs2UixxQkFBdUIvQyxFQUFFNUcsSUFBSWxJLEtBQUtzUixLQUFLRSxXQUFXSyxxQkFBc0IsS0FDN0U3UixLQUFLOFIsVUFBWWhELEVBQUU1RyxJQUFJbEksS0FBS3NSLEtBQUtFLFdBQVdNLFdBQVcsR0FDdkQ5UixLQUFLK1IsZUFBaUJqRCxFQUFFNUcsSUFBSWxJLEtBQUtzUixLQUFLRSxXQUFXTyxlQUFnQixLQUNqRS9SLEtBQUtnUyxrQkFBb0JsRCxFQUFFNUcsSUFBSWxJLEtBQUtzUixLQUFLRSxXQUFXUSxrQkFBbUIsS0FFdkVoUyxLQUFLaVMsY0FBZSxFQUNwQmpTLEtBQUtrUyxjQUFnQixFQUNyQmxTLEtBQUttUyxlQUFpQm5TLEtBQUtnUyxrQkFFM0JoUyxLQUFLb1MsT0FBU3RELEVBQUU1RyxJQUFJbEksS0FBS3NSLEtBQUtFLFdBQVdZLFFBQVEsR0FHakRwUyxLQUFLcVMsT0FBUyxHQUNkclMsS0FBS3NTLFVBQVksR0FFakJ0UyxLQUFLdVIsU0FBVyxHQUNoQnZSLEtBQUt1UyxlQUFpQixFQUN0QnZTLEtBQUt3UyxnQkFBa0IsR0FDdkJ4UyxLQUFLeVMsV0FBYSxHQUNsQnpTLEtBQUswUyxRQUFVLElBQUlDLEtBQ25CM1MsS0FBSzRTLFdBQWEsR0FDbEI1UyxLQUFLNlMsU0FBVyxLQUNoQjdTLEtBQUs4UyxZQUFjLEtBQ25COVMsS0FBSytTLE9BQVMsR0FDZC9TLEtBQUtnVCxTQUFXLEdBQ2hCaFQsS0FBS2lULFVBQVksR0FDakJqVCxLQUFLa1QsZ0JBQWlCLEVBQ3RCbFQsS0FBS2tSLEdBQUssS0FHVixJQUFJaUMsRUFBUSxRQUNSblQsS0FBS3NSLEtBQUtqSCxRQUFRK0ksUUFBU0QsRUFBUSxRQUN2Q25ULEtBQUtxVCxJQUFNclQsS0FBS3NSLEtBQUtQLFFBQVVBLEVBRS9CLElBQU1BLEVBQU91QyxTQUFTSCxHQUFVLE1BQU1oSSxJQUd0Q25MLEtBQUtzUixLQUFLQyxTQUFTL0UsU0FBUSxTQUFTK0csRUFBTWhLLEVBQU9pSyxHQUM3Q0EsRUFBU2pLLEdBQVN1RixFQUFFMkUsUUFBUUYsTUFHaEN6QyxFQUFhdk8sS0FBS3ZDLE9BUXRCLElBQUksSUFBSTBULEtBTFI1RSxFQUFFNkUsU0FBU2hGLEVBQVFtQyxHQUVuQm5DLEVBQU9yTSxVQUFVc08sSUFBTUEsRUFHREMsRUFDbEJsQyxFQUFPck0sVUFBVW9SLEdBQWM3QyxFQUFTNkMsR0FJNUMvRSxFQUFPck0sVUFBVXNSLGNBQWdCLFNBQXVCaEwsR0FDcEQsSUFBSWtHLEVBQUUrRSxPQUFPakwsR0FBYixDQUlBNUksS0FBS3dHLEtBQUssY0FBZW5ELEtBQUsyTixNQUFNM04sS0FBS0MsVUFBVXNGLElBQVdBLEdBRTlELElBQUk2SyxFQUFVM0UsRUFBRTJFLFFBQVEzRSxFQUFFNUcsSUFBSVUsRUFBUWtMLE9BQU8sR0FBSSxPQUM3Q0MsRUFBTWpGLEVBQUU1RyxJQUFJVSxFQUFRa0wsT0FBTyxHQUFJLE1BQy9CRSxFQUFRbEYsRUFBRTVHLElBQUlVLEVBQVFxTCxLQUFLLFVBQVcsTUFNMUMsR0FIQXJMLEVBQVFxTCxLQUFPakQsRUFBTWtELE9BQU9sRCxFQUFNbUQsVUFBVW5ELEVBQU1xQixPQUFPekosRUFBUXFMLFFBRzdEckwsRUFBUXFMLEtBQU0sQ0FDZCxJQUFJQSxFQUFPckwsRUFBUXFMLEtBQ25CLElBQUksSUFBSXJLLEtBQU9xSyxFQUNYLEdBQVksZUFBUnJLLEdBQWdDLGlCQUFSQSxHQUFrQyxTQUFSQSxFQUFnQixDQUNsRSxJQUFJNUgsRUFBUWlTLEVBQUtySyxHQUNia0YsRUFBRXNGLFVBQVVwUyxHQUFVQSxFQUFRLEtBQ2YsTUFBVkEsRUFBaUJBLEdBQVEsRUFDZixNQUFWQSxFQUFpQkEsR0FBUSxFQUN6QjhNLEVBQUV1RixTQUFTclMsS0FBVUEsRUFBUThNLEVBQUV3RixZQUFZdFMsSUFDcERpUyxFQUFLckssR0FBTzVILEdBTXhCLEdBQUk4TSxFQUFFK0UsT0FBT2pMLEVBQVEyTCxRQUNqQixPQUFPM0wsRUFBUTRMLFNBRVgsSUFBSyxPQUNEeFUsS0FBS3dHLEtBQUssUUFDTHNJLEVBQUUrRSxPQUFPN1QsS0FBS2tSLEtBQThCLElBQXZCbFIsS0FBS2tSLEdBQUdsQixZQUM5QmhRLEtBQUtrUixHQUFHZixLQUFLLFFBRWpCLE1BR0osSUFBSyxPQUNELElBQUlzRSxFQUFXLElBQUk5QixLQUNuQjNTLEtBQUt1UyxnQkFBa0JrQyxFQUFTQyxVQUFZMVUsS0FBSzBTLFFBQVFnQyxXQUFhLElBQ3RFMVUsS0FBSzJVLE1BQU0sQ0FBQyxPQUFRLGdCQUFpQixDQUFDLENBQUMzVSxLQUFLdVMsa0JBRTVDcUMsYUFBYTVVLEtBQUs4UyxhQUNsQixNQUVKLFFBQ0k5UyxLQUFLcVQsSUFBSXJNLEtBQUssNENBQTRDM0QsS0FBS0MsVUFBVXNGLEVBQVMsS0FBTSxXQU0vRixHQUF1QixrQkFBbkJBLEVBQVEyTCxPQUNiLE9BQU8zTCxFQUFRNEwsU0FDWCxJQUFLLE1BQ0wsSUFBSyxNQUNMLElBQUssTUFDTCxJQUFLLE1BQ0wsSUFBSyxNQUNMLElBQUssTUFDRCxNQUdKLElBQUssTUFDRHhVLEtBQUtnVCxTQUFXcEssRUFBUWtMLE9BQU8sR0FDL0IsTUFHSixJQUFLLE1BQ0Q5VCxLQUFLcVQsSUFBSXdCLEtBQUssd0JBQ2Q3VSxLQUFLaVQsVUFBVSxVQUFZLEdBQzNCalQsS0FBSzJVLE1BQU0sQ0FBQyxZQUFhLG1CQUFvQixDQUFDLENBQUMzVSxLQUFLOFUsT0FBUTlVLEtBQUsrVSxNQUFPLENBQUMsUUFDekUvVSxLQUFLa1MsY0FBZ0IsRUFDckJsUyxLQUFLbVMsZUFBaUJuUyxLQUFLZ1Msa0JBRzNCaFMsS0FBSzZTLFNBQVdtQyxhQUFZLEtBRW5CbEcsRUFBRStFLE9BQU83VCxLQUFLa1IsS0FBOEIsSUFBdkJsUixLQUFLa1IsR0FBR2xCLFlBQzlCaFEsS0FBS2tSLEdBQUdmLEtBQUssUUFFakJuUSxLQUFLMFMsUUFBVSxJQUFJQyxLQUNuQjNTLEtBQUs4UyxZQUFjbUMsWUFBVyxLQUNyQm5HLEVBQUUrRSxPQUFPN1QsS0FBS2tSLE1BQ2ZsUixLQUFLa1QsZ0JBQWlCLEVBQ3RCbFQsS0FBS3FULElBQUkzSyxNQUFNLGlCQUNmMUksS0FBS2tSLEdBQUdnRSxRQUVSQyxjQUFjblYsS0FBSzZTLFVBQ25CK0IsYUFBYTVVLEtBQUs4UyxnQkFFdkJoRSxFQUFFNUcsSUFBSWxJLEtBQUtzUixLQUFLRSxXQUFXNEQsUUFBUyxTQUN4QyxLQUdILElBQUlDLEVBQVksSUFBSXBFLEVBQU1xRSxNQUFNLEtBQzVCQyxFQUFlekcsRUFBRTBHLE1BQU14VixLQUFLc1IsS0FBS0MsU0FBVXZSLEtBQUt1UixVQUNwRHZSLEtBQUt1UixTQUFXLEdBRWhCLElBQUssSUFBSWpSLEVBQUksRUFBR0EsRUFBSWlWLEVBQWE1VSxPQUFRTCxJQUFLLENBQzFDLElBQUltVCxFQUFVOEIsRUFBYWpWLEdBQzNCK1UsRUFBVUksS0FBSSxLQUNMM0csRUFBRStFLE9BQU83VCxLQUFLa1IsS0FBOEIsSUFBdkJsUixLQUFLa1IsR0FBR2xCLFlBQzlCaFEsS0FBS0ssS0FBS29ULEdBQVNpQyxPQUFNelQsSUFBU2pDLEtBQUtxVCxJQUFJM0ssTUFBTXpHLFNBSzdEb1QsRUFBVU0sTUFDVixNQUdKLElBQUssU0FDRCxJQUFJQyxFQUFVLENBQUMsTUFDWEMsRUFBWSxDQUFDcEMsRUFBU08sRUFBT0QsR0FFN0IrQixFQUFpQixDQUFDckMsR0FBUyxHQUMzQnNDLEVBQWtCLENBQUN0QyxHQUFTLEdBQzVCdUMsRUFBZ0IsQ0FBQ0gsRUFBV0QsR0FDNUJLLEVBQWlCLENBQUNKLEVBSlAsQ0FBQzdCLElBS1prQyxFQUFXLElBQUl6QyxNQUFZTSxJQUMvQixPQUFPQyxHQUVILElBQUssVUFDRGhVLEtBQUtxVCxJQUFJd0IsS0FBSyxJQUFJcEIsaURBQ2xCelQsS0FBSzJVLE1BQU0sQ0FBQyxhQUFjLGNBQWUsdUJBQXdCLENBQUNtQixFQUFnQkEsRUFBZ0JGLElBQ2xHLE1BR0osSUFBSyxXQUNENVYsS0FBS3FULElBQUl3QixLQUFLLElBQUlwQix1REFDbEJ6VCxLQUFLMlUsTUFBTSxDQUFDLGFBQWMsY0FBZSwwQkFBMkIsQ0FBQ29CLEVBQWlCQSxFQUFpQkgsSUFDdkcsTUFHSixJQUFLLGdCQUNENVYsS0FBS3FULElBQUl3QixLQUFLLElBQUlwQiwyQ0FDbEJ6VCxLQUFLMlUsTUFBTSxDQUFDLFlBQWEscUJBQXNCLENBQUNtQixFQUFnQkYsSUFDaEUsTUFHSixJQUFLLGlCQUNENVYsS0FBS3FULElBQUl3QixLQUFLLElBQUlwQixpREFDbEJ6VCxLQUFLMlUsTUFBTSxDQUFDLFlBQWEsd0JBQXlCLENBQUNvQixFQUFpQkgsSUFDcEUsTUFHSixJQUFLLFVBQ0wsSUFBSyxXQUNELE1BR0osSUFBSyxvQkFDTCxJQUFLLGVBQ0wsSUFBSyxnQkFDRCxNQUdKLElBQUssU0FDRDVWLEtBQUtxVCxJQUFJd0IsS0FBSyxJQUFJcEIsb0NBQ2xCelQsS0FBSzJVLE1BQU0sQ0FBQyxVQUFXLFVBQVcsbUJBQW9CLENBQUNtQixFQUFnQkEsRUFBZ0JGLElBQ3ZGLE1BR0osSUFBSyxVQUNENVYsS0FBS3FULElBQUl3QixLQUFLLElBQUlwQiwwQ0FDbEJ6VCxLQUFLMlUsTUFBTSxDQUFDLFVBQVcsVUFBVyxzQkFBdUIsQ0FBQ29CLEVBQWlCQSxFQUFpQkgsSUFDNUYsTUFHSixJQUFLLFlBQ0QsSUFBSU8sRUFBT3BDLEVBQUlxQyxNQUFNLE1BQU0sR0FBR0MsY0FDekJELE1BQU0sTUFDTnJKLFFBQU8xSyxHQUFLQSxJQUVqQnJDLEtBQUsyVSxNQUFNLENBQUMsZUFBZ0IsUUFBUyxDQUFDLENBQUMsS0FBTXdCLEdBQU8sQ0FBQzFDLEVBQVMwQyxLQUM5RCxNQUdKLElBQUssVUFDRG5XLEtBQUsyVSxNQUFNLENBQUMsZUFBZ0IsUUFBUyxDQUFDLENBQUMsS0FBTSxJQUFLLENBQUNsQixFQUFTLE1BQzVELE1BR0osSUFBSyxlQUNHTSxFQUFJdUMsU0FBUyxPQUNidkMsRUFBTUEsRUFBSXZSLE1BQU0sR0FBSSxJQUV4QixJQUFJK1QsRUFBT3hDLEVBQUlxQyxNQUFNLE1BQU0sR0FBR0MsY0FDekJELE1BQU0sTUFDTnJKLFFBQU8xSyxHQUFLQSxJQUVickMsS0FBSzJVLE1BQU0sQ0FBQyxlQUFnQixRQUFTLENBQUMsQ0FBQyxLQUFNNEIsR0FBTyxDQUFDOUMsRUFBUzhDLEtBQzlELE1BR1IsSUFBSyxVQUNEdlcsS0FBSzJVLE1BQU0sQ0FBQyxlQUFnQixRQUFTLENBQUMsQ0FBQyxLQUFNLElBQUssQ0FBQ2xCLEVBQVMsTUFDNUQsTUFHSixJQUFLLGlCQUNMLElBQUssZ0JBQ0wsSUFBSyxzQkFDTCxJQUFLLHFCQUNMLElBQUssZUFDTCxJQUFLLGdCQUNMLElBQUssWUFDRHpULEtBQUtxVCxJQUFJd0IsS0FBS3FCLEdBQ2RsVyxLQUFLMlUsTUFBTSxDQUFDLFNBQVUsZUFBZ0JzQixHQUN0QyxNQUdKLElBQUssY0FDRGpXLEtBQUtxVCxJQUFJd0IsS0FBS3FCLEdBQ2RsVyxLQUFLMlUsTUFBTSxDQUFDLFNBQVUsZUFBZ0JxQixHQUN0QyxNQUdKLElBQUssY0FDRGhXLEtBQUtxVCxJQUFJd0IsS0FBS3FCLEdBQ2RsVyxLQUFLMlUsTUFBTSxDQUFDLFNBQVUsaUJBQWtCc0IsR0FDeEMsTUFHSixJQUFLLGFBQ0RqVyxLQUFLcVQsSUFBSXdCLEtBQUtxQixHQUNkbFcsS0FBSzJVLE1BQU0sQ0FBQyxTQUFVLGdCQUFpQixDQUFDa0IsRUFBVyxDQUFDN0IsRUFBTyxNQUMzRCxNQUdKLElBQUssY0FDRGhVLEtBQUtxVCxJQUFJd0IsS0FBS3FCLEdBQ2RsVyxLQUFLMlUsTUFBTSxDQUFDLFNBQVUsZUFBZ0JxQixHQUN0QyxNQUdKLElBQUssYUFDRGhXLEtBQUtxVCxJQUFJd0IsS0FBS3FCLEdBQ2RsVyxLQUFLMlUsTUFBTSxDQUFDLFNBQVUsZ0JBQWlCLENBQUNrQixFQUFXLENBQUM3QixFQUFPLE1BQzNELE1BR0osSUFBSyxZQUNMLElBQUsseUJBQ0wsSUFBSyw4QkFDRGhVLEtBQUtxVCxJQUFJd0IsS0FBS3FCLEdBQ2RsVyxLQUFLMlUsTUFBTSxDQUFDLFNBQVUsZUFBZ0IsQ0FBQ2tCLEVBQVcsQ0FBQzdCLEVBQU8sTUFDMUQsTUFHSixJQUFLLGNBQ0RoVSxLQUFLcVQsSUFBSXdCLEtBQUtxQixHQUNkbFcsS0FBSzJVLE1BQU0sQ0FBQyxTQUFVLGVBQWdCcUIsR0FDdEMsTUFHSixJQUFLLFlBQ0wsSUFBSyxpQkFDTCxJQUFLLGNBQ0RoVyxLQUFLcVQsSUFBSXdCLEtBQUtxQixHQUNkbFcsS0FBSzJVLE1BQU0sQ0FBQyxTQUFVLGVBQWdCc0IsR0FDdEMsTUFHSixJQUFLLGdCQUNEalcsS0FBS3FULElBQUl3QixLQUFLcUIsR0FDZGxXLEtBQUsyVSxNQUFNLENBQUMsU0FBVSxpQkFBa0JxQixHQUN4QyxNQUdKLElBQUssZ0JBQ0RoVyxLQUFLcVQsSUFBSXdCLEtBQUtxQixHQUNkbFcsS0FBSzJVLE1BQU0sQ0FBQyxTQUFVLGlCQUFrQnFCLEdBQ3hDLE1BR0osSUFBSyxjQUNMLElBQUssZ0JBQ0RoVyxLQUFLcVQsSUFBSXdCLEtBQUtxQixHQUNkbFcsS0FBSzJVLE1BQU0sQ0FBQyxTQUFVLGlCQUFrQnNCLEdBQ3hDLE1BR0osSUFBSyxjQUNMLElBQUssNEJBQ0RqVyxLQUFLcVQsSUFBSXdCLEtBQUtxQixHQUNkbFcsS0FBSzJVLE1BQU0sQ0FBQyxTQUFVLGlCQUFrQnNCLEdBQ3hDLE1BR0osSUFBSyxnQkFDRGpXLEtBQUtxVCxJQUFJd0IsS0FBS3FCLEdBQ2RsVyxLQUFLMlUsTUFBTSxDQUFDLFNBQVUsaUJBQWtCcUIsR0FDeEMsTUFHSixJQUFLLGNBQ0wsSUFBSyxtQkFDRGhXLEtBQUtxVCxJQUFJd0IsS0FBS3FCLEdBQ2RsVyxLQUFLMlUsTUFBTSxDQUFDLFNBQVUsaUJBQWtCc0IsR0FDeEMsTUFHSixJQUFLLHFCQUNEalcsS0FBS3FULElBQUl3QixLQUFLcUIsR0FDZGxXLEtBQUsyVSxNQUFNLENBQUMsU0FBVSxzQkFBdUJxQixHQUM3QyxNQUdKLElBQUssbUJBQ0wsSUFBSyx1QkFDRGhXLEtBQUtxVCxJQUFJd0IsS0FBS3FCLEdBQ2RsVyxLQUFLMlUsTUFBTSxDQUFDLFNBQVUsc0JBQXVCc0IsR0FDN0MsTUFHSixJQUFLLGtCQUNEalcsS0FBS3FULElBQUl3QixLQUFLcUIsR0FDZCxJQUFJTSxFQUFrQjdSLE1BQU1vUCxFQUFJLElBQXlCLEVBQW5CMEMsU0FBUzFDLEVBQUksSUFDbkQvVCxLQUFLMlUsTUFBTSxDQUFDLFNBQVUsZ0JBQWlCLENBQUNrQixFQUFXLENBQUMsT0FBUVcsS0FDNUQsTUFHSixJQUFLLG1CQUNMLElBQUsseUJBQ0wsSUFBSyxpQkFDTCxJQUFLLGFBQ0R4VyxLQUFLcVQsSUFBSXdCLEtBQUtxQixHQUNkbFcsS0FBSzJVLE1BQU0sQ0FBQyxTQUFVLGdCQUFpQixDQUFDa0IsRUFBVyxDQUFDN0IsRUFBTyxRQUMzRCxNQUdKLElBQUssaUJBQ0wsSUFBSyxlQUNEaFUsS0FBS3FULElBQUl3QixLQUFLcUIsR0FDZGxXLEtBQUsyVSxNQUFNLENBQUMsU0FBVSxtQkFBb0JzQixHQUMxQyxNQUdKLElBQUssa0JBQ0wsSUFBSyxnQkFDRGpXLEtBQUtxVCxJQUFJd0IsS0FBS3FCLEdBQ2RsVyxLQUFLMlUsTUFBTSxDQUFDLFNBQVUsc0JBQXVCc0IsR0FDN0MsTUFHSixJQUFLLGtCQUNEalcsS0FBS3FULElBQUl3QixLQUFLcUIsR0FDZGxXLEtBQUsyVSxNQUFNLENBQUMsU0FBVSxtQkFBb0JxQixHQUMxQyxNQUVKLElBQUsseUJBQ0RoVyxLQUFLcVQsSUFBSXdCLEtBQUssSUFBSXBCLEtBQVdNLE1BQzdCL1QsS0FBSzJVLE1BQU0sQ0FBQyxTQUFVLHlCQUEwQnFCLEdBR3BELElBQUssbUJBQ0wsSUFBSyxpQkFDRGhXLEtBQUtxVCxJQUFJd0IsS0FBS3FCLEdBQ2RsVyxLQUFLMlUsTUFBTSxDQUFDLFNBQVUsMEJBQTJCc0IsR0FDakQsTUFHSixJQUFLLGtCQUNMLElBQUssZ0JBQ0RqVyxLQUFLcVQsSUFBSXdCLEtBQUtxQixHQUNkbFcsS0FBSzJVLE1BQU0sQ0FBQyxTQUFVLHVCQUF3QnNCLEdBQzlDLE1BR0osSUFBSyx5QkFDTCxJQUFLLHVCQUNEalcsS0FBS3FULElBQUl3QixLQUFLcUIsR0FDZGxXLEtBQUsyVSxNQUFNLENBQUMsU0FBVSx3QkFBeUJzQixHQUMvQyxNQUdKLElBQUssd0JBQ0wsSUFBSyxzQkFDRGpXLEtBQUtxVCxJQUFJd0IsS0FBS3FCLEdBQ2RsVyxLQUFLMlUsTUFBTSxDQUFDLFNBQVUscUJBQXNCc0IsR0FDNUMsTUFHSixJQUFLLGdCQUNEalcsS0FBS3FULElBQUl3QixLQUFLcUIsR0FDZGxXLEtBQUsyVSxNQUFNLENBQUMsU0FBVSxnQkFBaUJzQixHQUN2QyxNQUdKLElBQUssaUJBQ0RqVyxLQUFLcVQsSUFBSXdCLEtBQUtxQixHQUNkbFcsS0FBSzJVLE1BQU0sQ0FBQyxTQUFVLG1CQUFvQnNCLEdBQzFDLE1BR0osSUFBSyxnQkFDTCxJQUFLLG9CQUNMLElBQUssMEJBQ0wsSUFBSyx1QkFDTCxJQUFLLHlCQUNMLElBQUssbUJBQ0wsSUFBSyxvQkFDRGpXLEtBQUtxVCxJQUFJd0IsS0FBS3FCLEdBQ2RsVyxLQUFLMlUsTUFBTSxDQUFDLFNBQVUsbUJBQW9Cc0IsR0FDMUMsTUFJSixJQUFLLG9CQUNMLElBQUssZ0JBQ0RqVyxLQUFLcVQsSUFBSXdCLEtBQUtxQixHQUNkbFcsS0FBSzJVLE1BQU0sQ0FBQyxTQUFVLGlCQUFrQnFCLEdBQ3hDLE1BR0osSUFBSyxjQUNMLElBQUssbUJBQ0RoVyxLQUFLcVQsSUFBSXdCLEtBQUtxQixHQUNkbFcsS0FBSzJVLE1BQU0sQ0FBQyxTQUFVLGlCQUFrQnNCLEdBQ3hDLE1BR0osSUFBSyxlQUNMLElBQUssMkJBQ0wsSUFBSyxpQ0FDTCxJQUFLLHlCQUNEalcsS0FBS3FULElBQUl3QixLQUFLcUIsR0FDZGxXLEtBQUsyVSxNQUFNLENBQUMsU0FBVSx5QkFBMEJzQixHQUNoRCxNQUdKLElBQUssZUFDTCxJQUFLLGNBQ0RqVyxLQUFLcVQsSUFBSXdCLEtBQUtxQixHQUNkbFcsS0FBSzJVLE1BQU0sQ0FBQyxTQUFVLGtCQUFtQnNCLEdBQ3pDLE1BR0osSUFBSyx3QkFDTCxJQUFLLHVCQUNMLElBQUssd0JBQ0wsSUFBSyx3QkFDTCxJQUFLLCtCQUNEalcsS0FBS3FULElBQUl3QixLQUFLcUIsR0FDZGxXLEtBQUsyVSxNQUFNLENBQUMsU0FBVSxtQkFBb0JzQixHQUMxQyxNQUdKLElBQUssZ0JBQ0wsSUFBSyxhQUNMLElBQUsscUJBQ0wsSUFBSyx3QkFDTCxJQUFLLFVBQ0RqVyxLQUFLcVQsSUFBSXdCLEtBQUtxQixHQUNkbFcsS0FBSzJVLE1BQU0sQ0FDUCxTQUNBLGNBQ0EsZ0JBQ0EsZ0JBQ0Esa0JBQ0Esd0JBQ0EsZUFDQSxjQUNBLGdCQUNBLGVBQ0EsY0FDQSxnQkFDQSxxQkFDQSxlQUNBLGlCQUNBLGVBQ0EsZUFDQSxrQkFDQSxxQkFDQSxlQUNBLGtCQUNBLG9CQUNBLHVCQUNBLHNCQUNBLHlCQUNBLG9CQUNBLHdCQUNELENBQUNrQixFQUFXLENBQUM3QixFQUFPUCxLQUN2QixNQUdKLElBQUssZUFDTCxJQUFLLHlCQUNEelQsS0FBS3FULElBQUl3QixLQUFLcUIsR0FDZGxXLEtBQUt3RyxLQUFLLFVBQVdpTixFQUFTTyxFQUFPRCxHQUNyQyxNQUdKLElBQUssbUJBQ0QvVCxLQUFLcVQsSUFBSXdCLEtBQUtxQixHQUNkbFcsS0FBS3dHLEtBQUssU0FBVWlOLEVBQVNPLEVBQU9ELEdBQ3BDLE1BR0osSUFBSyxpQkFDTCxJQUFLLDJCQUNMLElBQUssMkJBQ0wsSUFBSyxnQkFDTCxJQUFLLGdCQUNMLElBQUsscUJBQ0wsSUFBSyxnQkFDTCxJQUFLLGVBQ0wsSUFBSyxlQUNMLElBQUsscUJBQ0wsSUFBSyxzQkFDTCxJQUFLLGVBQ0wsSUFBSyxvQkFDTCxJQUFLLDZCQUNMLElBQUsseUJBQ0wsSUFBSyxlQUNMLElBQUssZ0JBQ0wsSUFBSyxVQUNMLElBQUssbUJBQ0wsSUFBSyxhQUNMLElBQUssV0FDRC9ULEtBQUtxVCxJQUFJd0IsS0FBS3FCLEdBQ2RsVyxLQUFLd0csS0FBSyxTQUFVaU4sRUFBU08sRUFBT0QsR0FDcEMsTUFHSixJQUFLLFVBQ0wsSUFBSyxXQUNELE1BRUosUUFDUUEsRUFBSXBELFNBQVMsdUJBQXlCb0QsRUFBSXBELFNBQVMsZ0NBTzlDb0QsRUFBSXBELFNBQVMscUJBQXVCb0QsRUFBSXBELFNBQVMsOEJBTnREM1EsS0FBS2tULGdCQUFpQixFQUN0QmxULEtBQUs4UixXQUFZLEVBQ2pCOVIsS0FBSytTLE9BQVNnQixFQUNkL1QsS0FBS3FULElBQUkzSyxNQUFNMUksS0FBSytTLFFBQ3BCL1MsS0FBS2tSLEdBQUdnRSxTQVNIbkIsRUFBSXBELFNBQVMsaUJBQ2xCM1EsS0FBS2tULGdCQUFpQixFQUN0QmxULEtBQUs4UixXQUFZLEVBQ2pCOVIsS0FBSytTLE9BQVMsZ0JBQ2QvUyxLQUFLcVQsSUFBSTNLLE1BQU0xSSxLQUFLK1MsUUFDcEIvUyxLQUFLa1IsR0FBR2dFLFNBR1JsVixLQUFLcVQsSUFBSXJNLEtBQUssK0NBQStDM0QsS0FBS0MsVUFBVXNGLEVBQVMsS0FBTSxNQUl2RyxNQUdKLElBQUssYUFDRCxJQUFJb0ssRUFBV3BLLEVBQVFxTCxLQUFLLGlCQUFtQnJMLEVBQVFxTCxLQUFZLE1BQy9EeUMsRUFBTzlOLEVBQVFxTCxLQUFLLHVCQUF5QixHQUM3QzBDLEVBQVc3SCxFQUFFd0YsWUFBWXhGLEVBQUU1RyxJQUFJVSxFQUFRcUwsS0FBSywyQkFBNEIsTUFBUSxLQUVoRjJDLEVBQVUsQ0FBRUMsTUFESkgsRUFBSy9GLFNBQVMsU0FDSCtGLE9BQU1DLFlBQ3pCMUQsRUFBWXJLLEVBQVFxTCxLQUNwQjZDLEtBQWtCbE8sRUFBUXFMLEtBQUssNEJBQThCLEdBQzdEOEMsRUFBWW5PLEVBQVFxTCxLQUFLLHFDQUF1Q3JMLEVBQVFxTCxLQUFLLGlDQUM3RStDLElBQWlCcE8sRUFBUXFMLEtBQUssNkJBR2xDLE9BRkFoQixFQUFVLGdCQUFrQmUsRUFFckJBLEdBRUgsSUFBSyxRQUNEaFUsS0FBSzJVLE1BQU0sQ0FBQyxRQUFTLGtCQUFtQixDQUNwQyxDQUFDbEIsRUFBU1QsRUFBVThELEVBQWMvQyxFQUFLZCxFQUFXMkQsS0FFdEQsTUFHSixJQUFLLE1BQ0Q1VyxLQUFLd0csS0FBSyxlQUFnQmlOLEVBQVNULEVBQVU0RCxFQUFTN0MsRUFBS2QsR0FDM0QsTUFHSixJQUFLLFVBQ0RqVCxLQUFLd0csS0FBSyxVQUFXaU4sRUFBU1QsRUFBVThELEVBQWNDLEVBQVdILEVBQVMzRCxHQUMxRSxNQUlKLElBQUssY0FDRGpULEtBQUt3RyxLQUFLLGNBQWVpTixFQUFTcUQsRUFBY0MsRUFBV0gsRUFBUzNELEdBQ3BFLE1BR0osSUFBSyxpQkFDRGpULEtBQUt3RyxLQUFLLGlCQUFrQmlOLEVBQVNULEVBQVVnRSxFQUFjSixFQUFTM0QsR0FDdEUsTUFJSixJQUFLLHFCQUNEalQsS0FBS3dHLEtBQUsscUJBQXNCaU4sRUFBU3VELEVBQWNKLEVBQVMzRCxHQUNoRSxNQUdKLElBQUssbUJBQ0RqVCxLQUFLd0csS0FBSyxtQkFBb0JpTixFQUFTVCxFQUFVNEQsRUFBUzNELEdBQzFELE1BR0osSUFBSyxrQkFDRCxJQUFJZ0UsRUFBU3JPLEVBQVFxTCxLQUFLLDBCQUE0QnJMLEVBQVFxTCxLQUFLLDBCQUNuRWpVLEtBQUt3RyxLQUFLLGtCQUFtQmlOLEVBQVNULEVBQVVpRSxFQUFRaEUsR0FDeEQsTUFHSixJQUFLLHNCQUNEalQsS0FBS3dHLEtBQUssc0JBQXVCaU4sRUFBU1QsRUFBVUMsR0FDcEQsTUFHSixJQUFLLE9BQ0dELEVBQVdwSyxFQUFRcUwsS0FBSywwQkFBNEJyTCxFQUFRcUwsS0FBSyxtQkFBckUsSUFDSWlELEVBQVV0TyxFQUFRcUwsS0FBSyx5QkFDM0JqVSxLQUFLd0csS0FBSyxTQUFVaU4sRUFBU1QsRUFBVWtFLEdBSS9DLE1BR0osSUFBSyxhQUNELElBQUlDLEVBQVdwRCxFQUFJcUMsTUFBTSxLQUNyQmMsSUFBWUMsRUFBUyxJQUFNLEVBRVgsTUFBaEJBLEVBQVMsSUFDVG5YLEtBQUtxVCxJQUFJd0IsS0FBSyxJQUFJcEIsd0JBQ2xCelQsS0FBSzJVLE1BQU0sQ0FBQyxTQUFVLGtCQUFtQixDQUFDLENBQUNsQixFQUFTeUQsR0FBVSxDQUFDLFVBSS9EbFgsS0FBS3FULElBQUl3QixLQUFLLElBQUlwQixrQkFBd0IwRCxFQUFTLFVBQVVELGdCQUM3RGxYLEtBQUt3RyxLQUFLLFVBQVdpTixFQUFTMEQsRUFBUyxHQUFJRCxJQUUvQyxNQUdKLElBQUssWUFFRCxHQUFJdE8sRUFBUWtMLE9BQU9uVCxPQUFTLEVBQUcsQ0FFM0IsSUFBSXlXLEVBQVd0SSxFQUFFNUcsSUFBSVUsRUFBUXFMLEtBQUssZ0JBQWlCLE1BRS9DbkYsRUFBRStFLE9BQU91RCxJQUNUcFgsS0FBS3FULElBQUl3QixLQUFLLElBQUlwQixNQUFZTSxzQkFDOUIvVCxLQUFLd0csS0FBSyxNQUFPaU4sRUFBU00sRUFBSyxLQUFNbkwsRUFBUXFMLFFBRTdDalUsS0FBS3FULElBQUl3QixLQUFLLElBQUlwQixNQUFZTSw0QkFBOEJxRCxjQUM1RHBYLEtBQUt3RyxLQUFLLFVBQVdpTixFQUFTTSxFQUFLLE9BQVFxRCxFQUFVeE8sRUFBUXFMLFlBS2pFalUsS0FBS3FULElBQUl3QixLQUFLLElBQUlwQix1Q0FDbEJ6VCxLQUFLMlUsTUFBTSxDQUFDLFlBQWEsaUJBQWtCLENBQUMsQ0FBQ2xCLEdBQVUsQ0FBQyxRQUU1RCxNQUdKLElBQUssV0FDRCxHQUFJN0ssRUFBUWtMLE9BQU9uVCxPQUFTLEVBQUcsQ0FDdkJxUyxFQUFXcEssRUFBUXFMLEtBQVksTUFBbkMsSUFDSW9ELEVBQWlCdEQsR0FDakJkLEVBQVlySyxFQUFRcUwsTUFDZCxnQkFBa0IsaUJBRTVCalUsS0FBS3FULElBQUl3QixLQUFLLElBQUlwQixNQUFZVCxpQ0FDOUJoVCxLQUFLd0csS0FBSyxpQkFBa0JpTixFQUFTVCxFQUFVcUUsRUFBZ0JwRSxHQUVuRSxNQUdKLElBQUssWUFDRGpULEtBQUtxVCxJQUFJd0IsS0FBSyw0Q0FDZDdVLEtBQUtxVCxJQUFJd0IsS0FBSyxxQ0FBcUN4RSxLQUFLQyxNQUFNdFEsS0FBS21TLGVBQWlCLGtCQUNwRm5TLEtBQUtzWCxhQUNMckMsWUFBVyxLQUFRalYsS0FBS3VYLFlBQWN2WCxLQUFLbVMsZ0JBQzNDLE1BR0osSUFBSyxZQUNEdkosRUFBUXFMLEtBQUtqQixTQUFXaFQsS0FBS2dULFNBR0ssUUFBOUJwSyxFQUFRcUwsS0FBSyxlQUNSalUsS0FBSzRTLFdBQVc1UyxLQUFLeVMsY0FBZXpTLEtBQUs0UyxXQUFXNVMsS0FBS3lTLFlBQWMsSUFDdkV6UyxLQUFLNFMsV0FBVzVTLEtBQUt5UyxZQUFZOUIsU0FBUzNRLEtBQUtnVCxXQUFhaFQsS0FBSzRTLFdBQVc1UyxLQUFLeVMsWUFBWWhULEtBQUtPLEtBQUtnVCxXQUkzR2xFLEVBQUUwSSxZQUFZeFgsS0FBS3lYLGdCQUFtQnpYLEtBQUtpVCxVQUFVUSxLQUN0RHpULEtBQUtpVCxVQUFVUSxHQUFXN0ssRUFBUXFMLEtBQ2xDalUsS0FBS3lTLFdBQWFnQixFQUNsQnpULEtBQUt1UixTQUFTOVIsS0FBS2dVLEdBQ25CelQsS0FBS3FULElBQUl3QixLQUFLLFVBQVVwQixLQUN4QnpULEtBQUt3RyxLQUFLLE9BQVFpTixFQUFTM0UsRUFBRWtFLFNBQVNoVCxLQUFLeVgsZ0JBQWdCLElBSTNEN08sRUFBUXFMLEtBQUssZ0JBQWtCalUsS0FBS3FTLFFBQ3BDclMsS0FBSzBYLGdCQUFnQjlPLEVBQVFxTCxLQUFLLGVBR3RDalUsS0FBS2lULFVBQVVRLEdBQVc3SyxFQUFRcUwsS0FDbEMsTUFHSixJQUFLLGtCQUNEalUsS0FBS3dTLGdCQUFrQjVKLEVBQVFxTCxVQUdXLElBQS9CckwsRUFBUXFMLEtBQUssZUFDcEJqVSxLQUFLMFgsZ0JBQWdCOU8sRUFBUXFMLEtBQUssZUFFdEMsTUFJSixJQUFLLFlBUUQsR0FOSW5GLEVBQUUyRSxRQUFRelQsS0FBS3lTLGNBQWdCZ0IsR0FBV3pULEtBQUt3RyxLQUFLLGVBQWdCLEtBQU1pTixHQUc5RTdLLEVBQVFxTCxLQUFLUixRQUFVQSxFQUN2QnpULEtBQUt3RyxLQUFLLFlBQWFpTixFQUFTN0ssRUFBUXFMLE9BRW5DckwsRUFBUXFMLEtBQUswRCxlQUFlLGFBQWMsQ0FHM0MsR0FBSS9PLEVBQVFxTCxLQUFLMEQsZUFBZSxRQUM1QixHQUFpQyxrQkFBdEIvTyxFQUFRcUwsS0FBSzJELE1BQXVCaFAsRUFBUXFMLEtBQUsyRCxLQUlyRCxDQUNILElBQ0lDLEVBQVUsQ0FBQ3BFLEdBQVMsSUFEUjdLLEVBQVFxTCxLQUFLMkQsTUFFN0I1WCxLQUFLcVQsSUFBSXdCLEtBQUssSUFBSXBCLHFDQUNsQnpULEtBQUsyVSxNQUFNLENBQUMsT0FBUSxXQUFZLGdCQUFpQixDQUFDa0QsRUFBU0EsRUFBUyxDQUFDLFlBUlAsQ0FDOUQsSUFBSUMsRUFBVyxDQUFDckUsR0FBUyxFQUFPLEdBQ2hDelQsS0FBS3FULElBQUl3QixLQUFLLElBQUlwQiwyQ0FDbEJ6VCxLQUFLMlUsTUFBTSxDQUFDLE9BQVEsV0FBWSxtQkFBb0IsQ0FBQ21ELEVBQVVBLEVBQVUsQ0FBQyxRQWdCOUVsUCxFQUFRcUwsS0FBSzBELGVBQWUsb0JBQ1csT0FBbkMvTyxFQUFRcUwsS0FBSyxtQkFDVDZELEVBQVcsQ0FBQ3JFLEdBQVMsRUFBTyxHQUNoQ3pULEtBQUtxVCxJQUFJd0IsS0FBSyxJQUFJcEIscURBQ2xCelQsS0FBSzJVLE1BQU0sQ0FBQyxnQkFBaUIsZ0JBQWlCLHdCQUF5QixDQUFDbUQsRUFBVUEsRUFBVSxDQUFDLFVBR3pGRCxFQUFVLENBQUNwRSxHQUFTLElBRFI3SyxFQUFRcUwsS0FBSyxtQkFFN0JqVSxLQUFLcVQsSUFBSXdCLEtBQUssSUFBSXBCLDhDQUNsQnpULEtBQUsyVSxNQUFNLENBQUMsZ0JBQWlCLGdCQUFpQixxQkFBc0IsQ0FBQ2tELEVBQVNBLEVBQVMsQ0FBQyxVQUlwRyxNQUdKLElBQUssZUFDRCxNQUVKLFFBQ0k3WCxLQUFLcVQsSUFBSXJNLEtBQUssZ0RBQWdEM0QsS0FBS0MsVUFBVXNGLEVBQVMsS0FBTSxXQU1uRyxHQUF1QixRQUFuQkEsRUFBUTJMLE9BQ2IsT0FBTzNMLEVBQVE0TCxTQUNYLElBQUssT0FDVyxPQUFSVCxHQUVLL1QsS0FBSzRTLFdBQVdhLEtBQVl6VCxLQUFLNFMsV0FBV2EsR0FBVyxJQUN2RHpULEtBQUs0UyxXQUFXYSxHQUFTOUMsU0FBUy9ILEVBQVFrTCxPQUFPLEtBQU85VCxLQUFLNFMsV0FBV2EsR0FBU2hVLEtBQUttSixFQUFRa0wsT0FBTyxJQUUxRzlULEtBQUt3RyxLQUFLLE1BQU9pTixFQUFTN0ssRUFBUWtMLE9BQU8sS0FFNUIsT0FBUkMsSUFFQS9ULEtBQUs0UyxXQUFXYSxLQUFZelQsS0FBSzRTLFdBQVdhLEdBQVcsSUFDNUR6VCxLQUFLNFMsV0FBV2EsR0FBUzFHLFFBQVEvSyxHQUFtQkEsR0FBUzRHLEVBQVFrTCxPQUFPLEtBRTVFOVQsS0FBS3dHLEtBQUssUUFBU2lOLEVBQVM3SyxFQUFRa0wsT0FBTyxLQUUvQyxNQUVKLFFBQ0k5VCxLQUFLcVQsSUFBSXJNLEtBQUssc0NBQXNDM0QsS0FBS0MsVUFBVXNGLEVBQVMsS0FBTSxXQU8xRixPQUFPQSxFQUFRNEwsU0FDWCxJQUFLLE1BQ0R4VSxLQUFLd0csS0FBSyxRQUFTb0MsRUFBUWtMLE9BQU8sR0FBSWxMLEVBQVFrTCxPQUFPLEdBQUdzQyxNQUFNLE1BQzlELE1BRUosSUFBSyxNQUNELE1BR0osSUFBSyxPQUNELElBQUkyQixFQUFPblAsRUFBUTJMLE9BQU82QixNQUFNLEtBQUssR0FFakN0SCxFQUFFMEksWUFBWXhYLEtBQUt5WCxnQkFBa0J6WCxLQUFLZ1QsV0FBYStFLElBQ3ZEL1gsS0FBS3lTLFdBQWFnQixFQUNsQnpULEtBQUt1UixTQUFTOVIsS0FBS2dVLEdBQ25CelQsS0FBS3FULElBQUl3QixLQUFLLFVBQVVwQixLQUN4QnpULEtBQUt3RyxLQUFLLE9BQVFpTixFQUFTc0UsR0FBTSxJQUlqQy9YLEtBQUtnVCxXQUFhK0UsR0FDbEIvWCxLQUFLd0csS0FBSyxPQUFRaU4sRUFBU3NFLEdBQU0sR0FFckMsTUFHSixJQUFLLE9BQ0QsSUFVUXhPLEVBVkp5TyxHQUFTLEVBQ1RELEVBQU9uUCxFQUFRMkwsT0FBTzZCLE1BQU0sS0FBSyxHQUVqQ3BXLEtBQUtnVCxXQUFhK0UsSUFDbEJDLEdBQVMsRUFDTGhZLEtBQUtpVCxVQUFVUSxXQUFtQnpULEtBQUtpVCxVQUFVUSxJQUd0QyxLQURYbEssRUFBUXZKLEtBQUt1UixTQUFTMEcsUUFBUXhFLEtBQ2R6VCxLQUFLdVIsU0FBUzdDLE9BQU9uRixFQUFPLElBR2pDLEtBRFhBLEVBQVF2SixLQUFLc1IsS0FBS0MsU0FBUzBHLFFBQVF4RSxLQUNuQnpULEtBQUtzUixLQUFLQyxTQUFTN0MsT0FBT25GLEVBQU8sR0FFckR2SixLQUFLcVQsSUFBSXdCLEtBQUssUUFBUXBCLEtBQ3RCelQsS0FBS3dHLEtBQUssZUFBZ0IsT0FJOUJ4RyxLQUFLd0csS0FBSyxPQUFRaU4sRUFBU3NFLEVBQU1DLEdBQ2pDLE1BR0osSUFBSyxVQUNHRCxFQUFPblAsRUFBUTJMLE9BQU82QixNQUFNLEtBQUssR0FDckNwVyxLQUFLcVQsSUFBSXdCLEtBQUssY0FBY2tELE9BQVVoRSxLQUdqQ25MLEVBQVFxTCxLQUFLMEQsZUFBZSxjQUFlL08sRUFBUXFMLEtBQUtqQixTQUFXK0UsR0FDeEVuUCxFQUFRcUwsS0FBSyxnQkFBa0IsVUFFL0IsSUFBSXRSLEVBQU9tTSxFQUFFMkUsUUFBUTdLLEVBQVFxTCxLQUFLakIsVUFFbENoVCxLQUFLMlUsTUFBTSxDQUFDLFVBQVcsV0FBWSxDQUMvQixDQUFDaFMsRUFBTWlHLEVBQVFxTCxLQUFNRixHQUFLLEtBRTlCLE1BRUosSUFBSyxVQUtELEdBSEFuTCxFQUFRcUwsS0FBS2pCLFNBQVdwSyxFQUFRMkwsT0FBTzZCLE1BQU0sS0FBSyxHQUdwQixRQUExQnhOLEVBQVFxTCxLQUFLakIsU0FBb0IsQ0FDakMsSUFBSXRRLEVBQU9vTSxFQUFFa0UsU0FBU2UsRUFBSXFDLE1BQU0sS0FBSyxJQUNqQzhCLEVBQVduRSxFQUFJcEQsU0FBUyxRQUU1QixHQUFJb0QsRUFBSXBELFNBQVMsbUJBQW9CLENBQ2pDLElBQUk3SixFQUFRZ0ksRUFBRXFKLGNBQWNwRSxHQUU1Qi9ULEtBQUt3RyxLQUFLLFNBQVVpTixFQUFTL1EsRUFBTW9FLEVBQU9vUixRQUlyQ25FLEVBQUlwRCxTQUFTLGdCQUNsQjNRLEtBQUt3RyxLQUFLLFNBQVVpTixFQUFTL1EsRUFBTSxFQUFHd1YsT0FJekMsQ0FFRCxJQUFJRSxFQUFnQnRKLEVBQUVzSixjQUFjckUsR0FDaENxRSxHQUNBeFAsRUFBUXFMLEtBQUssZ0JBQWtCLFNBQy9CalUsS0FBS3FULElBQUl3QixLQUFLLElBQUlwQixRQUFjN0ssRUFBUXFMLEtBQUtqQixjQUFjb0YsRUFBYyxNQUN6RXBZLEtBQUsyVSxNQUFNLENBQUMsU0FBVSxXQUFZLENBQzlCLENBQUNsQixFQUFTN0ssRUFBUXFMLEtBQU1tRSxFQUFjLElBQUksTUFJMUN4UCxFQUFRcUwsS0FBSzBELGVBQWUsUUFDNUIzWCxLQUFLd0csS0FBSyxRQUFTaU4sRUFBUzdLLEVBQVFxTCxLQUFNRixJQUsxQ25MLEVBQVFxTCxLQUFLLGdCQUFrQixPQUMvQmpVLEtBQUtxVCxJQUFJd0IsS0FBSyxJQUFJcEIsT0FBYTdLLEVBQVFxTCxLQUFLakIsY0FBY2UsS0FFMUQvVCxLQUFLMlUsTUFBTSxDQUFDLE9BQVEsV0FBWSxDQUM1QixDQUFDbEIsRUFBUzdLLEVBQVFxTCxLQUFNRixHQUFLLE1BSzdDLE1BRUosUUFDSS9ULEtBQUtxVCxJQUFJck0sS0FBSyw2QkFBNkIzRCxLQUFLQyxVQUFVc0YsRUFBUyxLQUFNLFNBT3pGK0YsRUFBT3JNLFVBQVVpVixRQUFVLFdBQ3ZCLE9BQU8sSUFBSXZTLFNBQVEsQ0FBQ0MsRUFBU0MsS0FDekJsRixLQUFLOFUsT0FBU2hHLEVBQUU1RyxJQUFJbEksS0FBS3NSLEtBQUtFLFdBQVdzRCxPQUFRLHlCQUNqRDlVLEtBQUsrVSxLQUFPakcsRUFBRTVHLElBQUlsSSxLQUFLc1IsS0FBS0UsV0FBV3VELEtBQU0sSUFHekMvVSxLQUFLb1MsU0FBVXBTLEtBQUsrVSxLQUFPLEtBQ2IsTUFBZC9VLEtBQUsrVSxPQUFnQi9VLEtBQUtvUyxRQUFTLEdBRXZDcFMsS0FBS21TLGVBQWlCblMsS0FBS21TLGVBQWlCblMsS0FBSytSLGVBQzdDL1IsS0FBS21TLGdCQUFrQm5TLEtBQUs2Uix1QkFDNUI3UixLQUFLbVMsZUFBaUJuUyxLQUFLNlIsc0JBSS9CN1IsS0FBS3FZLGtCQUNMclksS0FBSzhFLEtBQUssbUJBQW9CN0MsSUFDckJBLEVBQ0VpRCxFQUFPakQsR0FERmdELEVBQVEsQ0FBQ2pGLEtBQUs4VSxTQUFVOVUsS0FBSytVLGNBT3JEcEcsRUFBT3JNLFVBQVUrVixnQkFBa0IsV0FDL0JyWSxLQUFLa1IsR0FBSyxJQUFJQSxFQUFHLEdBQUdsUixLQUFLb1MsT0FBUyxNQUFRLFVBQVVwUyxLQUFLOFUsVUFBVTlVLEtBQUsrVSxRQUFTLE9BRWpGL1UsS0FBS2tSLEdBQUdvSCxVQUFZdFksS0FBS3VZLFdBQVdoUixLQUFLdkgsTUFDekNBLEtBQUtrUixHQUFHc0gsUUFBVXhZLEtBQUt5WSxTQUFTbFIsS0FBS3ZILE1BQ3JDQSxLQUFLa1IsR0FBR3dILFFBQVUxWSxLQUFLMlksU0FBU3BSLEtBQUt2SCxNQUNyQ0EsS0FBS2tSLEdBQUcwSCxPQUFTNVksS0FBSzZZLFFBQVF0UixLQUFLdkgsT0FLdkMyTyxFQUFPck0sVUFBVXVXLFFBQVUsV0FDbkIvSixFQUFFK0UsT0FBTzdULEtBQUtrUixLQUE4QixJQUF2QmxSLEtBQUtrUixHQUFHbEIsYUFJakNoUSxLQUFLcVQsSUFBSXdCLEtBQUssaUJBQWlCN1UsS0FBSzhVLGtCQUFrQjlVLEtBQUsrVSxVQUMzRC9VLEtBQUt3RyxLQUFLLGFBQWN4RyxLQUFLOFUsU0FBVTlVLEtBQUsrVSxNQUU1Qy9VLEtBQUtnVCxTQUFXbEUsRUFBRTVHLElBQUlsSSxLQUFLc1IsS0FBS0csU0FBU3VCLFNBQVVsRSxFQUFFZ0ssYUFDckQ5WSxLQUFLK1ksU0FBV2pLLEVBQUVpSyxTQUFTakssRUFBRTVHLElBQUlsSSxLQUFLc1IsS0FBS0csU0FBU3NILFNBQVUsZUFHOUQvWSxLQUFLcVQsSUFBSXdCLEtBQUssc0NBQ2Q3VSxLQUFLd0csS0FBSyxTQUdWeEcsS0FBS2tSLEdBQUdmLEtBQUssbUVBQ2JuUSxLQUFLa1IsR0FBR2YsS0FBSyxRQUFRblEsS0FBSytZLFlBQzFCL1ksS0FBS2tSLEdBQUdmLEtBQUssUUFBUW5RLEtBQUtnVCxjQUk5QnJFLEVBQU9yTSxVQUFVaVcsV0FBYSxTQUFvQlMsR0FDbENBLEVBQU16VixLQUFLNlMsTUFBTSxRQUV2QjVKLFNBQVN5TSxJQUNObkssRUFBRStFLE9BQU9vRixJQUFRalosS0FBSzRULGNBQWM1QyxFQUFNK0MsSUFBSWtGLFFBSzNEdEssRUFBT3JNLFVBQVVtVyxTQUFXLFdBQ3hCelksS0FBSzRTLFdBQWEsR0FDbEI1UyxLQUFLaVQsVUFBWSxHQUNqQmpULEtBQUt3UyxnQkFBa0IsR0FHdkIyQyxjQUFjblYsS0FBSzZTLFVBQ25CK0IsYUFBYTVVLEtBQUs4UyxhQUVsQjlTLEtBQUsrUyxPQUFVakUsRUFBRStFLE9BQU83VCxLQUFLa1IsSUFBNkIscUJBQXZCLHFCQUVuQ2xSLEtBQUsyVSxNQUFNLENBQUMsa0JBQW1CLGdCQUFpQixDQUFDLENBQUMzVSxLQUFLK1MsVUFHbkQvUyxLQUFLOFIsV0FBYTlSLEtBQUtrUyxnQkFBa0JsUyxLQUFLMlIsdUJBQzlDM1IsS0FBS3dHLEtBQUssZ0JBQ1Z4RyxLQUFLcVQsSUFBSTNLLE1BQU0sMkNBRWYxSSxLQUFLOFIsWUFBYzlSLEtBQUtpUyxjQUFnQmpTLEtBQUtrUyxlQUFpQmxTLEtBQUsyUixxQkFBcUIsSUFDeEYzUixLQUFLaVMsY0FBZSxFQUNwQmpTLEtBQUtrUyxjQUFnQmxTLEtBQUtrUyxjQUFjLEVBQ3hDbFMsS0FBS3FULElBQUkzSyxNQUFNLG1CQUFtQjJILEtBQUtDLE1BQU10USxLQUFLbVMsZUFBaUIsa0JBQ25FblMsS0FBS3dHLEtBQUssYUFDVnlPLFlBQVcsS0FBUWpWLEtBQUtpUyxjQUFlLEVBQU9qUyxLQUFLdVgsWUFBY3ZYLEtBQUttUyxpQkFHMUVuUyxLQUFLa1IsR0FBSyxNQUlkdkMsRUFBT3JNLFVBQVVxVyxTQUFXLFdBQ3hCM1ksS0FBSzRTLFdBQWEsR0FDbEI1UyxLQUFLaVQsVUFBWSxHQUNqQmpULEtBQUt3UyxnQkFBa0IsR0FHdkIyQyxjQUFjblYsS0FBSzZTLFVBQ25CK0IsYUFBYTVVLEtBQUs4UyxhQUdkOVMsS0FBS2tULGdCQUNMbFQsS0FBS2tULGdCQUFpQixFQUN0QmxULEtBQUsrUyxPQUFTLHFCQUNkL1MsS0FBS3FULElBQUl3QixLQUFLN1UsS0FBSytTLFFBQ25CL1MsS0FBSzJVLE1BQU0sQ0FBQyxrQkFBbUIscUJBQXNCLGdCQUFpQixDQUFDLENBQUMzVSxLQUFLK1MsUUFBUyxDQUFDLE1BQU8sQ0FBQy9TLEtBQUsrUyxZQUlwRy9TLEtBQUsyVSxNQUFNLENBQUMsa0JBQW1CLGdCQUFpQixDQUFDLENBQUMzVSxLQUFLK1MsVUFHbkQvUyxLQUFLOFIsV0FBYTlSLEtBQUtrUyxnQkFBa0JsUyxLQUFLMlIsdUJBQzlDM1IsS0FBS3dHLEtBQUssZ0JBQ1Z4RyxLQUFLcVQsSUFBSTNLLE1BQU0sMkNBRWYxSSxLQUFLOFIsWUFBYzlSLEtBQUtpUyxjQUFnQmpTLEtBQUtrUyxlQUFpQmxTLEtBQUsyUixxQkFBcUIsSUFDeEYzUixLQUFLaVMsY0FBZSxFQUNwQmpTLEtBQUtrUyxjQUFnQmxTLEtBQUtrUyxjQUFjLEVBQ3hDbFMsS0FBS3FULElBQUkzSyxNQUFNLGdEQUFnRDJILEtBQUtDLE1BQU10USxLQUFLbVMsZUFBaUIsa0JBQ2hHblMsS0FBS3dHLEtBQUssYUFDVnlPLFlBQVcsS0FBUWpWLEtBQUtpUyxjQUFlLEVBQU9qUyxLQUFLdVgsWUFBY3ZYLEtBQUttUyxrQkFJOUVuUyxLQUFLa1IsR0FBSyxNQUlkdkMsRUFBT3JNLFVBQVU0VyxpQkFBbUIsV0FDaEMsT0FBSWxaLEtBQUt1UyxnQkFBa0IsSUFBYyxJQUMzQnZTLEtBQUt1UyxlQUFpQixLQUl4QzVELEVBQU9yTSxVQUFVNlcsYUFBZSxTQUFzQkMsRUFBTzNGLEVBQVNlLEVBQVM2RSxHQUUzRSxPQUFPLElBQUlyVSxTQUFRLENBQUNDLEVBQVNDLEtBRXpCLEdBQUk0SixFQUFFK0UsT0FBTzdULEtBQUtrUixLQUE4QixJQUF2QmxSLEtBQUtrUixHQUFHbEIsV0FFN0IsT0FBTzlLLEVBQU8sNEJBT2xCLEdBTDBCLGlCQUFWa1UsR0FDWnRLLEVBQUV3SyxhQUFhRixHQUFPRyxNQUFLLEtBQVFyVSxFQUFPLCtCQUl6QzRKLEVBQUUrRSxPQUFPSixHQVFWelQsS0FBS3FULElBQUl3QixLQUFLLHNCQUFzQkwsS0FDcEN4VSxLQUFLa1IsR0FBR2YsS0FBS3FFLE9BVE8sQ0FDcEIsSUFBSWdGLEVBQU8xSyxFQUFFMkUsUUFBUUEsR0FDckJ6VCxLQUFLcVQsSUFBSXdCLEtBQUssSUFBSTJFLHlCQUE0QmhGLEtBQzlDeFUsS0FBS2tSLEdBQUdmLEtBQUssV0FBV3FKLE1BQVNoRixLQVFyQzZFLEVBQUdwVSxFQUFTQyxPQUtwQnlKLEVBQU9yTSxVQUFVbVgsYUFBZSxTQUFzQkwsRUFBTzNGLEVBQVM3SyxFQUFTeVEsR0FFM0UsT0FBTyxJQUFJclUsU0FBUSxDQUFDQyxFQUFTQyxLQUV6QixHQUFJNEosRUFBRStFLE9BQU83VCxLQUFLa1IsS0FBOEIsSUFBdkJsUixLQUFLa1IsR0FBR2xCLFdBQzdCLE9BQU85SyxFQUFPLDRCQUViLEdBQUk0SixFQUFFMEksWUFBWXhYLEtBQUt5WCxlQUN4QixPQUFPdlMsRUFBTyxtQ0FFbEIsSUFBSXNVLEVBQU8xSyxFQUFFMkUsUUFBUUEsR0FJckIsR0FIS3pULEtBQUtpVCxVQUFVdUcsS0FBU3haLEtBQUtpVCxVQUFVdUcsR0FBUSxJQUdoRDVRLEVBQVFqSSxRQUFVLElBQUssQ0FDdkIsSUFBSW9ULEVBQU1qRixFQUFFNEssVUFBVTlRLEVBQVMsS0FDL0JBLEVBQVVtTCxFQUFJLEdBRWRrQixZQUFXLEtBQ1BqVixLQUFLeVosYUFBYUwsRUFBTzNGLEVBQVNNLEVBQUksSUFBSSxXQUMzQyxLQUdQL1QsS0FBS2tSLEdBQUdmLEtBQUssV0FBV3FKLE1BQVM1USxLQUVqQyxJQUFJeUosRUFBUyxHQUdiOVEsT0FBT3NJLEtBQUs3SixLQUFLc1MsV0FBVzlGLFNBQVM3TSxJQUNqQ0ssS0FBS3NTLFVBQVUzUyxHQUFJNk0sU0FBUSxTQUFTbU4sR0FDaEMsR0FBSTdLLEVBQUU4SyxRQUFRRCxFQUFNeFAsTUFBUyxPQUFPNkcsRUFBTTZJLFdBQVdqUixFQUFTK1EsRUFBTXhQLEtBQU13UCxFQUFNaGEsR0FBSTBTLEdBQ3BGckIsRUFBTThJLFlBQVlsUixFQUFTK1EsRUFBTXhQLEtBQU13UCxFQUFNaGEsR0FBSTBTLFNBS3pELElBQUlZLEVBQVluRSxFQUFFSyxNQUFNblAsS0FBS2lULFVBQVV1RyxHQUFPeEksRUFBTXFCLE9BQU8sQ0FBRUEsT0FBUXJCLEVBQU0rSSxnQkFBZ0IxSCxJQUFXLFFBR2xHK0YsRUFBZ0J0SixFQUFFc0osY0FBY3hQLEdBQ2hDd1AsR0FDQW5GLEVBQVUsZ0JBQWtCLFNBQzVCalQsS0FBS3FULElBQUl3QixLQUFLLElBQUkyRSxRQUFXeFosS0FBS3lYLG1CQUFtQlcsRUFBYyxNQUNuRXBZLEtBQUsyVSxNQUFNLENBQUMsU0FBVSxXQUFZLENBQzlCLENBQUM2RSxFQUFNdkcsRUFBV21GLEVBQWMsSUFBSSxPQU14Q25GLEVBQVUsZ0JBQWtCLE9BQzVCalQsS0FBS3FULElBQUl3QixLQUFLLElBQUkyRSxPQUFVeFosS0FBS3lYLG1CQUFtQjdPLEtBQ3BENUksS0FBSzJVLE1BQU0sQ0FBQyxPQUFRLFdBQVksQ0FDNUIsQ0FBQzZFLEVBQU12RyxFQUFXckssR0FBUyxNQUduQ3lRLEVBQUdwVSxFQUFTQyxPQUtwQnlKLEVBQU9yTSxVQUFVb1YsZ0JBQWtCLFNBQXlCc0MsR0FDeERoYSxLQUFLcVMsT0FBUzJILEVBRWRoYSxLQUFLNFEsSUFBSSxDQUNMeEcsSUFBSyxtQ0FBbUM0UCxJQUN4Q3hLLFFBQVMsQ0FDTCxjQUFpQixTQUFTVixFQUFFaUssU0FBU2pLLEVBQUU1RyxJQUFJbEksS0FBS3NSLEtBQUtHLFNBQVNzSCxTQUFVLEtBQUtrQixRQUFRLFNBQVUsTUFDL0YsWUFBYWphLEtBQUswUixZQUV2QixDQUFDelAsRUFBS2lZLEVBQUsxSixLQUNWLElBQUt2TyxFQUVELE9BREFqQyxLQUFLc1MsVUFBWTlCLEVBQW9CLGVBQUssR0FDbkN4USxLQUFLd0csS0FBSyxZQUFhd1QsRUFBTWhhLEtBQUtzUyxXQUU3QzJDLFlBQVcsS0FBUWpWLEtBQUswWCxnQkFBZ0JzQyxLQUFVLFNBSzFEckwsRUFBT3JNLFVBQVVtVixZQUFjLFdBQzNCLE9BQU96WCxLQUFLZ1QsVUFJaEJyRSxFQUFPck0sVUFBVTZYLFdBQWEsV0FDMUIsT0FBT25hLEtBQUtzUixNQUloQjNDLEVBQU9yTSxVQUFVOFgsWUFBYyxXQUMzQixPQUFPcGEsS0FBS3VSLFVBSWhCNUMsRUFBT3JNLFVBQVUrWCxNQUFRLFNBQWU1RyxFQUFTVCxHQUM3QyxJQUFJd0csRUFBTzFLLEVBQUUyRSxRQUFRQSxHQUVyQixPQURLelQsS0FBSzRTLFdBQVc0RyxLQUFTeFosS0FBSzRTLFdBQVc0RyxHQUFRLElBQy9DeFosS0FBSzRTLFdBQVc0RyxHQUFNN0ksU0FBUzdCLEVBQUVrRSxTQUFTQSxLQUlyRHJFLEVBQU9yTSxVQUFVME4sV0FBYSxXQUMxQixPQUFJbEIsRUFBRStFLE9BQU83VCxLQUFLa1IsSUFBYyxTQUN6QixDQUFDLGFBQWMsT0FBUSxVQUFXLFVBQVVsUixLQUFLa1IsR0FBR2xCLGFBSS9EckIsRUFBT3JNLFVBQVVnVixXQUFhLFdBQzFCLE9BQU8sSUFBSXRTLFNBQVEsQ0FBQ0MsRUFBU0MsS0FDcEI0SixFQUFFK0UsT0FBTzdULEtBQUtrUixLQUE4QixJQUF2QmxSLEtBQUtrUixHQUFHbEIsWUFNOUJoUSxLQUFLcVQsSUFBSTNLLE1BQU0seUZBQ2Z4RCxFQUFPLDJGQU5QbEYsS0FBS2tULGdCQUFpQixFQUN0QmxULEtBQUtxVCxJQUFJd0IsS0FBSywrQkFDZDdVLEtBQUtrUixHQUFHZ0UsUUFDUmxWLEtBQUs4RSxLQUFLLHNCQUFzQixLQUFRRyxFQUFRLENBQUNqRixLQUFLOFUsU0FBVTlVLEtBQUsrVSxlQVM1Q3JWLEVBQU9FLFVBQ3hDRixFQUFPRSxRQUFVK08sR0FFQyxvQkFBWDVELFNBQ1BBLE9BQU91UCxJQUFNLEdBQ2J2UCxPQUFPdVAsSUFBSTNMLE9BQVNBLEVBQ3BCNUQsT0FBT3VQLElBQUkxTCxPQUFTRCxJLGNDcHlDeEIsSUFBSUcsRUFBSSxFQUFRLElBR2hCLFNBQVN5TCxFQUFjOUcsRUFBUytHLEdBSzVCLE9BSkEvRyxFQUFVM0UsRUFBRTJFLFFBQVFBLEdBQ3BCK0csRUFBVTFMLEVBQUU1RyxJQUFJc1MsRUFBUyxJQUdsQnhhLEtBQUttWixhQUFhblosS0FBS2taLG1CQUFvQnpGLEVBQVMsY0FBYytHLEtBQVcsQ0FBQ3ZWLEVBQVNDLEtBRTFGbEYsS0FBSzhFLEtBQUsscUJBQXNCN0MsSUFDdkJBLEVBQ0VpRCxFQUFPakQsR0FERmdELEVBQVEsQ0FBQ3dPLElBQVcrRyxVQU81QyxTQUFTQyxFQUFpQmhILEdBSXRCLE9BSEFBLEVBQVUzRSxFQUFFMkUsUUFBUUEsR0FHYnpULEtBQUttWixhQUFhblosS0FBS2taLG1CQUFvQnpGLEVBQVMsaUJBQWlCLENBQUN4TyxFQUFTQyxLQUVsRmxGLEtBQUs4RSxLQUFLLHdCQUF5QjdDLElBQzFCQSxFQUNFaUQsRUFBT2pELEdBREZnRCxFQUFRLENBQUN3TyxVQU9qQyxTQUFTRixFQUFLRSxHQUlWLE9BSEFBLEVBQVUzRSxFQUFFMkUsUUFBUUEsR0FHYnpULEtBQUttWixhQUFhblosS0FBS2taLG1CQUFvQixLQUFNLFFBQVF6RixLQUFXLENBQUN4TyxFQUFTQyxLQUVqRmxGLEtBQUs4RSxLQUFLLGdCQUFpQjdDLElBQ2xCQSxFQUNFaUQsRUFBT2pELEdBREZnRCxFQUFRLENBQUN3TyxVQU9qQyxTQUFTaUgsRUFBUWpILEdBSWIsT0FIQUEsRUFBVTNFLEVBQUUyRSxRQUFRQSxHQUdielQsS0FBS21aLGFBQWFuWixLQUFLa1osbUJBQW9CekYsRUFBUyxZQUFZLENBQUN4TyxFQUFTQyxLQUU3RWxGLEtBQUs4RSxLQUFLLG1CQUFvQjdDLElBQ3JCQSxFQUNFaUQsRUFBT2pELEdBREZnRCxFQUFRLENBQUN3TyxVQU9qQyxTQUFTa0gsRUFBV2xILEdBSWhCLE9BSEFBLEVBQVUzRSxFQUFFMkUsUUFBUUEsR0FHYnpULEtBQUttWixhQUFhblosS0FBS2taLG1CQUFvQnpGLEVBQVMsZUFBZSxDQUFDeE8sRUFBU0MsS0FFaEZsRixLQUFLOEUsS0FBSyxzQkFBdUI3QyxJQUN4QkEsRUFDRWlELEVBQU9qRCxHQURGZ0QsRUFBUSxDQUFDd08sVUFPakMsU0FBU21FLEVBQUtuRSxFQUFTbUgsR0FLbkIsT0FKQW5ILEVBQVUzRSxFQUFFMkUsUUFBUUEsR0FDcEJtSCxFQUFVOUwsRUFBRTVHLElBQUkwUyxFQUFTLEtBR2xCNWEsS0FBS21aLGFBQWFuWixLQUFLa1osbUJBQW9CekYsRUFBUyxTQUFTbUgsS0FBVyxDQUFDM1YsRUFBU0MsS0FFckZsRixLQUFLOEUsS0FBSyxnQkFBaUI3QyxJQUNsQkEsRUFDRWlELEVBQU9qRCxHQURGZ0QsRUFBUSxDQUFDd08sSUFBV21ILFVBTzVDLFNBQVNDLEVBQVFwSCxHQUliLE9BSEFBLEVBQVUzRSxFQUFFMkUsUUFBUUEsR0FHYnpULEtBQUttWixhQUFhblosS0FBS2taLG1CQUFvQnpGLEVBQVMsWUFBWSxDQUFDeE8sRUFBU0MsS0FFN0VsRixLQUFLOEUsS0FBSyxtQkFBb0I3QyxJQUNyQkEsRUFDRWlELEVBQU9qRCxHQURGZ0QsRUFBUSxDQUFDd08sVUFNakMvVCxFQUFPRSxRQUFVLENBRWJrYixPQUFRLFNBQWdCckgsRUFBUzdLLEdBSzdCLE9BSkE2SyxFQUFVM0UsRUFBRTJFLFFBQVFBLEdBQ3BCN0ssRUFBVSxXQUFnQkEsS0FHbkI1SSxLQUFLeVosYUFBYXpaLEtBQUtrWixtQkFBb0J6RixFQUFTN0ssR0FBUyxDQUFDM0QsRUFBU0MsS0FHMUVELEVBQVEsQ0FBQ3dPLEVBQVM3SyxRQUsxQm1TLElBQUssU0FBYXRILEVBQVNULEVBQVVELEdBTWpDLE9BTEFVLEVBQVUzRSxFQUFFMkUsUUFBUUEsR0FDcEJULEVBQVdsRSxFQUFFa0UsU0FBU0EsR0FDdEJELEVBQVNqRSxFQUFFNUcsSUFBSTZLLEVBQVEsSUFHaEIvUyxLQUFLbVosYUFBYW5aLEtBQUtrWixtQkFBb0J6RixFQUFTLFFBQVFULEtBQVlELEtBQVUsQ0FBQzlOLEVBQVNDLEtBRS9GbEYsS0FBSzhFLEtBQUssZUFBZ0I3QyxJQUNqQkEsRUFDRWlELEVBQU9qRCxHQURGZ0QsRUFBUSxDQUFDd08sRUFBU1QsRUFBVUQsV0FPcERpSSxNQUFPLFNBQWV2SCxHQUlsQixPQUhBQSxFQUFVM0UsRUFBRTJFLFFBQVFBLEdBR2J6VCxLQUFLbVosYUFBYW5aLEtBQUtrWixtQkFBb0J6RixFQUFTLFVBQVUsQ0FBQ3hPLEVBQVNDLEtBRTNFbEYsS0FBSzhFLEtBQUssaUJBQWtCN0MsSUFDbkJBLEVBQ0VpRCxFQUFPakQsR0FERmdELEVBQVEsQ0FBQ3dPLFdBT2pDd0gsTUFBTyxTQUFleEgsRUFBU3lILEdBSTNCLE9BSEFBLEVBQVdwTSxFQUFFNUcsSUFBSWdULEVBQVV6SCxHQUdwQnpULEtBQUttWixhQUFhblosS0FBS2taLG1CQUFvQixTQUFVLFVBQVVnQyxLQUFZLENBQUNqVyxFQUFTQyxLQUV4RmxGLEtBQUs4RSxLQUFLLGlCQUFrQjdDLElBQ25CQSxFQUNFaUQsRUFBT2pELEdBREZnRCxFQUFRLENBQUNpVyxXQU9qQ0MsV0FBWSxTQUFvQjFILEVBQVNtSCxHQUtyQyxPQUpBbkgsRUFBVTNFLEVBQUUyRSxRQUFRQSxHQUNwQm1ILEVBQVU5TCxFQUFFNUcsSUFBSTBTLEVBQVMsSUFHbEI1YSxLQUFLbVosYUFBYW5aLEtBQUtrWixtQkFBb0J6RixFQUFTLGVBQWVtSCxLQUFXLENBQUMzVixFQUFTQyxLQUUzRmxGLEtBQUs4RSxLQUFLLHNCQUF1QjdDLElBQ3hCQSxFQUNFaUQsRUFBT2pELEdBREZnRCxFQUFRLENBQUN3TyxJQUFXbUgsV0FRNUNRLGNBQWUsU0FBdUIzSCxFQUFTNEgsR0FJM0MsT0FIQTVILEVBQVUzRSxFQUFFMkUsUUFBUUEsR0FHYnpULEtBQUttWixhQUFhblosS0FBS2taLG1CQUFvQnpGLEVBQVMsV0FBVzRILEtBQWUsQ0FBQ3BXLEVBQVNDLEtBRTNGbEYsS0FBSzhFLEtBQUsseUJBQTBCN0MsSUFDM0JBLEVBQ0VpRCxFQUFPakQsR0FERmdELEVBQVEsQ0FBQ3dPLFdBT2pDNkgsVUFBVyxTQUFtQjdILEdBSTFCLE9BSEFBLEVBQVUzRSxFQUFFMkUsUUFBUUEsR0FHYnpULEtBQUttWixhQUFhblosS0FBS2taLG1CQUFvQnpGLEVBQVMsY0FBYyxDQUFDeE8sRUFBU0MsS0FFL0VsRixLQUFLOEUsS0FBSyxxQkFBc0I3QyxJQUN2QkEsRUFDRWlELEVBQU9qRCxHQURGZ0QsRUFBUSxDQUFDd08sV0FPakM4SCxhQUFjLFNBQXNCOUgsR0FJaEMsT0FIQUEsRUFBVTNFLEVBQUUyRSxRQUFRQSxHQUdielQsS0FBS21aLGFBQWFuWixLQUFLa1osbUJBQW9CekYsRUFBUyxpQkFBaUIsQ0FBQ3hPLEVBQVNDLEtBRWxGbEYsS0FBSzhFLEtBQUssd0JBQXlCN0MsSUFDMUJBLEVBQ0VpRCxFQUFPakQsR0FERmdELEVBQVEsQ0FBQ3dPLFdBT2pDOEcsY0FBZUEsRUFHZmlCLGNBQWVqQixFQUdmRSxpQkFBa0JBLEVBR2xCZ0IsaUJBQWtCaEIsRUFHbEJpQixLQUFNLFNBQWNqSSxFQUFTdlAsR0FLekIsT0FKQXVQLEVBQVUzRSxFQUFFMkUsUUFBUUEsR0FDcEJ2UCxFQUFTNEssRUFBRWtFLFNBQVM5TyxHQUdibEUsS0FBS21aLGFBQWEsSUFBTTFGLEVBQVMsU0FBU3ZQLEtBQVUsQ0FBQ2UsRUFBU0MsS0FFakVsRixLQUFLOEUsS0FBSyxnQkFBZ0IsQ0FBQzdDLEVBQUswWixLQUN2QjFaLEVBQ0VpRCxFQUFPakQsR0FERmdELEVBQVEsQ0FBQ3dPLEVBQVN2UCxJQUFVeVgsV0FPcER0YixLQUFNLFNBQWNvVCxHQUloQixPQUhBQSxFQUFVM0UsRUFBRTJFLFFBQVFBLEdBR2J6VCxLQUFLbVosYUFBYSxLQUFNLEtBQU0sUUFBUTFGLEtBQVcsQ0FBQ3hPLEVBQVNDLEtBQzlELElBQUkwVyxFQUFZLGVBQ1pDLEdBQWUsRUFDZmpXLEVBQVcsQ0FBQzNELEVBQUs2WixLQUNickksSUFBWTNFLEVBQUUyRSxRQUFRcUksS0FFdEI5YixLQUFLcUYsZUFBZXVXLEVBQVdoVyxHQUMvQmlXLEdBQWUsRUFDVjVaLEVBQ0VpRCxFQUFPakQsR0FERmdELEVBQVEsQ0FBQ3dPLE1BSTdCelQsS0FBS2lKLEdBQUcyUyxFQUFXaFcsR0FFbkIsSUFBSXdULEVBQVFwWixLQUFLa1osbUJBQ2pCcEssRUFBRXdLLGFBQWFGLEdBQU9HLE1BQUssS0FDbEJzQyxHQUNEN2IsS0FBS3dHLEtBQUtvVixFQUFXLDJCQUE0Qm5JLFVBT2pFc0ksSUFBSyxTQUFhdEksRUFBU1QsR0FLdkIsT0FKQVMsRUFBVTNFLEVBQUUyRSxRQUFRQSxHQUNwQlQsRUFBV2xFLEVBQUVrRSxTQUFTQSxHQUdmaFQsS0FBS21aLGFBQWFuWixLQUFLa1osbUJBQW9CekYsRUFBUyxRQUFRVCxLQUFZLENBQUMvTixFQUFTQyxLQUVyRmxGLEtBQUs4RSxLQUFLLGVBQWdCN0MsSUFDakJBLEVBQ0VpRCxFQUFPakQsR0FERmdELEVBQVEsQ0FBQ3dPLEVBQVNULFdBTzFDbUQsS0FBTSxTQUFjMUMsR0FJaEIsT0FIQUEsRUFBVTNFLEVBQUUyRSxRQUFRQSxHQUdielQsS0FBS21aLGFBQWFuWixLQUFLa1osbUJBQW9CekYsRUFBUyxTQUFTLENBQUN4TyxFQUFTQyxLQUUxRWxGLEtBQUs4RSxLQUFLLGdCQUFnQixDQUFDN0MsRUFBS2tVLEtBQ3ZCbFUsRUFPSWlELEVBQU9qRCxJQUxaa1UsRUFBSzNKLFNBQVN3RyxJQUNMaFQsS0FBSzRTLFdBQVdhLEtBQVl6VCxLQUFLNFMsV0FBV2EsR0FBVyxJQUN2RHpULEtBQUs0UyxXQUFXYSxHQUFTOUMsU0FBU3FDLElBQWFoVCxLQUFLNFMsV0FBV2EsR0FBU2hVLEtBQUt1VCxNQUV0Ri9OLEVBQVFrUixXQU94QjVDLEtBQU1BLEVBR055SSxNQUFPekksRUFHUDBJLEtBQU0sV0FFRixPQUFPamMsS0FBS21aLGFBQWFuWixLQUFLa1osbUJBQW9CLEtBQU0sUUFBUSxDQUFDalUsRUFBU0MsS0FFdEVsRixLQUFLMFMsUUFBVSxJQUFJQyxLQUNuQjNTLEtBQUs4UyxZQUFjbUMsWUFBVyxLQUNWLE9BQVpqVixLQUFLa1IsS0FDTGxSLEtBQUtrVCxnQkFBaUIsRUFDdEJsVCxLQUFLcVQsSUFBSTNLLE1BQU0saUJBQ2YxSSxLQUFLa1IsR0FBR2dFLFFBRVJDLGNBQWNuVixLQUFLNlMsVUFDbkIrQixhQUFhNVUsS0FBSzhTLGdCQUV2QmhFLEVBQUU1RyxJQUFJbEksS0FBS3NSLEtBQUtFLFdBQVc0RCxRQUFTLE9BR3ZDcFYsS0FBSzhFLEtBQUssZ0JBQWlCNE4sSUFBY3pOLEVBQVEsQ0FBQ2lYLFdBQVd4SixZQUtyRWdJLFFBQVNBLEVBR1R5QixRQUFTekIsRUFHVEMsV0FBWUEsRUFHWnlCLFdBQVl6QixFQUdaMEIsSUFBSyxTQUFhelQsR0FFZCxPQUFPNUksS0FBS21aLGFBQWFuWixLQUFLa1osbUJBQW9CLEtBQU10USxHQUFTLENBQUMzRCxFQUFTQyxLQUN2RUQsRUFBUSxDQUFDMkQsUUFLakIwVCxJQUFLLFNBQWE3SSxFQUFTN0ssR0FHdkIsT0FGQTZLLEVBQVUzRSxFQUFFMkUsUUFBUUEsR0FFZjdLLEVBQVEyVCxXQUFXLE9BQVMzVCxFQUFRMlQsV0FBVyxPQUFVM1QsRUFBUTJULFdBQVcsTUFBUTNULEVBQVEyVCxXQUFXLE1BRTNFLFFBQXpCM1QsRUFBUTRULE9BQU8sRUFBRyxHQUNYeGMsS0FBSzhhLE9BQU9ySCxFQUFTN0ssRUFBUTRULE9BQU8sSUFJcEN4YyxLQUFLbVosYUFBYW5aLEtBQUtrWixtQkFBb0J6RixFQUFTN0ssR0FBUyxDQUFDM0QsRUFBU0MsS0FHMUVELEVBQVEsQ0FBQ3dPLEVBQVM3SyxPQU12QjVJLEtBQUt5WixhQUFhelosS0FBS2taLG1CQUFvQnpGLEVBQVM3SyxHQUFTLENBQUMzRCxFQUFTQyxLQUcxRUQsRUFBUSxDQUFDd08sRUFBUzdLLFFBSzFCZ1AsS0FBTUEsRUFHTjZFLFNBQVU3RSxFQUdWaUQsUUFBU0EsRUFHVDZCLFlBQWE3QixFQUdiOEIsWUFBYSxTQUFxQmxKLEdBSTlCLE9BSEFBLEVBQVUzRSxFQUFFMkUsUUFBUUEsR0FHYnpULEtBQUttWixhQUFhblosS0FBS2taLG1CQUFvQnpGLEVBQVMsZ0JBQWdCLENBQUN4TyxFQUFTQyxLQUVqRmxGLEtBQUs4RSxLQUFLLHVCQUF3QjdDLElBQ3pCQSxFQUNFaUQsRUFBT2pELEdBREZnRCxFQUFRLENBQUN3TyxXQU9qQ21KLGVBQWdCLFNBQXdCbkosR0FJcEMsT0FIQUEsRUFBVTNFLEVBQUUyRSxRQUFRQSxHQUdielQsS0FBS21aLGFBQWFuWixLQUFLa1osbUJBQW9CekYsRUFBUyxtQkFBbUIsQ0FBQ3hPLEVBQVNDLEtBRXBGbEYsS0FBSzhFLEtBQUssMEJBQTJCN0MsSUFDNUJBLEVBQ0VpRCxFQUFPakQsR0FERmdELEVBQVEsQ0FBQ3dPLFdBT2pDMkIsUUFBUyxTQUFpQjNCLEVBQVNULEVBQVU0SCxFQUFTN0gsR0FhbEQsT0FaQVUsRUFBVTNFLEVBQUUyRSxRQUFRQSxHQUNwQlQsRUFBV2xFLEVBQUVrRSxTQUFTQSxHQUVqQmxFLEVBQUUrRSxPQUFPK0csSUFBYTlMLEVBQUUrTixVQUFVakMsS0FDbkM3SCxFQUFTNkgsRUFDVEEsRUFBVSxLQUdkQSxFQUFVOUwsRUFBRTVHLElBQUkwUyxFQUFTLEtBQ3pCN0gsRUFBU2pFLEVBQUU1RyxJQUFJNkssRUFBUSxJQUdoQi9TLEtBQUttWixhQUFhblosS0FBS2taLG1CQUFvQnpGLEVBQVMsWUFBWVQsS0FBWTRILEtBQVc3SCxLQUFVLENBQUM5TixFQUFTQyxLQUU5R2xGLEtBQUs4RSxLQUFLLG1CQUFvQjdDLElBQ3JCQSxFQUNFaUQsRUFBT2pELEdBREZnRCxFQUFRLENBQUN3TyxFQUFTVCxJQUFZNEgsRUFBUzdILFdBTy9EK0osTUFBTyxTQUFlckosRUFBU1QsR0FLM0IsT0FKQVMsRUFBVTNFLEVBQUUyRSxRQUFRQSxHQUNwQlQsRUFBV2xFLEVBQUVrRSxTQUFTQSxHQUdmaFQsS0FBS21aLGFBQWFuWixLQUFLa1osbUJBQW9CekYsRUFBUyxVQUFVVCxLQUFZLENBQUMvTixFQUFTQyxLQUV2RmxGLEtBQUs4RSxLQUFLLGlCQUFrQjdDLElBQ25CQSxFQUNFaUQsRUFBT2pELEdBREZnRCxFQUFRLENBQUN3TyxFQUFTVCxXQU8xQytKLE9BQVEsU0FBZ0J0SixHQUlwQixPQUhBQSxFQUFVM0UsRUFBRTJFLFFBQVFBLEdBR2J6VCxLQUFLbVosYUFBYSxJQUFNMUYsRUFBUyxXQUFXLENBQUN4TyxFQUFTQyxLQUV6RGxGLEtBQUs4RSxLQUFLLGtCQUFtQjdDLElBQ3BCQSxFQUNFaUQsRUFBT2pELEdBREZnRCxFQUFRLENBQUN3TyxXQU9qQ3VKLE1BQU8sU0FBZXZKLEVBQVNULEdBSzNCLE9BSkFTLEVBQVUzRSxFQUFFMkUsUUFBUUEsR0FDcEJULEVBQVdsRSxFQUFFa0UsU0FBU0EsR0FHZmhULEtBQUttWixhQUFhblosS0FBS2taLG1CQUFvQnpGLEVBQVMsVUFBVVQsS0FBWSxDQUFDL04sRUFBU0MsS0FFdkZsRixLQUFLOEUsS0FBSyxpQkFBa0I3QyxJQUNuQkEsRUFDRWlELEVBQU9qRCxHQURGZ0QsRUFBUSxDQUFDd08sRUFBU1QsV0FPMUNpSyxNQUFPLFNBQWV4SixFQUFTVCxHQUszQixPQUpBUyxFQUFVM0UsRUFBRTJFLFFBQVFBLEdBQ3BCVCxFQUFXbEUsRUFBRWtFLFNBQVNBLEdBR2ZoVCxLQUFLbVosYUFBYW5aLEtBQUtrWixtQkFBb0J6RixFQUFTLFVBQVVULEtBQVksQ0FBQy9OLEVBQVNDLEtBRXZGbEYsS0FBSzhFLEtBQUssaUJBQWtCN0MsSUFDbkJBLEVBQ0VpRCxFQUFPakQsR0FERmdELEVBQVEsQ0FBQ3dPLEVBQVNULFdBTzFDa0ssSUFBSyxTQUFhekosRUFBU1QsR0FLdkIsT0FKQVMsRUFBVTNFLEVBQUUyRSxRQUFRQSxHQUNwQlQsRUFBV2xFLEVBQUVrRSxTQUFTQSxHQUdmaFQsS0FBS21aLGFBQWFuWixLQUFLa1osbUJBQW9CekYsRUFBUyxRQUFRVCxLQUFZLENBQUMvTixFQUFTQyxLQUVyRmxGLEtBQUs4RSxLQUFLLGVBQWdCN0MsSUFDakJBLEVBQ0VpRCxFQUFPakQsR0FERmdELEVBQVEsQ0FBQ3dPLEVBQVNULFdBTzFDdUQsS0FBTSxTQUFjOUMsR0FJaEIsT0FIQUEsRUFBVTNFLEVBQUUyRSxRQUFRQSxHQUdielQsS0FBS21aLGFBQWFuWixLQUFLa1osbUJBQW9CekYsRUFBUyxTQUFTLENBQUN4TyxFQUFTQyxLQUUxRWxGLEtBQUs4RSxLQUFLLGdCQUFnQixDQUFDN0MsRUFBS3NVLEtBQ3ZCdFUsRUFDRWlELEVBQU9qRCxHQURGZ0QsRUFBUXNSLFVBT2hDNEcsUUFBUyxTQUFpQm5LLEVBQVVwSyxHQUloQyxPQUhBb0ssRUFBV2xFLEVBQUVrRSxTQUFTQSxNQUdMaFQsS0FBS3lYLGNBQ1h6UyxRQUFRRSxPQUFPLDhDQUluQmxGLEtBQUttWixhQUFhblosS0FBS2taLG1CQUFvQixTQUFVLE1BQU1sRyxLQUFZcEssS0FBVyxDQUFDM0QsRUFBU0MsS0FDL0YsSUFBSXZDLEVBQU9tTSxFQUFFMkUsUUFBUVQsR0FDakJDLEVBQVluRSxFQUFFSyxNQUFNLENBQ1osZUFBZ0IsVUFDaEIsYUFBYyxLQUNkLFlBQWEsS0FDYjZELFNBQVVoVCxLQUFLeVgsZUFDaEJ6WCxLQUFLd1MsaUJBR2hCeFMsS0FBSzJVLE1BQU0sQ0FBQyxVQUFXLFdBQVksQ0FDL0IsQ0FBQ2hTLEVBQU1zUSxFQUFXckssR0FBUyxHQUMzQixDQUFDakcsRUFBTXNRLEVBQVdySyxHQUFTLEtBSy9CM0QsRUFBUSxDQUFDK04sRUFBVXBLLFUsUUNuaEIvQixTQUFTaEUsSUFDTDVFLEtBQUt1RixRQUFVdkYsS0FBS3VGLFNBQVcsR0FDL0J2RixLQUFLeUYsY0FBZ0J6RixLQUFLeUYsb0JBQWlCN0QsRUEyUS9DLFNBQVN3YixFQUFXaFYsR0FDaEIsTUFBc0IsbUJBQVJBLEVBT2xCLFNBQVNpVixFQUFTalYsR0FDZCxNQUFzQixpQkFBUkEsR0FBNEIsT0FBUkEsRUFHdEMsU0FBU2tWLEVBQVlsVixHQUNqQixZQUFlLElBQVJBLEVBalNOdkIsT0FBT3ZFLFVBQVVpYSxhQUNsQjFWLE9BQU92RSxVQUFVaWEsV0FBYSxTQUFTZ0IsRUFBY25VLEdBRWpELE9BREFBLEVBQVdBLEdBQVksRUFDaEJwSixLQUFLaVksUUFBUXNGLEVBQWNuVSxLQUFjQSxJQVN4RDFKLEVBQU9FLFFBQVVnRixFQUdqQkEsRUFBYUEsYUFBZUEsRUFFNUJBLEVBQWF0QyxVQUFVaUQsYUFBVTNELEVBQ2pDZ0QsRUFBYXRDLFVBQVVtRCxtQkFBZ0I3RCxFQUl2Q2dELEVBQWFjLG9CQUFzQixHQUluQ2QsRUFBYXRDLFVBQVVpRyxnQkFBa0IsU0FBU2xHLEdBQzlDLEdBOFBzQixpQkE5UFJBLEdBQU1BLEVBQUksR0FBS3NDLE1BQU10QyxHQUMvQixNQUFNUyxVQUFVLCtCQUtwQixPQUZBOUMsS0FBS3lGLGNBQWdCcEQsRUFFZHJDLE1BSVg0RSxFQUFhdEMsVUFBVXFTLE1BQVEsU0FBUzZJLEVBQU9DLEdBQzNDLElBQUssSUFBSW5kLEVBQUksRUFBR0EsRUFBSWtkLEVBQU03YyxPQUFRTCxJQUFLLENBQ25DLElBQUlvZCxFQUFNcGQsRUFBSW1kLEVBQU85YyxPQUFTOGMsRUFBT25kLEdBQUttZCxFQUFPQSxFQUFPOWMsT0FBUyxHQUNqRVgsS0FBS3dHLEtBQUt2QyxNQUFNakUsS0FBTSxDQUFDd2QsRUFBTWxkLElBQUlGLE9BQU9zZCxNQUloRDlZLEVBQWF0QyxVQUFVa0UsS0FBTyxTQUFTUixHQUNuQyxJQUFJMkMsRUFBSUcsRUFBUy9ILEVBQUtxRCxFQUFNOUQsRUFBR3lJLEVBSy9CLEdBSEsvSSxLQUFLdUYsVUFBV3ZGLEtBQUt1RixRQUFVLElBR3ZCLFVBQVRTLEtBQ0toRyxLQUFLdUYsUUFBUW1ELE9BQVUyVSxFQUFTcmQsS0FBS3VGLFFBQVFtRCxTQUFXMUksS0FBS3VGLFFBQVFtRCxNQUFNL0gsUUFBUyxDQUVyRixJQURBZ0ksRUFBS3JELFVBQVUsY0FDR3NCLE1BQVMsTUFBTStCLEVBQ2pDLE1BQU03RixVQUFVLHdDQU14QixHQUFJd2EsRUFGSnhVLEVBQVU5SSxLQUFLdUYsUUFBUVMsSUFFSyxPQUFPLEVBRW5DLEdBQUlvWCxFQUFXdFUsR0FDWCxPQUFReEQsVUFBVTNFLFFBRWQsS0FBSyxFQUNEbUksRUFBUXZHLEtBQUt2QyxNQUNiLE1BQ0osS0FBSyxFQUNEOEksRUFBUXZHLEtBQUt2QyxLQUFNc0YsVUFBVSxJQUM3QixNQUNKLEtBQUssRUFDRHdELEVBQVF2RyxLQUFLdkMsS0FBTXNGLFVBQVUsR0FBSUEsVUFBVSxJQUMzQyxNQUVKLFFBQ0lsQixFQUFPbkQsTUFBTXFCLFVBQVVFLE1BQU1ELEtBQUsrQyxVQUFXLEdBQzdDd0QsRUFBUTdFLE1BQU1qRSxLQUFNb0UsUUFFekIsR0FBSWlaLEVBQVN2VSxHQUloQixJQUhBMUUsRUFBT25ELE1BQU1xQixVQUFVRSxNQUFNRCxLQUFLK0MsVUFBVyxHQUU3Q3ZFLEdBREFnSSxFQUFZRCxFQUFRdEcsU0FDSjdCLE9BQ1hMLEVBQUksRUFBR0EsRUFBSVMsRUFBS1QsSUFBT3lJLEVBQVV6SSxHQUFHMkQsTUFBTWpFLEtBQU1vRSxHQUd6RCxPQUFPLEdBR1hRLEVBQWF0QyxVQUFVMEcsWUFBYyxTQUFTaEQsRUFBTUosR0FDaEQsSUFBSU0sRUFFSixJQUFLa1gsRUFBV3hYLEdBQWEsTUFBTTlDLFVBQVUsK0JBbUM3QyxPQWpDSzlDLEtBQUt1RixVQUFXdkYsS0FBS3VGLFFBQVUsSUFJaEN2RixLQUFLdUYsUUFBUWdCLGFBQ2J2RyxLQUFLd0csS0FBSyxjQUFlUixFQUFNb1gsRUFBV3hYLEVBQVNBLFVBQVlBLEVBQVNBLFNBQVdBLEdBSWxGNUYsS0FBS3VGLFFBQVFTLEdBRVRxWCxFQUFTcmQsS0FBS3VGLFFBQVFTLElBQVVoRyxLQUFLdUYsUUFBUVMsR0FBTXZHLEtBQUttRyxHQUUxRDVGLEtBQUt1RixRQUFRUyxHQUFRLENBQUNoRyxLQUFLdUYsUUFBUVMsR0FBT0osR0FKdEI1RixLQUFLdUYsUUFBUVMsR0FBUUosRUFPNUN5WCxFQUFTcmQsS0FBS3VGLFFBQVFTLE1BQVdoRyxLQUFLdUYsUUFBUVMsR0FBTVUsU0FJaERSLEVBSENvWCxFQUFZdGQsS0FBS3lGLGVBR2RiLEVBQWFjLG9CQUZiMUYsS0FBS3lGLGdCQUtKUyxFQUFJLEdBQUtsRyxLQUFLdUYsUUFBUVMsR0FBTXJGLE9BQVN1RixJQUMxQ2xHLEtBQUt1RixRQUFRUyxHQUFNVSxRQUFTLEVBQzVCSyxRQUFRMkIsTUFBTSxtSUFBb0kxSSxLQUFLdUYsUUFBUVMsR0FBTXJGLFFBRXhJLG1CQUFsQm9HLFFBQVE0VyxPQUNmNVcsUUFBUTRXLFNBS2IzZCxNQUdYNEUsRUFBYXRDLFVBQVUyRyxHQUFLckUsRUFBYXRDLFVBQVUwRyxZQUduRHBFLEVBQWF0QyxVQUFVd0MsS0FBTyxTQUFTa0IsRUFBTUosR0FDekMsSUFBS3dYLEVBQVd4WCxHQUFhLE1BQU05QyxVQUFVLCtCQUU3QyxJQUFJb0UsR0FBUSxFQUVaLEdBQUlsSCxLQUFLdUYsUUFBUW9TLGVBQWUzUixJQUE0QixNQUFuQkEsRUFBSzRYLE9BQU8sR0FBWSxDQUM3RCxJQUFJOVcsRUFBUSxFQUNSK1csRUFBWTdYLEVBRWhCLElBQUssSUFBSThYLEtBQUs5ZCxLQUFLdUYsUUFDWHZGLEtBQUt1RixRQUFRb1MsZUFBZW1HLElBQU1BLEVBQUV2QixXQUFXc0IsSUFDL0MvVyxJQUdSZCxHQUFjYyxFQUdsQixTQUFTcUssSUFDa0IsTUFBbkJuTCxFQUFLNFgsT0FBTyxJQUFlalosTUFBTXFCLEVBQUt3VyxPQUFPeFcsRUFBS3JGLE9BQVMsTUFDM0RxRixFQUFPQSxFQUFLK1gsVUFBVSxFQUFHL1gsRUFBS3JGLE9BQVMsSUFFM0NYLEtBQUtxRixlQUFlVyxFQUFNbUwsR0FFckJqSyxJQUNEQSxHQUFRLEVBQ1J0QixFQUFTM0IsTUFBTWpFLEtBQU1zRixZQU83QixPQUhBNkwsRUFBRXZMLFNBQVdBLEVBQ2I1RixLQUFLaUosR0FBR2pELEVBQU1tTCxHQUVQblIsTUFLWDRFLEVBQWF0QyxVQUFVK0MsZUFBaUIsU0FBU1csRUFBTUosR0FDbkQsSUFBSTlGLEVBQU1zSixFQUFVekksRUFBUUwsRUFFNUIsSUFBSzhjLEVBQVd4WCxHQUFhLE1BQU05QyxVQUFVLCtCQUU3QyxJQUFLOUMsS0FBS3VGLFVBQVl2RixLQUFLdUYsUUFBUVMsR0FBUyxPQUFPaEcsS0FLbkQsR0FGQVcsR0FEQWIsRUFBT0UsS0FBS3VGLFFBQVFTLElBQ05yRixPQUNkeUksR0FBWSxFQUNSdEosSUFBUzhGLEdBQWF3WCxFQUFXdGQsRUFBSzhGLFdBQWE5RixFQUFLOEYsV0FBYUEsRUFBVyxDQUdoRixVQUZPNUYsS0FBS3VGLFFBQVFTLEdBRWhCaEcsS0FBS3VGLFFBQVFvUyxlQUFlM1IsRUFBTyxNQUEyQixNQUFuQkEsRUFBSzRYLE9BQU8sR0FBWSxDQUNuRSxJQUFJQyxFQUFZN1gsRUFDaEIsSUFBSyxJQUFJOFgsS0FBSzlkLEtBQUt1RixRQUNYdkYsS0FBS3VGLFFBQVFvUyxlQUFlbUcsSUFBTUEsRUFBRXZCLFdBQVdzQixLQUMxQ2xaLE1BQU04UixTQUFTcUgsRUFBRXRCLE9BQU9zQixFQUFFbmQsT0FBUyxPQUNwQ1gsS0FBS3VGLFFBQVFTLEVBQU95USxTQUFTcUgsRUFBRXRCLE9BQU9zQixFQUFFbmQsT0FBUyxHQUFLLElBQU1YLEtBQUt1RixRQUFRdVksVUFDbEU5ZCxLQUFLdUYsUUFBUXVZLEtBS2hDOWQsS0FBS3VGLFFBQVFTLEdBQVFoRyxLQUFLdUYsUUFBUVMsRUFBTyxZQUNsQ2hHLEtBQUt1RixRQUFRUyxFQUFPLEtBRTNCaEcsS0FBS3VGLFFBQVFGLGdCQUFrQnJGLEtBQUt3RyxLQUFLLGlCQUFrQlIsRUFBTUosUUFFcEUsR0FBSXlYLEVBQVN2ZCxHQUFPLENBQ3JCLElBQUtRLEVBQUlLLEVBQVFMLEtBQU0sR0FDbkIsR0FBSVIsRUFBS1EsS0FBT3NGLEdBQ1g5RixFQUFLUSxHQUFHc0YsVUFBWTlGLEVBQUtRLEdBQUdzRixXQUFhQSxFQUFXLENBQ3JEd0QsRUFBVzlJLEVBQ1gsTUFJUixHQUFJOEksRUFBVyxFQUFLLE9BQU9wSixLQUVQLElBQWhCRixFQUFLYSxRQUNMYixFQUFLYSxPQUFTLFNBQ1BYLEtBQUt1RixRQUFRUyxJQUVqQmxHLEVBQUs0TyxPQUFPdEYsRUFBVSxHQUV6QnBKLEtBQUt1RixRQUFRRixnQkFBa0JyRixLQUFLd0csS0FBSyxpQkFBa0JSLEVBQU1KLEdBR3pFLE9BQU81RixNQUdYNEUsRUFBYXRDLFVBQVVxSCxtQkFBcUIsU0FBUzNELEdBQ2pELElBQUk0RCxFQUFLYixFQUVULElBQUsvSSxLQUFLdUYsUUFBVyxPQUFPdkYsS0FHNUIsSUFBS0EsS0FBS3VGLFFBQVFGLGVBR2QsT0FGeUIsSUFBckJDLFVBQVUzRSxPQUFnQlgsS0FBS3VGLFFBQVUsR0FDcEN2RixLQUFLdUYsUUFBUVMsV0FBZ0JoRyxLQUFLdUYsUUFBUVMsR0FDNUNoRyxLQUlYLEdBQXlCLElBQXJCc0YsVUFBVTNFLE9BQWMsQ0FDeEIsSUFBS2lKLEtBQU81SixLQUFLdUYsUUFDRCxtQkFBUnFFLEdBQ0o1SixLQUFLMkosbUJBQW1CQyxHQUk1QixPQUZBNUosS0FBSzJKLG1CQUFtQixrQkFDeEIzSixLQUFLdUYsUUFBVSxHQUNSdkYsS0FLWCxHQUFJb2QsRUFGSnJVLEVBQVkvSSxLQUFLdUYsUUFBUVMsSUFFSWhHLEtBQUtxRixlQUFlVyxFQUFNK0MsUUFDbEQsR0FBSUEsRUFBYSxLQUFPQSxFQUFVcEksUUFBVVgsS0FBS3FGLGVBQWVXLEVBQU0rQyxFQUFVQSxFQUFVcEksT0FBUyxJQUd4RyxjQUZPWCxLQUFLdUYsUUFBUVMsR0FFYmhHLE1BR1g0RSxFQUFhdEMsVUFBVXlHLFVBQVksU0FBUy9DLEdBS3hDLE9BSEtoRyxLQUFLdUYsU0FBWXZGLEtBQUt1RixRQUFRUyxHQUMxQm9YLEVBQVdwZCxLQUFLdUYsUUFBUVMsSUFBZ0IsQ0FBQ2hHLEtBQUt1RixRQUFRUyxJQUNsRGhHLEtBQUt1RixRQUFRUyxHQUFNeEQsUUFGa0IsSUFNdERvQyxFQUFhdEMsVUFBVXdGLGNBQWdCLFNBQVM5QixHQUM1QyxHQUFJaEcsS0FBS3VGLFFBQVMsQ0FDZCxJQUFJbUMsRUFBYTFILEtBQUt1RixRQUFRUyxHQUU5QixHQUFJb1gsRUFBVzFWLEdBQWUsT0FBTyxFQUNoQyxHQUFJQSxFQUFjLE9BQU9BLEVBQVcvRyxPQUU3QyxPQUFPLEdBR1hpRSxFQUFha0QsY0FBZ0IsU0FBUy9DLEVBQVNpQixHQUMzQyxPQUFPakIsRUFBUStDLGNBQWM5QixLLGNDeFNqQyxJQUFJOEksRUFBSSxFQUFRLElBRVprUCxFQUFlLE9BQ2ZDLEVBQVMsQ0FBRSxNQUFTLEVBQUcsTUFBUyxFQUFHLEtBQVEsRUFBRyxLQUFRLEVBQUcsTUFBUyxFQUFHLE1BQVMsR0FHbEYsU0FBUzVLLEVBQUlGLEdBRVQsT0FBTyxTQUFVdkssR0FDVHFWLEVBQU85SyxJQUFVOEssRUFBT0QsSUFDeEJqWCxRQUFRc00sSUFBSSxJQUFJdkUsRUFBRW9QLFdBQVcsSUFBSXZMLFVBQVlRLE1BQVV2SyxNQUtuRWxKLEVBQU9FLFFBQVUsQ0FFYjBULFNBQVUsU0FBU0gsR0FDZjZLLEVBQWU3SyxHQUVuQndLLE1BQU90SyxFQUFJLFNBQ1hELE1BQU9DLEVBQUksU0FDWHdCLEtBQU14QixFQUFJLFFBQ1ZyTSxLQUFNcU0sRUFBSSxRQUNWM0ssTUFBTzJLLEVBQUksU0FDWDhLLE1BQU85SyxFQUFJLFcsY0NEZixJQUFJdkUsRUFBSSxFQUFRLElBQ1pzUCxFQUFnQixPQUVwQixTQUFTQyxFQUFnQnBLLEVBQU1xSyxFQUFRQyxFQUFPLElBQUtDLEVBQU8sSUFBS0MsR0FDM0QsSUFBSXBDLEVBQU1wSSxFQUFLcUssR0FFZixRQUFXMWMsSUFBUnlhLEVBQ0MsT0FBT3BJLEVBR1gsSUFBSXlLLEVBQWM1UCxFQUFFdUYsU0FBU2dJLEdBRzdCLEdBRkFwSSxFQUFLcUssRUFBUyxRQUFVSSxFQUFjckMsRUFBTSxNQUVqQyxJQUFSQSxFQUVDLE9BREFwSSxFQUFLcUssR0FBVSxLQUNSckssRUFLWCxHQUZBQSxFQUFLcUssR0FBVSxHQUVYSSxFQUdBLElBRkEsSUFBSUMsRUFBTXRDLEVBQUlqRyxNQUFNbUksR0FFWGplLEVBQUksRUFBR0EsRUFBSXFlLEVBQUloZSxPQUFRTCxJQUFLLENBQ2pDLElBQUlzZSxFQUFRRCxFQUFJcmUsR0FBRzhWLE1BQU1vSSxHQUNyQmQsRUFBTWtCLEVBQU0sUUFDSGhkLElBQVQ2YyxHQUFzQmYsSUFDdEJBLEVBQU1BLEVBQUl0SCxNQUFNcUksSUFFcEJ4SyxFQUFLcUssR0FBUU0sRUFBTSxJQUFNbEIsR0FBTyxLQUd4QyxPQUFPekosRUFHWHZVLEVBQU9FLFFBQVUsQ0FFYnNVLE9BQVEsU0FBZ0JELEdBQ3BCLE9BQU9vSyxFQUFnQnBLLEVBQU0sV0FJakNFLFVBQVcsU0FBbUJGLEdBQzFCLE9BQU9vSyxFQUFnQnBLLEVBQU0sZUFJakM1QixPQUFRLFNBQWdCNEIsR0FDcEIsT0FBT29LLEVBQWdCcEssRUFBTSxTQUFVLElBQUssSUFBSyxNQUlyRDRGLFdBQVksU0FBb0I5RixFQUFLNUosRUFBTXhLLEVBQUlpTSxHQUMzQ3dTLEVBQWNTLFVBQVksRUFLMUIsSUFKQSxJQUNJQyxFQURBQyxFQUFRLElBQUlDLE9BQU8sWUFBZWxRLEVBQUVtUSxhQUFhOVUsR0FBUSxhQUloQixRQUFyQzJVLEVBQVFWLEVBQWNjLEtBQUtuTCxLQUMzQmdMLEVBQU1uYyxLQUFLa2MsRUFBTSxNQUNqQmxULEVBQUlqTSxHQUFNaU0sRUFBSWpNLElBQU8sR0FDckJpTSxFQUFJak0sR0FBSUYsS0FBSyxDQUFDcWYsRUFBTXZWLE1BQU82VSxFQUFjUyxVQUFZLE1BTWpFL0UsWUFBYSxTQUFxQi9GLEVBQUs1SixFQUFNeEssRUFBSWlNLEdBRTdDLElBQUlrVCxFQUdKLElBSkFWLEVBQWNTLFVBQVksRUFJbUIsUUFBckNDLEVBQVFWLEVBQWNjLEtBQUtuTCxLQUMzQitLLEVBQU0sS0FBT2hRLEVBQUVtUSxhQUFhOVUsS0FDNUJ5QixFQUFJak0sR0FBTWlNLEVBQUlqTSxJQUFPLEdBQ3JCaU0sRUFBSWpNLEdBQUlGLEtBQUssQ0FBQ3FmLEVBQU12VixNQUFPNlUsRUFBY1MsVUFBWSxNQU9qRTlFLGdCQUFpQixTQUF5QjFILEdBQ3RDLElBQUk4TSxFQUFjLEdBVWxCLE9BUkE1ZCxPQUFPc0ksS0FBS3dJLEdBQVE3RixTQUFTN00sSUFDekJ3ZixFQUFjLEdBQUdBLEVBQVl4ZixLQUM3QjBTLEVBQU8xUyxHQUFJNk0sU0FBU2pELElBQ2hCNFYsRUFBYyxHQUFHQSxFQUFZNVYsRUFBTWxKLEtBQUssV0FFNUM4ZSxFQUFjLEdBQUdBLEVBQVkzYyxNQUFNLEdBQUcsU0FHbkMyYyxFQUFZM2MsTUFBTSxHQUFHLElBSWhDdVIsSUFBSyxTQUFheFEsR0FDZCxJQUFJcUYsRUFBVSxDQUNWeVQsSUFBSzlZLEVBQ0wwUSxLQUFNLEdBQ05NLE9BQVEsS0FDUkMsUUFBUyxLQUNUVixPQUFRLElBSVIxSyxFQUFXLEVBQ1hnVyxFQUFZLEVBSWhCLEdBQTJCLEtBQXZCN2IsRUFBSzhiLFdBQVcsR0FBVyxDQUkzQixJQUFtQixLQUhmRCxFQUFZN2IsRUFBSzBVLFFBQVEsTUFJekIsT0FBTyxLQU1YLElBRkEsSUFBSXFILEVBQVUvYixFQUFLZixNQUFNLEVBQUc0YyxHQUFXaEosTUFBTSxLQUVwQzlWLEVBQUksRUFBR0EsRUFBSWdmLEVBQVEzZSxPQUFRTCxJQUFLLENBR3JDLElBQUlpZixFQUFNRCxFQUFRaGYsR0FDZGtmLEVBQU9ELEVBQUluSixNQUFNLEtBQ3JCeE4sRUFBUXFMLEtBQUt1TCxFQUFLLElBQU1ELEVBQUl4QixVQUFVd0IsRUFBSXRILFFBQVEsS0FBTyxLQUFNLEVBR25FN08sRUFBV2dXLEVBQVksRUFJM0IsS0FBcUMsS0FBOUI3YixFQUFLOGIsV0FBV2pXLElBQ25CQSxJQUlKLEdBQWtDLEtBQTlCN0YsRUFBSzhiLFdBQVdqVyxHQUFrQixDQUlsQyxJQUFtQixLQUhuQmdXLEVBQVk3YixFQUFLMFUsUUFBUSxJQUFLN08sSUFJMUIsT0FBTyxLQU9YLElBSkFSLEVBQVEyTCxPQUFTaFIsRUFBS2YsTUFBTTRHLEVBQVcsRUFBR2dXLEdBQzFDaFcsRUFBV2dXLEVBQVksRUFHYyxLQUE5QjdiLEVBQUs4YixXQUFXalcsSUFDbkJBLElBUVIsSUFBbUIsS0FKbkJnVyxFQUFZN2IsRUFBSzBVLFFBQVEsSUFBSzdPLElBSzFCLE9BQUk3RixFQUFLNUMsT0FBU3lJLEdBQ2RSLEVBQVE0TCxRQUFValIsRUFBS2YsTUFBTTRHLEdBQ3RCUixHQUdKLEtBVVgsSUFMQUEsRUFBUTRMLFFBQVVqUixFQUFLZixNQUFNNEcsRUFBVWdXLEdBRXZDaFcsRUFBV2dXLEVBQVksRUFHYyxLQUE5QjdiLEVBQUs4YixXQUFXalcsSUFDbkJBLElBR0osS0FBT0EsRUFBVzdGLEVBQUs1QyxRQUFRLENBTzNCLEdBTkF5ZSxFQUFZN2IsRUFBSzBVLFFBQVEsSUFBSzdPLEdBTUksS0FBOUI3RixFQUFLOGIsV0FBV2pXLEdBQWtCLENBQ2xDUixFQUFRa0wsT0FBT3JVLEtBQUs4RCxFQUFLZixNQUFNNEcsRUFBVyxJQUMxQyxNQUlKLElBQW1CLElBQWZnVyxHQWdCSixJQUFtQixJQUFmQSxFQUFrQixDQUNsQnhXLEVBQVFrTCxPQUFPclUsS0FBSzhELEVBQUtmLE1BQU00RyxJQUMvQixZQVhBLElBSkFSLEVBQVFrTCxPQUFPclUsS0FBSzhELEVBQUtmLE1BQU00RyxFQUFVZ1csSUFDekNoVyxFQUFXZ1csRUFBWSxFQUdjLEtBQTlCN2IsRUFBSzhiLFdBQVdqVyxJQUNuQkEsSUFjWixPQUFPUixLLFlDL09mLFNBQVMwTSxFQUFNbUssR0FDWHpmLEtBQUtzVixNQUFRLEdBQ2J0VixLQUFLdUosTUFBUSxFQUNidkosS0FBS3lmLGFBQWVBLEdBQWdCLElBSXhDbkssRUFBTWhULFVBQVVtVCxJQUFNLFNBQWE0RCxFQUFJRCxHQUNuQ3BaLEtBQUtzVixNQUFNN1YsS0FBSyxDQUNaNFosR0FBSUEsRUFDSkQsTUFBT0EsS0FLZjlELEVBQU1oVCxVQUFVcVQsSUFBTSxTQUFhcE0sSUFDOUJBLEdBQW1CLElBQVZBLEtBQWlCdkosS0FBS3VKLE1BQVFBLEdBQ3hDdkosS0FBSzhCLFFBSVR3VCxFQUFNaFQsVUFBVVIsS0FBTyxXQUNuQixJQUFJeEIsRUFBSU4sS0FBS3VKLFFBQ1RtVyxFQUFLMWYsS0FBS3NWLE1BQU1oVixHQUNoQndCLEVBQU85QixLQUFLc1YsTUFBTXRWLEtBQUt1SixPQUV0Qm1XLElBRUxBLEVBQUdyRyxLQUNIdlgsR0FBUW1ULFlBQVcsS0FDZmpWLEtBQUs4QixTQUNOQSxFQUFLc1gsT0FBU3BaLEtBQUt5ZixnQkFJMUJuSyxFQUFNaFQsVUFBVXFkLE1BQVEsV0FDcEIzZixLQUFLdUosTUFBUSxHQUlqQitMLEVBQU1oVCxVQUFVMFksTUFBUSxXQUNwQmhiLEtBQUt1SixNQUFRLEVBQ2J2SixLQUFLc1YsTUFBUSxJQUdqQjFWLEVBQVEwVixNQUFRQSxHLE9DOUNoQixJQUFJc0ssRUFBcUIsb0NBQ3JCQyxFQUFpQixxQkFDakJDLEVBQW1CLGdCQUNuQkMsRUFBa0IsQ0FBRUMsRUFBRyxJQUFLM2QsRUFBRyxHQUFJLElBQUssSUFBSzRkLEVBQUcsSUFDaERDLEVBQU94Z0IsRUFBT0UsUUFBVSxDQUV4QnNJLElBQUssQ0FBQ2lZLEVBQU1DLFNBQWtDLElBQVRELEVBQXVCQyxFQUFPRCxFQUduRS9MLFVBQVl4SSxHQUFpQyxrQkFBVixFQUduQ3lVLFNBQVdDLEdBQWlCRCxTQUFTQyxLQUFTM2IsTUFBTXVYLFdBQVdvRSxJQUcvRHpELFVBQVl5RCxJQUFrQjNiLE1BQU11YixFQUFLSyxTQUFTRCxFQUFLLElBR3ZEOUksWUFBY3hFLEdBQXNCNk0sRUFBZWpkLEtBQUtvUSxHQUd4RGEsT0FBU2pJLEdBQXlCLE9BQVJBLEVBRzFCZ08sUUFBVVgsR0FBaUIsdUJBQXVCclcsS0FBS3FXLEdBR3ZENUUsU0FBVzRFLEdBQWlDLGlCQUFWLEVBR2xDaEssTUFBUWdLLEdBQWlCK0YsT0FBTywyZUFBMmUsS0FBS3BjLEtBQUtxVyxHQUdyaEJILFVBQVcsSUFBZSxZQUFZekksS0FBS21RLE1BQXVCLElBQWhCblEsS0FBS0UsU0FBb0IsT0FHM0V3SSxTQUFXRSxHQUFpQixDQUFDLGFBQWMsR0FBSSxNQUFNdEksU0FBU3NJLEdBQU8sYUFBZSxTQUFTQSxFQUFJNUMsY0FBYzRELFFBQVEsU0FBVSxNQUdqSVgsYUFBZW1ILEdBQWtCLElBQUl6YixTQUFRLFNBQVVDLEdBQVdnUSxXQUFXaFEsRUFBU3diLE1BR3RGQyxXQUFZLENBQUN6SCxFQUFLck4sS0FDZCxHQUFJcU4sUUFBOEMsT0FBTyxLQUN6RCxJQUFLLElBQUkwSCxLQUFLL1UsRUFDVnFOLEVBQU1BLEVBQUlnQixRQUFRLElBQUkrRSxPQUFPMkIsRUFBRyxLQUFNL1UsRUFBSStVLElBRTlDLE9BQU8xSCxHQUdYZ0csYUFBZTJCLEdBQ0pBLEVBQUszRyxRQUFRLGFBQWMsS0FDN0JBLFFBQVEsWUFBYSxLQUNyQkEsUUFBUSxZQUFhLEtBQ3JCQSxRQUFRLGNBQWUsS0FDdkJBLFFBQVEsY0FBZSxLQUloQzNGLFlBQWNQLEdBQ0ZBLEdBQVFBLEVBQUlwRCxTQUFTLE1BQWNvRCxFQUFJa0csUUFBUTZGLEdBQWtCLENBQUM1WixFQUFHMmEsSUFBZUEsS0FBS2QsRUFBa0JBLEVBQWdCYyxHQUFLQSxJQUFuRzlNLEVBR3pDcUUsY0FBZ0JyRSxHQUNMQSxFQUFJK0ssTUFBTWMsR0FJckJrQixRQUFTLENBQUNDLEVBQU1DLElBQ0xELEVBQUtwZ0IsT0FBU29nQixFQUFPLElBQU1DLEVBQU9ELEVBQU9DLEVBSXBEdk4sUUFBVXdGLElBQ04sSUFBSXhGLEdBQVd3RixHQUFZLElBQUk1QyxjQUMvQixNQUFzQixNQUFmNUMsRUFBUSxHQUFhQSxFQUFVLElBQU1BLEdBSWhEMEUsY0FBZ0JjLElBRVosSUFEQSxJQUFJMkYsRUFBUTNGLEVBQUk3QyxNQUFNLEtBQ2I5VixFQUFJLEVBQUdBLEVBQUlzZSxFQUFNamUsT0FBUUwsSUFDOUIsR0FBSTRmLEVBQUtyRCxVQUFVK0IsRUFBTXRlLElBQU8sUUFBU3NlLEVBQU10ZSxHQUVuRCxPQUFPLEdBSVg0ZCxXQUFhK0MsSUFDVCxJQUFJQyxFQUFRRCxFQUFLRSxXQUNiQyxFQUFRSCxFQUFLSSxhQUtqQixNQUFPLEdBSFBILEdBQVNBLEVBQVEsR0FBSyxJQUFNLElBQU1BLEtBQ2xDRSxHQUFRQSxFQUFPLEdBQUssSUFBTSxJQUFNQSxLQU1wQ3pOLFNBQVUsQ0FBQzJOLEVBQU1DLEtBQ2JELEVBQUtFLE9BQVNELEVBQ2QsSUFBSUUsRUFBVyxhQUNmQSxFQUFTbmYsVUFBWWlmLEVBQVVqZixVQUMvQmdmLEVBQUtoZixVQUFZLElBQUltZixFQUNyQkgsRUFBS2hmLFVBQVVHLFlBQWM2ZSxHQUlqQ3BTLE9BQVEsS0FDSixJQUNJLE1BQU8saUJBQW9Cd1MsU0FBdUQscUJBQTVDbmdCLE9BQU9lLFVBQVV2QyxTQUFTd0MsS0FBS21mLFNBQ3ZFLE1BQU12VyxJQUNSLE9BQU8sR0FJWG1FLFlBQWEsS0FDVCxJQUNJLE9BQU92RSxPQUFPNFcsUUFBVUEsT0FBT0MsU0FBV0QsT0FBT0MsUUFBUWppQixHQUMzRCxNQUFNd0wsSUFDUixPQUFPLEdBSVhvRSxjQUFlLEtBQ1gsSUFDSSxPQUFPc1MsV0FBa0MsZUFBckJBLFVBQVVDLFFBQ2hDLE1BQU0zVyxJQUNSLE9BQU8sR0FJWGdFLE1BQU81TixPQUFPd2dCLE9BR2RySSxVQUFXLENBQUNzSSxFQUFPcmhCLEtBQ2YsSUFBSXNoQixFQUFZRCxFQUFNakUsVUFBVSxFQUFHcGQsR0FBUXVoQixZQUFZLEtBS3ZELE9BSG1CLElBQWZELElBQ0FBLEVBQVl0aEIsRUFBUyxHQUVsQixDQUFDcWhCLEVBQU1qRSxVQUFVLEVBQUdrRSxHQUFZRCxFQUFNakUsVUFBVWtFLEVBQVksS0FJdkUxQixTQUFVLENBQUM0QixFQUFLQyxLQUNaLEdBQVksT0FBUkQsRUFBYyxPQUFPLEVBQ3pCLElBQUlFLEVBQVNoUyxLQUFLaVMsSUFBSSxHQUFJcEMsRUFBS0csU0FBUytCLEdBQWFBLEVBQVksR0FDakUsT0FBTy9SLEtBQUtDLE1BQU02UixFQUFNRSxHQUFVQSxHQUl0QzdNLE1BQU8sQ0FBQytNLEVBQU12aEIsS0FHVixJQUZBLElBQUl3SixFQUFPLEdBQ1A3QyxFQUFNLEdBQ0ZySCxFQUFFLEVBQUdBLEVBQUlpaUIsRUFBSzVoQixPQUFRTCxJQUVyQmtLLEVBRERXLEVBQUlvWCxFQUFLamlCLE1BRVRrSyxFQUFLVyxJQUFLLEVBQ1Z4RCxFQUFJbEksS0FBSzBMLElBR2pCLElBQVE3SyxFQUFFLEVBQUdBLEVBQUlVLEVBQUtMLE9BQVFMLElBQUssQ0FDL0IsSUFBSTZLLEVBQ0NYLEVBRERXLEVBQUluSyxFQUFLVixNQUVUa0ssRUFBS1csSUFBSyxFQUNWeEQsRUFBSWxJLEtBQUswTCxJQUdqQixPQUFPeEQsR0FJWHFMLFNBQVdpRyxJQUNQLElBQUlqRyxHQUFZaUcsR0FBWSxJQUFJNUMsY0FDaEMsTUFBdUIsTUFBaEJyRCxFQUFTLEdBQWFBLEVBQVN4USxNQUFNLEdBQUt3USxLLHFDQzlLekQsT0FDQSxPQUNBLE9BQ0EsT0FFQSxhQUlBLFNBQ0EsU0FDQSxRQUNBLFNBQ0EsU0FHTWMsRUFBMEIsSUFBSTBPLGdCQUFnQnpYLE9BQU8wWCxTQUFTQyxRQUM5RGpQLEVBQXVDLFFBQWhDLEVBQVdLLEVBQU81TCxJQUFJLGtCQUFVLFFBQUksR0FFM0NrTixFQUFrQnFCLFNBQThCLFFBQXRCLEVBQUMzQyxFQUFPNUwsSUFBSSxrQkFBVSxRQUFJLE1BQ3BEeWEsRUFBd0JsTSxTQUFvQyxRQUE1QixFQUFDM0MsRUFBTzVMLElBQUksd0JBQWdCLFFBQUksS0FFaEUwYSxFQUFXLElBQUksRUFBQUMsSUFBSXpOLEVBQVN1TixHQUM1QkcsRUFBYSxJQUFJLEVBQUFDLFdBQVd0UCxHQTJCNUJ1UCxFQXJCUSxRQUhDbFAsRUFBT21QLElBQUksUUFBVW5QLEVBQU81TCxJQUFJLFFBQVUsTUFJOUMsSUFBSSxFQUFBZ2IsSUFBSSxDQUNiQyxVQUFXLE1BQ1hDLFdBQVksT0FDWnpDLEdBQUksRUFDSjBDLEdBQUksRUFDSkMsYUFBYyxJQUdULElBQUksRUFBQUMsSUFBSSxDQUNiSixVQUFXLE1BRVhDLFdBQVksT0FDWkksZ0JBQWlCLEVBQ2pCQyxlQUFnQixFQUNoQkMsbUJBQW9CLEVBQ3BCQyxrQkFBbUIsSUFPbkJDLEVBQTJCLElBQUksRUFBQUMsZ0JBQWdCZixFQUFNRixHQUVyRGtCLEVBQTZCLElBQUksRUFBQUMsZ0JBQWdCLE9BR3ZERCxFQUFVN2EsR0FDUixXQUNBLFNBQUMrYSxFQUFzQkMsRUFBb0JDLEdBQ3pDbmQsUUFBUXNNLElBQUksV0FBWTJRLEVBQWNDLEVBQVlDLEdBRTlDQSxHQUFPLEVBQUFDLGNBQWNDLEtBRXZCcEIsRUFBTWhJLFdBU1o0SSxFQUFRM2EsR0FBRyxVQUFVLFNBQUNvYixFQUFvQnJpQixFQUFlc2lCLEdBQ3ZEdmQsUUFBUXNNLElBQ04sZUFDQXJSLEVBQ0FzaUIsRUFDQTFCLEVBQUkyQixXQUNKRCxHQUFRLEVBQUFFLFdBQVdDLFdBRWpCSCxHQUFRLEVBQUFFLFdBQVdDLFdBQWE3QixFQUFJMkIsY0FLMUMzQixFQUFJM1osR0FBRyxTQUFTLFdBQ2RsQyxRQUFRc00sSUFBSSxnQkFFWnVRLEVBQVFjLFVBQVUxQixHQUdsQmMsRUFBVWEsS0FBSyxJQUFLLEdBQUksRUFBQVIsY0FBY1MsT0FHeENoQyxFQUFJM1osR0FBRyxVQUFVLFdBQ2ZsQyxRQUFRc00sSUFBSSxpQkFHWnVRLEVBQVFpQixlQUVSZixFQUFVYSxLQUFLLElBQUssR0FBSSxFQUFBUixjQUFjQyxTLDZlQ3RHeEMsSUFLWUQsRUFGWiwyQiwrQ0FBc0QsT0FBZCxPQUFjLEVBQXRELENBSEEsT0FHd0N2ZixjQUFsQixFQUFBa2dCLFlBRXRCLFNBQVlYLEdBQ1YsZUFDQSxpQkFGRixDQUFZQSxFQUFBLEVBQUFBLGdCQUFBLEVBQUFBLGNBQWEsS0FLekIsa0JBTUUsV0FBbUJoQixHQUFuQixNQUNFLGNBQU8sS0FEVSxFQUFBQSxZQUlqQixJQUFNNEIsRUFBb0JsYSxTQUFTbWEsZUFBZSxFQUFLN0IsV0FDdkQsS0FBTTRCLGFBQWdCRSxtQkFDcEIsTUFBTSxJQUFJcmUsTUFBTSxxQixPQUdsQixFQUFLc2UsT0FBU0gsRSxFQThEbEIsT0E3RXFDLE9Ba0I1QixZQUFBSSxlQUFQLFdBQzRCLE1BQXRCbmxCLEtBQUtvbEIsZ0JBQ1ByYSxPQUFPb0ssY0FBY25WLEtBQUtvbEIsZUFDMUJwbEIsS0FBS29sQixjQUFnQixLQUVyQnBsQixLQUFLd0csS0FBSyxvQkFJUCxZQUFBNmUsWUFBUCxXQUMyQixNQUFyQnJsQixLQUFLc2xCLGVBQ1B2YSxPQUFPNkosYUFBYTVVLEtBQUtzbEIsY0FDekJ0bEIsS0FBS3NsQixhQUFlLEtBRXBCdGxCLEtBQUt3RyxLQUFLLG9CQUlQLFlBQUErZSxpQkFBUCxXQUNFdmxCLEtBQUttbEIsaUJBQ0xubEIsS0FBS3FsQixlQUlBLFlBQUFWLEtBQVAsU0FDRVgsRUFDQUMsRUFDQUMsR0FIRixXQUtFbGtCLEtBQUttbEIsaUJBRUwsSUFBSUssRUFBa0IsRUFDdEJ4bEIsS0FBS29sQixjQUFnQnJhLE9BQU9pSyxhQUFZLFdBR3RDLElBQUl5USxHQUZKRCxHQUFXdkIsR0FFYUQsRUFTeEIsR0FSSUUsR0FBT0MsRUFBY0MsTUFDdkJxQixFQUFVLEVBQUlBLEdBR2hCLEVBQUtQLE9BQU85WSxNQUFNcVosUUFBVSxHQUFHQSxFQUUvQjFlLFFBQVFzTSxJQUFJLE1BQU1tUyxFQUFPLEtBQUtDLEVBQU8sS0FFakNELEdBQVd4QixFQUdiLE9BRkEsRUFBS21CLHNCQUNMLEVBQUszZSxLQUFLLFVBQVd3ZCxFQUFjQyxFQUFZQyxLQUdoREQsSUFHRSxZQUFBeUIsT0FBUCxTQUFjMUIsRUFBc0JDLEdBQ2xDamtCLEtBQUsya0IsS0FBS1gsRUFBY0MsRUFBWUUsRUFBY1MsS0FHN0MsWUFBQWUsUUFBUCxTQUFlM0IsRUFBc0JDLEdBQ25DamtCLEtBQUsya0IsS0FBS1gsRUFBY0MsRUFBWUUsRUFBY0MsTUFFdEQsRUE3RUEsQ0FBcUNVLEdBQXhCLEVBQUFmLG1CLHdyQkNWYixhQUNBLFNBR1MsRUFBQTZCLGNBRG9CLEVBa0Y3QixJQUFNQyxFQUFzQyxDQUMxQzFDLFVBQVcsR0FDWEssZ0JBQWlCLEdBQ2pCQyxlQUFnQixHQUNoQkMsbUJBQW9CLEVBQ3BCQyxrQkFBbUIsRUFDbkJtQyxZQUFhLEVBQUFDLE9BQ2JDLFlBQWEsVUFDYkMsaUJBQWtCLEVBQ2xCQyxVQTNGMkIsRUE0RjNCQyxXQUFZLFVBQ1pDLGVBQWdCLElBQ2hCQyxnQkFBaUIsSUFDakJDLFdBQVcsR0FLYixjQUNFLFdBQW1CQyxHQUFuQixNQUNFLFlBQU1BLElBQVcsSyxPQURBLEVBQUFBLGFBRWpCLEVBQUtBLFdBQWEsRUFBSCxLQUFRVixHQUF5QixFQUFLVSxZQUNyRHhmLFFBQVFzTSxJQUFJLEVBQUtrVCxZLEVBeUdyQixPQTdHeUIsT0FPaEIsWUFBQTFoQixLQUFQLGFBU08sWUFBQTJoQixLQUFQLFNBQ0UvSSxFQUNBZ0osRUFDQXpMLFFBREEsSUFBQXlMLE9BQUEsUUFDQSxJQUFBekwsT0FBQSxHQUdJQSxHQUNGaGIsS0FBS2diLFFBR1AsSUFBTTBMLEVBQU8xbUIsS0FBS3VtQixXQUVaSSxFQUFvQjNtQixLQUFLNG1CLE1BQThCLEVBQXRCRixFQUFLakQsZUFDdENvRCxFQUFxQjdtQixLQUFLOG1CLE9BQWdDLEVBQXZCSixFQUFLbEQsZ0JBRzFDMEMsRUFBV1EsRUFBS1IsVUFwSUssSUFxSXJCQSxJQUNGQSxFQUFXVyxHQUFjLEVBQUksSUFHL0IsSUFBTUUsRUFBU2IsRUFBV1EsRUFBS04sZUFDL0JwbUIsS0FBS2duQixJQUFJQyxLQUFVNVcsS0FBS0MsTUFBTTRWLEdBQVMsTUFBTVEsRUFBS1AsV0FDbERubUIsS0FBS2duQixJQUFJRSxZQUFjUixFQUFLVixZQUc1QixJQUFLLElBQUltQixFQUFZLEVBQUdBLEVBQUlULEVBQUtULGlCQUFrQmtCLElBQ2pEbm5CLEtBQUtnbkIsSUFBSUksWUFDVHBuQixLQUFLZ25CLElBQUlLLEtBQ1BybkIsS0FBSzJnQixFQUFJK0YsRUFBS2pELGVBQWlCaUQsRUFBSy9DLGtCQUFvQndELEVBQ3hEbm5CLEtBQUtxakIsRUFBSXFELEVBQUtsRCxnQkFBa0JrRCxFQUFLaEQsbUJBQXFCeUQsRUFDMURSLEVBQXFDLEVBQXpCRCxFQUFLL0Msa0JBQXdCd0QsRUFDekNOLEVBQXVDLEVBQTFCSCxFQUFLaEQsbUJBQXlCeUQsR0FFN0NubkIsS0FBS2duQixJQUFJTSxTQUNUdG5CLEtBQUtnbkIsSUFBSU8sWUFRWCxJQUhBLElBQU1DLEVBQU0vSixFQUFPZ0ssUUFBTyxTQUFDQyxFQUFHQyxHQUFNLE9BQUFELEVBQUlDLEtBRXBDQyxFQUFRbEIsRUFBS2pELGVBQ1JuakIsRUFBWSxFQUFHQSxFQUFJbWQsRUFBTzljLE9BQVFMLElBQUssQ0FDOUMsSUFDTXVuQixFQURZcEssRUFBT25kLEdBQ01rbkIsRUFFL0IsR0FBa0IsR0FBZEssRUFBSixDQUlBLElBQU1DLEVBQXFCbkIsRUFBWWtCLEVBY3ZDLEdBWkE3bkIsS0FBS2duQixJQUFJZSxVQUFZckIsRUFBS1osWUFBWXhsQixFQUFJb21CLEVBQUtaLFlBQVlubEIsUUFDM0RYLEtBQUtnbkIsSUFBSUksWUFDVHBuQixLQUFLZ25CLElBQUlLLEtBQ1BybkIsS0FBSzJnQixFQUFJaUgsRUFDVDVuQixLQUFLcWpCLEVBQUlxRCxFQUFLbEQsZ0JBQ2RzRSxFQUNBakIsR0FFRjdtQixLQUFLZ25CLElBQUlnQixPQUNUaG9CLEtBQUtnbkIsSUFBSU8sWUFHTGQsRUFBVSxDQUNaLElBQUl3QixFQUVGQSxFQURFdkIsRUFBS0osVUFDRWpXLEtBQUtDLE1BQW1CLElBQWJ1WCxHQUFpQixJQUVmLElBQWJBLEVBQWdCLElBRzNCN25CLEtBQUtnbkIsSUFBSUksWUFDVHBuQixLQUFLZ25CLElBQUllLFVBQVksRUFBQUcsZUFDbkJsb0IsS0FBS2duQixJQUFJZSxVQUNUckIsRUFBS0wsaUJBRVBybUIsS0FBS2duQixJQUFJbUIsU0FDUEYsRUFDQWpvQixLQUFLMmdCLEVBQUlpSCxFQUFRRSxFQUFhLEVBQUtmLEVBQVNrQixFQUFJdG5CLE9BQVUsRUFDMURYLEtBQUtxakIsRUFBSXFELEVBQUtsRCxnQkFBa0JxRCxFQUFhLEVBQUlFLEVBQVMsR0FFNUQvbUIsS0FBS2duQixJQUFJTyxZQUdYSyxHQUFTRSxLQUlOLFlBQUE5TSxNQUFQLFdBQ0VoYixLQUFLZ25CLElBQUlvQixVQUFVcG9CLEtBQUsyZ0IsRUFBRzNnQixLQUFLcWpCLEVBQUdyakIsS0FBSzRtQixNQUFPNW1CLEtBQUs4bUIsU0FFeEQsRUE3R0EsQ0FBeUIsRUFBQXVCLE9BQVosRUFBQTlFLE8seUZDNUZTLEVBQUE4RSxNQWFwQixTQUFZOUIsRyxnQkFDVnZtQixLQUFLc29CLGdCQUFrQi9CLEVBQVdwRCxVQUNsQ25qQixLQUFLMmdCLEVBQWdCLFFBQWYsRUFBRzRGLEVBQVc1RixTQUFDLFFBQUksRUFDekIzZ0IsS0FBS3FqQixFQUFnQixRQUFmLEVBQUdrRCxFQUFXbEQsU0FBQyxRQUFJLEVBQ3pCcmpCLEtBQUs0bUIsTUFBd0IsUUFBbkIsRUFBR0wsRUFBV0ssYUFBSyxTQTVCUCxFQTZCdEI1bUIsS0FBSzhtQixPQUEwQixRQUFwQixFQUFHUCxFQUFXTyxjQUFNLFNBN0JULE9BZ0NsQjltQixLQUFLNG1CLE1BQ1A1bUIsS0FBSzRtQixNQUFRL2IsU0FBUzBkLFlBQVlDLFlBaENSLElBaUNqQnhvQixLQUFLMmdCLElBQ2QzZ0IsS0FBSzJnQixFQUFJOVYsU0FBUzBkLFlBQVlDLFdBQWEsRUFBSXhvQixLQUFLNG1CLE1BQVEsSUFuQ3hDLEdBdUNsQjVtQixLQUFLOG1CLE9BQ1A5bUIsS0FBSzhtQixPQUFTamMsU0FBUzBkLFlBQVlFLGFBdkNULElBd0NqQnpvQixLQUFLMmdCLElBQ2QzZ0IsS0FBS3FqQixFQUFJeFksU0FBUzBkLFlBQVlFLFlBQWMsRUFBSXpvQixLQUFLOG1CLE9BQVMsR0FJaEUsSUFBTTVCLEVBQVNyYSxTQUFTbWEsZUFBZWhsQixLQUFLc29CLGlCQUM1QyxHQUFjLE1BQVZwRCxFQUFKLENBSUFsbEIsS0FBS2tsQixPQUE0QkEsRUFHakMsSUFBTThCLEVBQU1obkIsS0FBS2tsQixPQUFPd0QsV0FBVyxNQUN4QixNQUFQMUIsR0FJSmhuQixLQUFLZ25CLElBQU1BLEVBR1hobkIsS0FBS2tsQixPQUFPNEIsT0FBUzltQixLQUFLOG1CLE9BQzFCOW1CLEtBQUtrbEIsT0FBTzBCLE1BQVE1bUIsS0FBSzRtQixNQUdtQixTQUFsQixRQUF0QixFQUFDTCxFQUFXbkQsa0JBQVUsUUFBSSxhQUM1QnBqQixLQUFLa2xCLE9BQU85WSxNQUFNZ1gsV0FBa0MsUUFBeEIsRUFBR21ELEVBQVduRCxrQkFBVSxRQUFJLFdBR3JEcGpCLEtBQUswSSxPQUNSMUksS0FBSzZFLFFBZkw3RSxLQUFLMEksTUFBUSwwQkFSYjFJLEtBQUswSSxNQUFRLHNCLDByQkNoRG5CLGFBQ0EsU0FJUyxFQUFBaWdCLGlCQUZ1QixFQXNDaEMsSUFBTUMsRUFBa0MsQ0FDdEN6RixVQUFXLEdBQ1grQyxTQUFVLEdBQ1Y1VixPQUFPLEVBQ1BnVCxhQUFjLElBQ2Q2QyxXQUFZLFVBQ1pFLGdCQUFpQixLQUtuQixjQU9FLFdBQW1CRSxHQUFuQixNQUNFLFlBQU1BLElBQVcsSyxPQURBLEVBQUFBLGFBR2pCLEVBQUtBLFdBQWEsRUFBSCxLQUFRcUMsR0FBcUIsRUFBS3JDLGFBM0RyQixJQTZEeEIsRUFBSzVGLElBQ1AsRUFBS0EsRUFBSSxFQUFLaUcsTUFBUSxJQTlESSxJQWdFeEIsRUFBS3ZELElBQ1AsRUFBS0EsRUFBSSxFQUFLeUQsT0FBUyxHQUd6QixFQUFLN0csRUFBSTVQLEtBQUt3WSxJQUFJLEVBQUsvQixPQUFRLEVBQUtGLE9BQVMsRUFBS0wsV0FBV2pELGEsRUF3RmpFLE9BM0d5QixPQXNCaEIsWUFBQXplLEtBQVAsYUFFTyxZQUFBMmhCLEtBQVAsU0FDRS9JLEVBQ0FnSixFQUNBekwsUUFEQSxJQUFBeUwsT0FBQSxRQUNBLElBQUF6TCxPQUFBLEdBR0lBLEdBQ0ZoYixLQUFLZ2IsUUFJUCxJQUFNMEwsRUFBTzFtQixLQUFLdW1CLFdBRVppQixFQUFNL0osRUFBT2dLLFFBQU8sU0FBQ0MsRUFBR0MsR0FBTSxPQUFBRCxFQUFJQyxLQUd4QzNuQixLQUFLOG9CLFNBQVcsRUFHaEIsSUFBSyxJQUFJeG9CLEVBQVksRUFBR0EsRUFBSW1kLEVBQU85YyxPQUFRTCxJQUFLLENBQzlDLElBQU0wQixFQUFpQnliLEVBQU9uZCxHQUFLa25CLEVBQU8sSUFDMUMsR0FBYSxHQUFUeGxCLEVBQUosQ0FJQSxJQUFNaVosRUFBZ0IsRUFBQThLLE9BQU96bEIsRUFBSSxFQUFBeWxCLE9BQU9wbEIsUUFFbENvb0IsRUFBZ0IxWSxLQUFLMlksR0FBSyxHQUFNaG5CLEVBR3RDaEMsS0FBS2duQixJQUFJSSxZQUNUcG5CLEtBQUtnbkIsSUFBSWlDLE9BQU9qcEIsS0FBSzJnQixFQUFHM2dCLEtBQUtxakIsR0FDN0JyakIsS0FBS2duQixJQUFJa0MsSUFDUGxwQixLQUFLMmdCLEVBQ0wzZ0IsS0FBS3FqQixFQUNMcmpCLEtBQUtpZ0IsRUFDTGpnQixLQUFLOG9CLFNBQVcsR0FBTXpZLEtBQUsyWSxHQUMzQmhwQixLQUFLOG9CLFNBQVdDLEVBQWUsR0FBTTFZLEtBQUsyWSxJQUU1Q2hwQixLQUFLZ25CLElBQUllLFVBQVk5TSxFQUNyQmpiLEtBQUtnbkIsSUFBSWdCLE9BQ1Rob0IsS0FBS2duQixJQUFJTyxZQUVULElBQU00QixFQUFPbnBCLEtBQUs4b0IsU0FBV0MsRUFBZSxFQUc1QyxHQUFJdEMsRUFBVSxDQUNaem1CLEtBQUtnbkIsSUFBSWUsVUFBWSxFQUFBRyxlQUNuQmxvQixLQUFLZ25CLElBQUllLFVBQ1RyQixFQUFLTCxpQkFHUHJtQixLQUFLZ25CLElBQUlDLEtBQU9QLEVBQUtSLFNBQVcsTUFBUVEsRUFBS1AsV0FFN0MsSUFBSThCLEVBUUVtQixFQUFpQixJQU5yQm5CLEVBREV2QixFQUFLcFcsTUFDRUQsS0FBS0MsTUFBTXRPLEdBQU0sSUFFakJBLEVBQUssS0FJRnJCLE9BR1Iwb0IsRUFBTXJwQixLQUFLaWdCLEVBQUksR0FDZnFKLEVBQ0p0cEIsS0FBSzJnQixHQUFLdFEsS0FBS2taLElBQUlKLEdBQVFFLEVBQU9ELEVBQUksR0FBTS9ZLEtBQUtrWixJQUFJSixHQUFRLElBQ3pESyxFQUNKeHBCLEtBQUtxakIsR0FBS2hULEtBQUtvWixJQUFJTixHQUFRRSxFQUFNLEtBQVdoWixLQUFLb1osSUFBSU4sR0FBUSxJQUcvRG5wQixLQUFLZ25CLElBQUltQixTQUFTRixFQUFLcUIsRUFBSUUsR0FHN0J4cEIsS0FBSzhvQixVQUFZQyxLQUlkLFlBQUEvTixNQUFQLFdBQ0VoYixLQUFLZ25CLElBQUlvQixVQUFVLEVBQUcsRUFBR3BvQixLQUFLNG1CLE1BQU81bUIsS0FBSzhtQixTQUc5QyxFQTNHQSxDQUF5QixFQUFBdUIsT0FBWixFQUFBbkYsTyxzY0NwRGIsSUFFQSxjQUNFLFdBQ1d6UCxHQURYLE1BR0UsY0FBTyxLLE9BRkUsRUFBQUEsVSxFQW1CYixPQXJCbUMsT0FXMUIsWUFBQWlXLFVBQVAsU0FDRTlqQixHQUVBNUYsS0FBS2lKLEdBQUcsVUFBV3JELElBR1gsWUFBQStqQixZQUFWLFNBQXNCM1csRUFBa0JwSyxHQUN0QzVJLEtBQUt3RyxLQUFLLFVBQVd3TSxFQUFVcEssSUFHbkMsRUFyQkEsQ0FGQSxPQUVtQ2hFLGNBQWIsRUFBQWdsQixRLDRjQ0Z0QixhQUNBLFNBRUEsY0FNRSxXQUFZblcsR0FBWixNQUNFLFlBQU1BLElBQVEsSyxPQUdkLEVBQUs5RSxPQUFTLEVBQUFDLE9BQU8sQ0FDbkI0QyxXQUFZLENBQ1ZZLFFBQVEsRUFDUk4sV0FBVyxHQUViUCxTQUFVLENBQUMsRUFBS2tDLFdBSWxCMU0sUUFBUXNNLElBQUksaUNBQW1DSSxHQUMvQyxFQUFLOUUsT0FBTzRJLFVBQ1p4USxRQUFRc00sSUFBSSxxQkFHWixFQUFLMUUsT0FBTzFGLEdBQ1YsV0FDQSxTQUFDMGUsRUFBV2tDLEVBQWtCamhCLEVBQWlCb1gsR0FDN0MsRUFBSzJKLFlBQVlFLEVBQUU3VyxTQUFVcEssTSxFQUlyQyxPQS9CZ0MsT0ErQmhDLEVBL0JBLENBQWdDLEVBQUFnaEIsTUFBbkIsRUFBQTdHLGMseUJDZWIsU0FBZ0IrRyxFQUFRN0osRUFBVzlPLEVBQVc0WSxFQUFXQyxHQUd2RCxZQUh1RCxJQUFBQSxPQUFBLElBRy9DQSxFQUFjLElBQU0sS0FGcUIsVUFBM0IvSixHQUFLLEdBQU85TyxHQUFLLEVBQUs0WSxJQUM1QmhxQixTQUFTLElBSTNCLFNBQWdCa3FCLEVBQVFDLEdBQ2xCQSxFQUFJM04sV0FBVyxPQUNqQjJOLEVBQU1BLEVBQUluTSxVQUFVLElBR3RCLElBQU1vTSxFQUFjMVQsU0FBU3lULEVBQUssSUFFbEMsTUFBTyxDQUNJQyxHQUFPLEdBQU0sSUFDYkEsR0FBTyxFQUFLLElBQ1AsSUFBTkEsR0FJWixTQUFnQkMsRUFDZG5LLEVBQ0E5TyxFQUNBNFksRUFDQU0sR0FLQSxPQUFPUCxFQUhQN0osRUFBSTVQLEtBQUtpYSxJQUFJLEVBQUdySyxFQUFJb0ssR0FDcEJsWixFQUFJZCxLQUFLaWEsSUFBSSxFQUFHblosRUFBSWtaLEdBQ3BCTixFQUFJMVosS0FBS2lhLElBQUksRUFBR1AsRUFBSU0sSSx1SEE5QmIsRUFBQXRFLE9BZHFCLENBQzVCLFVBQ0EsVUFDQSxVQUNBLFVBQ0EsVUFDQSxVQUNBLFVBQ0EsVUFDQSxVQUNBLFVBQ0EsV0FLRixZQU1BLFlBY0EsbUJBWUEsMEJBQStCbUUsRUFBYUcsR0FDMUMsSUFBTUYsRUFBTUYsRUFBUUMsR0FFcEIsT0FEYUUsRUFBZUQsRUFBSSxHQUFJQSxFQUFJLEdBQUlBLEVBQUksR0FBSUUsSyxxY0NwRHRELElBRUEsY0FNRSxXQUNTalYsRUFDQXVOLFFBREEsSUFBQXZOLE1BQUEsU0FDQSxJQUFBdU4sTUFBQSxHQUZULE1BSUUsY0FBTyxLLE9BSEEsRUFBQXZOLFVBQ0EsRUFBQXVOLGdCQUxELEVBQUE2QyxRQUFrQixFQUNsQixFQUFBK0UsWUFBc0IsRSxFQWlEaEMsT0FyRHlCLE9BZ0JmLFlBQUFDLE9BQVIsV0FDRXhxQixLQUFLd2xCLFVBQ0R4bEIsS0FBS3dsQixTQUFXeGxCLEtBQUtvVixVQUN2QnBWLEtBQUt5cUIsWUFDTHpxQixLQUFLd0csS0FBSyxZQUlQLFlBQUF5VixLQUFQLHNCQUNFamMsS0FBS3VxQixjQUNEdnFCLEtBQUt1cUIsWUFBY3ZxQixLQUFLMmlCLGdCQUk1QjNpQixLQUFLd2xCLFFBQVUsRUFDZnhsQixLQUFLdXFCLFlBQWMsRUFFRCxNQUFkdnFCLEtBQUtpUixRQUNQalIsS0FBS2lSLE1BQVFsRyxPQUFPaUssYUFBWSxXQUFNLFNBQUt3VixXQUFVLEtBQ3JEeHFCLEtBQUt3RyxLQUFLLFlBSVAsWUFBQWlrQixVQUFQLFdBQ016cUIsS0FBS3VrQixhQUNQeFosT0FBT29LLGNBQWNuVixLQUFLaVIsT0FDMUJqUixLQUFLaVIsTUFBUSxNQUlmalIsS0FBS3dsQixRQUFVLEVBQ2Z4bEIsS0FBS3VxQixZQUFjLEdBR2QsWUFBQWhHLFNBQVAsV0FDRSxPQUFxQixNQUFkdmtCLEtBQUtpUixPQUVoQixFQXJEQSxDQUZBLE9BRXlCck0sY0FBWixFQUFBaWUsTyxvSENJYixJQUFNNkgsRUFBd0IsQ0FDNUIsQ0FDRUMsUUFBUyxFQUNUQyxRQUFTLEtBQ1RDLFNBQVUsQ0FBQyxLQUFNLElBQUssTUFBTyxLQUFNLE9BRXJDLENBQ0VGLFFBQVMsRUFDVEMsUUFBUyxJQUNUQyxTQUFVLENBQUMsSUFBSyxRQUVsQixDQUNFRixRQUFTLEVBQ1RDLFFBQVMsS0FDVEMsU0FBVSxDQUFDLEtBQU0sSUFBSyxLQUFNLFVBeUJ2QixFQUFBSCxZQWZULGdDQUFxQ0ksR0FDbkNBLEVBQVVBLEVBQVF6VSxjQUVsQixJQUFLLElBQUkvVixFQUFZLEVBQUdBLEVBQUlvcUIsRUFBVS9wQixPQUFRTCxJQUU1QyxJQURBLElBQU0rakIsRUFBcUJxRyxFQUFVcHFCLEdBQzVCNm1CLEVBQVksRUFBR0EsRUFBSTlDLEVBQVN3RyxTQUFTbHFCLE9BQVF3bUIsSUFDcEQsR0FBSTlDLEVBQVN3RyxTQUFTMUQsSUFBTTJELEVBQzFCLE9BQU96RyxFQUtiLE9BQU8sTyw4ZEMxQ1QsSUFNWUcsRUFOWixTQUlBLFVBRUEsU0FBWUEsR0FDViw2QkFDQSw4QkFGRixDQUFZQSxFQUFBLEVBQUFBLGFBQUEsRUFBQUEsV0FBVSxLQVV0QixrQkFJRSxXQUNTMUIsRUFDQUYsRUFDQW1JLFFBQUEsSUFBQUEsT0FBQSxHQUhULE1BS0UsY0FBTyxLLE9BSkEsRUFBQWpJLE9BQ0EsRUFBQUYsTUFDQSxFQUFBbUksc0JBTkQsRUFBQUMsTUFBK0IsSUFBSUMsSUFDbkMsRUFBQVAsVUFBbUMsSUFBSU8sSUFTN0MsRUFBS25JLEtBQUs0RyxXQUFVLFNBQUMxVyxFQUFrQnBLLEdBQ3JDLEVBQUs4Z0IsVUFBVTFXLEVBQVVwSyxNLEVBdUsvQixPQW5McUMsT0FzQjNCLFlBQUE4Z0IsVUFBUixTQUFrQjFXLEVBQWtCcEssR0FHbEMsR0FBZ0IsTUFBWm9LLEdBQStCLE1BQVhwSyxFQUF4QixDQU1BLElBQU15YixFQUFxQixFQUFBNkcscUJBQXFCdGlCLEdBRWhDLE1BQVp5YixJQUtKcmtCLEtBQUs0aUIsSUFBSTNHLE9BR1RqYyxLQUFLbXJCLE1BQU1uWSxFQUFVcVIsU0FmbkJ0ZCxRQUFRc00sSUFBSSxZQUFhLFFBQVNMLEVBQVUsS0FBTXBLLElBd0IvQyxZQUFBd2lCLFlBQVAsU0FBbUIvRyxHLE1BQ2pCLE9BQW1DLFFBQW5DLEVBQU9ya0IsS0FBSzBxQixVQUFVeGlCLElBQUltYyxVQUFTLFFBQUksR0FZbEMsWUFBQWdILGVBQVAsU0FBc0JoSCxFQUFvQkMsR0FDeEMsSUFBSXRpQixFQUFRaEMsS0FBS29yQixZQUFZL0csR0FHN0IsT0FBUUMsR0FDTixLQUFLRSxFQUFXQyxVQUNkemlCLElBQ0EsTUFDRixLQUFLd2lCLEVBQVc4RyxVQUNkdHBCLElBT0osT0FIQWhDLEtBQUswcUIsVUFBVXZpQixJQUFJa2MsRUFBVXJpQixHQUU3QmhDLEtBQUt3RyxLQUFLLFNBQVU2ZCxFQUFVcmlCLEVBQU9zaUIsR0FDOUJ0aUIsR0FZRixZQUFBbXBCLE1BQVAsU0FBYW5ZLEVBQWtCcVIsR0FFN0IsR0FBZ0MsR0FBNUJya0IsS0FBSytxQixvQkFBNkIsQ0FFcEMsR0FBSS9xQixLQUFLZ3JCLE1BQU0vSCxJQUFJalEsR0FBVyxDQUM1QixJQUFNdVksRUFBd0J2ckIsS0FBS2dyQixNQUFNOWlCLElBQUk4SyxHQUc3QyxHQUFJdVksR0FBZWxILEVBQ2pCLE9BSUZya0IsS0FBS3FyQixlQUFlRSxFQUFhL0csRUFBVzhHLFdBSTlDdHJCLEtBQUtnckIsTUFBTTdpQixJQUFJNkssRUFBVXFSLEdBSTNCcmtCLEtBQUtxckIsZUFBZWhILEVBQVVHLEVBQVdDLFdBR3pDemtCLEtBQUt3RyxLQUFLLFdBQVl3TSxFQUFVcVIsSUFNM0IsWUFBQVEsYUFBUCxXQUNFN2tCLEtBQUtnckIsTUFBTWhRLFFBQ1hoYixLQUFLMHFCLFVBQVUxUCxRQUVmalUsUUFBUXNNLElBQUksWUFBYSwrQkFVcEIsWUFBQW1ZLFVBQVAsc0JBQ1EzaEIsRUFBaUIsR0FDakI1SixFQUEyQixJQUFJZ3JCLElBR3JDLEVBQUFQLFVBQVVsZSxTQUFRLFNBQUM2WCxHQUNqQnBrQixFQUFJa0ksSUFBSWtjLEVBQVNzRyxRQUFTLEVBQUtTLFlBQVkvRyxJQUMzQ3hhLEVBQUtwSyxLQUFLNGtCLEVBQVNzRyxZQU1yQixJQUFLLElBQUlycUIsRUFBSSxFQUFHQSxFQUFJdUosRUFBS2xKLE9BQVFMLElBQy9CLElBQUssSUFBSTZtQixFQUFJLEVBQUdBLEVBQUl0ZCxFQUFLbEosT0FBUXdtQixJQUMvQixHQUFJN21CLEdBQUs2bUIsRUFBVCxDQUlBLElBQU1PLEVBQUk3ZCxFQUFLdkosR0FDVHlwQixFQUFJbGdCLEVBQUtzZCxHQUVYTyxFQUFJcUMsSUFDTmxnQixFQUFLdkosR0FBS3lwQixFQUNWbGdCLEVBQUtzZCxHQUFLTyxHQUtoQixJQUFNeE4sRUFBZ0IsR0FDdEIsSUFBUzVaLEVBQUksRUFBR0EsRUFBSXVKLEVBQUtsSixPQUFRTCxJQUMvQjRaLEVBQUl6YSxLQUFLUSxFQUFJaUksSUFBSTJCLEVBQUt2SixLQUV4QixPQUFPNFosR0FPRixZQUFBd0ssVUFBUCxTQUFpQjFCLEdBQ2YsSUFBTXZGLEVBQW1CemQsS0FBS3dyQixZQUM5QnhJLEVBQU13RCxLQUFLL0ksR0FBUSxHQUFNLElBRTdCLEVBbkxBLENBQXFDLEVBQUE3WSxjQUF4QixFQUFBaWYsbUIsdUJDZlQ0SCxFQUEyQixHQUcvQixTQUFTQyxFQUFvQkMsR0FFNUIsR0FBR0YsRUFBeUJFLEdBQzNCLE9BQU9GLEVBQXlCRSxHQUFVL3JCLFFBRzNDLElBQUlGLEVBQVMrckIsRUFBeUJFLEdBQVksQ0FDakRoc0IsR0FBSWdzQixFQUVKL3JCLFFBQVMsSUFPVixPQUhBZ3NCLEVBQW9CRCxHQUFVcHBCLEtBQUs3QyxFQUFPRSxRQUFTRixFQUFRQSxFQUFPRSxRQUFTOHJCLEdBR3BFaHNCLEVBQU9FLFFDbkJmOHJCLEVBQW9CcnBCLEVBQUszQyxJQUN4QixJQUFJbXNCLEVBQVNuc0IsR0FBVUEsRUFBTzRLLFdBQzdCLElBQU01SyxFQUFnQixRQUN0QixJQUFNQSxFQUVQLE9BREFnc0IsRUFBb0JJLEVBQUVELEVBQVEsQ0FBRW5FLEVBQUdtRSxJQUM1QkEsR0NMUkgsRUFBb0JJLEVBQUksQ0FBQ2xzQixFQUFTbXNCLEtBQ2pDLElBQUksSUFBSW5pQixLQUFPbWlCLEVBQ1hMLEVBQW9CdnBCLEVBQUU0cEIsRUFBWW5pQixLQUFTOGhCLEVBQW9CdnBCLEVBQUV2QyxFQUFTZ0ssSUFDNUVySSxPQUFPeUcsZUFBZXBJLEVBQVNnSyxFQUFLLENBQUUzQixZQUFZLEVBQU1DLElBQUs2akIsRUFBV25pQixNQ0ozRThoQixFQUFvQnZhLEVBQUksV0FDdkIsR0FBMEIsaUJBQWY2YSxXQUF5QixPQUFPQSxXQUMzQyxJQUNDLE9BQU9oc0IsTUFBUSxJQUFJcUUsU0FBUyxjQUFiLEdBQ2QsTUFBTzhHLEdBQ1IsR0FBc0IsaUJBQVhKLE9BQXFCLE9BQU9BLFFBTGpCLEdDQXhCMmdCLEVBQW9CdnBCLEVBQUksQ0FBQ3lKLEVBQUs4YSxJQUFTbmxCLE9BQU9lLFVBQVVxVixlQUFlcFYsS0FBS3FKLEVBQUs4YSxHQ0NqRmdGLEVBQW9CekwsRUFBS3JnQixJQUNILG9CQUFYeUIsUUFBMEJBLE9BQU80cUIsYUFDMUMxcUIsT0FBT3lHLGVBQWVwSSxFQUFTeUIsT0FBTzRxQixZQUFhLENBQUVqcUIsTUFBTyxXQUU3RFQsT0FBT3lHLGVBQWVwSSxFQUFTLGFBQWMsQ0FBRW9DLE9BQU8sS0NIdkQwcEIsRUFBb0IsTSIsImZpbGUiOiJtYWluLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLy8gSW1wb3J0c1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVBJX1NPVVJDRU1BUF9JTVBPUlRfX18gZnJvbSBcIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9jc3NXaXRoTWFwcGluZ1RvU3RyaW5nLmpzXCI7XG5pbXBvcnQgX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fIGZyb20gXCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvYXBpLmpzXCI7XG52YXIgX19fQ1NTX0xPQURFUl9FWFBPUlRfX18gPSBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18oX19fQ1NTX0xPQURFUl9BUElfU09VUkNFTUFQX0lNUE9SVF9fXyk7XG4vLyBNb2R1bGVcbl9fX0NTU19MT0FERVJfRVhQT1JUX19fLnB1c2goW21vZHVsZS5pZCwgXCJcIiwgXCJcIix7XCJ2ZXJzaW9uXCI6MyxcInNvdXJjZXNcIjpbXSxcIm5hbWVzXCI6W10sXCJtYXBwaW5nc1wiOlwiXCIsXCJzb3VyY2VSb290XCI6XCJcIn1dKTtcbi8vIEV4cG9ydHNcbmV4cG9ydCBkZWZhdWx0IF9fX0NTU19MT0FERVJfRVhQT1JUX19fO1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbi8qXG4gIE1JVCBMaWNlbnNlIGh0dHA6Ly93d3cub3BlbnNvdXJjZS5vcmcvbGljZW5zZXMvbWl0LWxpY2Vuc2UucGhwXG4gIEF1dGhvciBUb2JpYXMgS29wcGVycyBAc29rcmFcbiovXG4vLyBjc3MgYmFzZSBjb2RlLCBpbmplY3RlZCBieSB0aGUgY3NzLWxvYWRlclxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGZ1bmMtbmFtZXNcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGNzc1dpdGhNYXBwaW5nVG9TdHJpbmcpIHtcbiAgdmFyIGxpc3QgPSBbXTsgLy8gcmV0dXJuIHRoZSBsaXN0IG9mIG1vZHVsZXMgYXMgY3NzIHN0cmluZ1xuXG4gIGxpc3QudG9TdHJpbmcgPSBmdW5jdGlvbiB0b1N0cmluZygpIHtcbiAgICByZXR1cm4gdGhpcy5tYXAoZnVuY3Rpb24gKGl0ZW0pIHtcbiAgICAgIHZhciBjb250ZW50ID0gY3NzV2l0aE1hcHBpbmdUb1N0cmluZyhpdGVtKTtcblxuICAgICAgaWYgKGl0ZW1bMl0pIHtcbiAgICAgICAgcmV0dXJuIFwiQG1lZGlhIFwiLmNvbmNhdChpdGVtWzJdLCBcIiB7XCIpLmNvbmNhdChjb250ZW50LCBcIn1cIik7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBjb250ZW50O1xuICAgIH0pLmpvaW4oJycpO1xuICB9OyAvLyBpbXBvcnQgYSBsaXN0IG9mIG1vZHVsZXMgaW50byB0aGUgbGlzdFxuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZnVuYy1uYW1lc1xuXG5cbiAgbGlzdC5pID0gZnVuY3Rpb24gKG1vZHVsZXMsIG1lZGlhUXVlcnksIGRlZHVwZSkge1xuICAgIGlmICh0eXBlb2YgbW9kdWxlcyA9PT0gJ3N0cmluZycpIHtcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1wYXJhbS1yZWFzc2lnblxuICAgICAgbW9kdWxlcyA9IFtbbnVsbCwgbW9kdWxlcywgJyddXTtcbiAgICB9XG5cbiAgICB2YXIgYWxyZWFkeUltcG9ydGVkTW9kdWxlcyA9IHt9O1xuXG4gICAgaWYgKGRlZHVwZSkge1xuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBwcmVmZXItZGVzdHJ1Y3R1cmluZ1xuICAgICAgICB2YXIgaWQgPSB0aGlzW2ldWzBdO1xuXG4gICAgICAgIGlmIChpZCAhPSBudWxsKSB7XG4gICAgICAgICAgYWxyZWFkeUltcG9ydGVkTW9kdWxlc1tpZF0gPSB0cnVlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgZm9yICh2YXIgX2kgPSAwOyBfaSA8IG1vZHVsZXMubGVuZ3RoOyBfaSsrKSB7XG4gICAgICB2YXIgaXRlbSA9IFtdLmNvbmNhdChtb2R1bGVzW19pXSk7XG5cbiAgICAgIGlmIChkZWR1cGUgJiYgYWxyZWFkeUltcG9ydGVkTW9kdWxlc1tpdGVtWzBdXSkge1xuICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tY29udGludWVcbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG5cbiAgICAgIGlmIChtZWRpYVF1ZXJ5KSB7XG4gICAgICAgIGlmICghaXRlbVsyXSkge1xuICAgICAgICAgIGl0ZW1bMl0gPSBtZWRpYVF1ZXJ5O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGl0ZW1bMl0gPSBcIlwiLmNvbmNhdChtZWRpYVF1ZXJ5LCBcIiBhbmQgXCIpLmNvbmNhdChpdGVtWzJdKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBsaXN0LnB1c2goaXRlbSk7XG4gICAgfVxuICB9O1xuXG4gIHJldHVybiBsaXN0O1xufTsiLCJcInVzZSBzdHJpY3RcIjtcblxuZnVuY3Rpb24gX3NsaWNlZFRvQXJyYXkoYXJyLCBpKSB7IHJldHVybiBfYXJyYXlXaXRoSG9sZXMoYXJyKSB8fCBfaXRlcmFibGVUb0FycmF5TGltaXQoYXJyLCBpKSB8fCBfdW5zdXBwb3J0ZWRJdGVyYWJsZVRvQXJyYXkoYXJyLCBpKSB8fCBfbm9uSXRlcmFibGVSZXN0KCk7IH1cblxuZnVuY3Rpb24gX25vbkl0ZXJhYmxlUmVzdCgpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkludmFsaWQgYXR0ZW1wdCB0byBkZXN0cnVjdHVyZSBub24taXRlcmFibGUgaW5zdGFuY2UuXFxuSW4gb3JkZXIgdG8gYmUgaXRlcmFibGUsIG5vbi1hcnJheSBvYmplY3RzIG11c3QgaGF2ZSBhIFtTeW1ib2wuaXRlcmF0b3JdKCkgbWV0aG9kLlwiKTsgfVxuXG5mdW5jdGlvbiBfdW5zdXBwb3J0ZWRJdGVyYWJsZVRvQXJyYXkobywgbWluTGVuKSB7IGlmICghbykgcmV0dXJuOyBpZiAodHlwZW9mIG8gPT09IFwic3RyaW5nXCIpIHJldHVybiBfYXJyYXlMaWtlVG9BcnJheShvLCBtaW5MZW4pOyB2YXIgbiA9IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChvKS5zbGljZSg4LCAtMSk7IGlmIChuID09PSBcIk9iamVjdFwiICYmIG8uY29uc3RydWN0b3IpIG4gPSBvLmNvbnN0cnVjdG9yLm5hbWU7IGlmIChuID09PSBcIk1hcFwiIHx8IG4gPT09IFwiU2V0XCIpIHJldHVybiBBcnJheS5mcm9tKG8pOyBpZiAobiA9PT0gXCJBcmd1bWVudHNcIiB8fCAvXig/OlVpfEkpbnQoPzo4fDE2fDMyKSg/OkNsYW1wZWQpP0FycmF5JC8udGVzdChuKSkgcmV0dXJuIF9hcnJheUxpa2VUb0FycmF5KG8sIG1pbkxlbik7IH1cblxuZnVuY3Rpb24gX2FycmF5TGlrZVRvQXJyYXkoYXJyLCBsZW4pIHsgaWYgKGxlbiA9PSBudWxsIHx8IGxlbiA+IGFyci5sZW5ndGgpIGxlbiA9IGFyci5sZW5ndGg7IGZvciAodmFyIGkgPSAwLCBhcnIyID0gbmV3IEFycmF5KGxlbik7IGkgPCBsZW47IGkrKykgeyBhcnIyW2ldID0gYXJyW2ldOyB9IHJldHVybiBhcnIyOyB9XG5cbmZ1bmN0aW9uIF9pdGVyYWJsZVRvQXJyYXlMaW1pdChhcnIsIGkpIHsgaWYgKHR5cGVvZiBTeW1ib2wgPT09IFwidW5kZWZpbmVkXCIgfHwgIShTeW1ib2wuaXRlcmF0b3IgaW4gT2JqZWN0KGFycikpKSByZXR1cm47IHZhciBfYXJyID0gW107IHZhciBfbiA9IHRydWU7IHZhciBfZCA9IGZhbHNlOyB2YXIgX2UgPSB1bmRlZmluZWQ7IHRyeSB7IGZvciAodmFyIF9pID0gYXJyW1N5bWJvbC5pdGVyYXRvcl0oKSwgX3M7ICEoX24gPSAoX3MgPSBfaS5uZXh0KCkpLmRvbmUpOyBfbiA9IHRydWUpIHsgX2Fyci5wdXNoKF9zLnZhbHVlKTsgaWYgKGkgJiYgX2Fyci5sZW5ndGggPT09IGkpIGJyZWFrOyB9IH0gY2F0Y2ggKGVycikgeyBfZCA9IHRydWU7IF9lID0gZXJyOyB9IGZpbmFsbHkgeyB0cnkgeyBpZiAoIV9uICYmIF9pW1wicmV0dXJuXCJdICE9IG51bGwpIF9pW1wicmV0dXJuXCJdKCk7IH0gZmluYWxseSB7IGlmIChfZCkgdGhyb3cgX2U7IH0gfSByZXR1cm4gX2FycjsgfVxuXG5mdW5jdGlvbiBfYXJyYXlXaXRoSG9sZXMoYXJyKSB7IGlmIChBcnJheS5pc0FycmF5KGFycikpIHJldHVybiBhcnI7IH1cblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBjc3NXaXRoTWFwcGluZ1RvU3RyaW5nKGl0ZW0pIHtcbiAgdmFyIF9pdGVtID0gX3NsaWNlZFRvQXJyYXkoaXRlbSwgNCksXG4gICAgICBjb250ZW50ID0gX2l0ZW1bMV0sXG4gICAgICBjc3NNYXBwaW5nID0gX2l0ZW1bM107XG5cbiAgaWYgKHR5cGVvZiBidG9hID09PSAnZnVuY3Rpb24nKSB7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVuZGVmXG4gICAgdmFyIGJhc2U2NCA9IGJ0b2EodW5lc2NhcGUoZW5jb2RlVVJJQ29tcG9uZW50KEpTT04uc3RyaW5naWZ5KGNzc01hcHBpbmcpKSkpO1xuICAgIHZhciBkYXRhID0gXCJzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0PXV0Zi04O2Jhc2U2NCxcIi5jb25jYXQoYmFzZTY0KTtcbiAgICB2YXIgc291cmNlTWFwcGluZyA9IFwiLyojIFwiLmNvbmNhdChkYXRhLCBcIiAqL1wiKTtcbiAgICB2YXIgc291cmNlVVJMcyA9IGNzc01hcHBpbmcuc291cmNlcy5tYXAoZnVuY3Rpb24gKHNvdXJjZSkge1xuICAgICAgcmV0dXJuIFwiLyojIHNvdXJjZVVSTD1cIi5jb25jYXQoY3NzTWFwcGluZy5zb3VyY2VSb290IHx8ICcnKS5jb25jYXQoc291cmNlLCBcIiAqL1wiKTtcbiAgICB9KTtcbiAgICByZXR1cm4gW2NvbnRlbnRdLmNvbmNhdChzb3VyY2VVUkxzKS5jb25jYXQoW3NvdXJjZU1hcHBpbmddKS5qb2luKCdcXG4nKTtcbiAgfVxuXG4gIHJldHVybiBbY29udGVudF0uam9pbignXFxuJyk7XG59OyIsIi8vIENvcHlyaWdodCBKb3llbnQsIEluYy4gYW5kIG90aGVyIE5vZGUgY29udHJpYnV0b3JzLlxuLy9cbi8vIFBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhXG4vLyBjb3B5IG9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvbiBmaWxlcyAodGhlXG4vLyBcIlNvZnR3YXJlXCIpLCB0byBkZWFsIGluIHRoZSBTb2Z0d2FyZSB3aXRob3V0IHJlc3RyaWN0aW9uLCBpbmNsdWRpbmdcbi8vIHdpdGhvdXQgbGltaXRhdGlvbiB0aGUgcmlnaHRzIHRvIHVzZSwgY29weSwgbW9kaWZ5LCBtZXJnZSwgcHVibGlzaCxcbi8vIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsIGNvcGllcyBvZiB0aGUgU29mdHdhcmUsIGFuZCB0byBwZXJtaXRcbi8vIHBlcnNvbnMgdG8gd2hvbSB0aGUgU29mdHdhcmUgaXMgZnVybmlzaGVkIHRvIGRvIHNvLCBzdWJqZWN0IHRvIHRoZVxuLy8gZm9sbG93aW5nIGNvbmRpdGlvbnM6XG4vL1xuLy8gVGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmUgaW5jbHVkZWRcbi8vIGluIGFsbCBjb3BpZXMgb3Igc3Vic3RhbnRpYWwgcG9ydGlvbnMgb2YgdGhlIFNvZnR3YXJlLlxuLy9cbi8vIFRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsIEVYUFJFU1Ncbi8vIE9SIElNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0Zcbi8vIE1FUkNIQU5UQUJJTElUWSwgRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC4gSU5cbi8vIE5PIEVWRU5UIFNIQUxMIFRIRSBBVVRIT1JTIE9SIENPUFlSSUdIVCBIT0xERVJTIEJFIExJQUJMRSBGT1IgQU5ZIENMQUlNLFxuLy8gREFNQUdFUyBPUiBPVEhFUiBMSUFCSUxJVFksIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBUT1JUIE9SXG4vLyBPVEhFUldJU0UsIEFSSVNJTkcgRlJPTSwgT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFXG4vLyBVU0UgT1IgT1RIRVIgREVBTElOR1MgSU4gVEhFIFNPRlRXQVJFLlxuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBSID0gdHlwZW9mIFJlZmxlY3QgPT09ICdvYmplY3QnID8gUmVmbGVjdCA6IG51bGxcbnZhciBSZWZsZWN0QXBwbHkgPSBSICYmIHR5cGVvZiBSLmFwcGx5ID09PSAnZnVuY3Rpb24nXG4gID8gUi5hcHBseVxuICA6IGZ1bmN0aW9uIFJlZmxlY3RBcHBseSh0YXJnZXQsIHJlY2VpdmVyLCBhcmdzKSB7XG4gICAgcmV0dXJuIEZ1bmN0aW9uLnByb3RvdHlwZS5hcHBseS5jYWxsKHRhcmdldCwgcmVjZWl2ZXIsIGFyZ3MpO1xuICB9XG5cbnZhciBSZWZsZWN0T3duS2V5c1xuaWYgKFIgJiYgdHlwZW9mIFIub3duS2V5cyA9PT0gJ2Z1bmN0aW9uJykge1xuICBSZWZsZWN0T3duS2V5cyA9IFIub3duS2V5c1xufSBlbHNlIGlmIChPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKSB7XG4gIFJlZmxlY3RPd25LZXlzID0gZnVuY3Rpb24gUmVmbGVjdE93bktleXModGFyZ2V0KSB7XG4gICAgcmV0dXJuIE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKHRhcmdldClcbiAgICAgIC5jb25jYXQoT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyh0YXJnZXQpKTtcbiAgfTtcbn0gZWxzZSB7XG4gIFJlZmxlY3RPd25LZXlzID0gZnVuY3Rpb24gUmVmbGVjdE93bktleXModGFyZ2V0KSB7XG4gICAgcmV0dXJuIE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKHRhcmdldCk7XG4gIH07XG59XG5cbmZ1bmN0aW9uIFByb2Nlc3NFbWl0V2FybmluZyh3YXJuaW5nKSB7XG4gIGlmIChjb25zb2xlICYmIGNvbnNvbGUud2FybikgY29uc29sZS53YXJuKHdhcm5pbmcpO1xufVxuXG52YXIgTnVtYmVySXNOYU4gPSBOdW1iZXIuaXNOYU4gfHwgZnVuY3Rpb24gTnVtYmVySXNOYU4odmFsdWUpIHtcbiAgcmV0dXJuIHZhbHVlICE9PSB2YWx1ZTtcbn1cblxuZnVuY3Rpb24gRXZlbnRFbWl0dGVyKCkge1xuICBFdmVudEVtaXR0ZXIuaW5pdC5jYWxsKHRoaXMpO1xufVxubW9kdWxlLmV4cG9ydHMgPSBFdmVudEVtaXR0ZXI7XG5tb2R1bGUuZXhwb3J0cy5vbmNlID0gb25jZTtcblxuLy8gQmFja3dhcmRzLWNvbXBhdCB3aXRoIG5vZGUgMC4xMC54XG5FdmVudEVtaXR0ZXIuRXZlbnRFbWl0dGVyID0gRXZlbnRFbWl0dGVyO1xuXG5FdmVudEVtaXR0ZXIucHJvdG90eXBlLl9ldmVudHMgPSB1bmRlZmluZWQ7XG5FdmVudEVtaXR0ZXIucHJvdG90eXBlLl9ldmVudHNDb3VudCA9IDA7XG5FdmVudEVtaXR0ZXIucHJvdG90eXBlLl9tYXhMaXN0ZW5lcnMgPSB1bmRlZmluZWQ7XG5cbi8vIEJ5IGRlZmF1bHQgRXZlbnRFbWl0dGVycyB3aWxsIHByaW50IGEgd2FybmluZyBpZiBtb3JlIHRoYW4gMTAgbGlzdGVuZXJzIGFyZVxuLy8gYWRkZWQgdG8gaXQuIFRoaXMgaXMgYSB1c2VmdWwgZGVmYXVsdCB3aGljaCBoZWxwcyBmaW5kaW5nIG1lbW9yeSBsZWFrcy5cbnZhciBkZWZhdWx0TWF4TGlzdGVuZXJzID0gMTA7XG5cbmZ1bmN0aW9uIGNoZWNrTGlzdGVuZXIobGlzdGVuZXIpIHtcbiAgaWYgKHR5cGVvZiBsaXN0ZW5lciAhPT0gJ2Z1bmN0aW9uJykge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1RoZSBcImxpc3RlbmVyXCIgYXJndW1lbnQgbXVzdCBiZSBvZiB0eXBlIEZ1bmN0aW9uLiBSZWNlaXZlZCB0eXBlICcgKyB0eXBlb2YgbGlzdGVuZXIpO1xuICB9XG59XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShFdmVudEVtaXR0ZXIsICdkZWZhdWx0TWF4TGlzdGVuZXJzJywge1xuICBlbnVtZXJhYmxlOiB0cnVlLFxuICBnZXQ6IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBkZWZhdWx0TWF4TGlzdGVuZXJzO1xuICB9LFxuICBzZXQ6IGZ1bmN0aW9uKGFyZykge1xuICAgIGlmICh0eXBlb2YgYXJnICE9PSAnbnVtYmVyJyB8fCBhcmcgPCAwIHx8IE51bWJlcklzTmFOKGFyZykpIHtcbiAgICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdUaGUgdmFsdWUgb2YgXCJkZWZhdWx0TWF4TGlzdGVuZXJzXCIgaXMgb3V0IG9mIHJhbmdlLiBJdCBtdXN0IGJlIGEgbm9uLW5lZ2F0aXZlIG51bWJlci4gUmVjZWl2ZWQgJyArIGFyZyArICcuJyk7XG4gICAgfVxuICAgIGRlZmF1bHRNYXhMaXN0ZW5lcnMgPSBhcmc7XG4gIH1cbn0pO1xuXG5FdmVudEVtaXR0ZXIuaW5pdCA9IGZ1bmN0aW9uKCkge1xuXG4gIGlmICh0aGlzLl9ldmVudHMgPT09IHVuZGVmaW5lZCB8fFxuICAgICAgdGhpcy5fZXZlbnRzID09PSBPYmplY3QuZ2V0UHJvdG90eXBlT2YodGhpcykuX2V2ZW50cykge1xuICAgIHRoaXMuX2V2ZW50cyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gICAgdGhpcy5fZXZlbnRzQ291bnQgPSAwO1xuICB9XG5cbiAgdGhpcy5fbWF4TGlzdGVuZXJzID0gdGhpcy5fbWF4TGlzdGVuZXJzIHx8IHVuZGVmaW5lZDtcbn07XG5cbi8vIE9idmlvdXNseSBub3QgYWxsIEVtaXR0ZXJzIHNob3VsZCBiZSBsaW1pdGVkIHRvIDEwLiBUaGlzIGZ1bmN0aW9uIGFsbG93c1xuLy8gdGhhdCB0byBiZSBpbmNyZWFzZWQuIFNldCB0byB6ZXJvIGZvciB1bmxpbWl0ZWQuXG5FdmVudEVtaXR0ZXIucHJvdG90eXBlLnNldE1heExpc3RlbmVycyA9IGZ1bmN0aW9uIHNldE1heExpc3RlbmVycyhuKSB7XG4gIGlmICh0eXBlb2YgbiAhPT0gJ251bWJlcicgfHwgbiA8IDAgfHwgTnVtYmVySXNOYU4obikpIHtcbiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignVGhlIHZhbHVlIG9mIFwiblwiIGlzIG91dCBvZiByYW5nZS4gSXQgbXVzdCBiZSBhIG5vbi1uZWdhdGl2ZSBudW1iZXIuIFJlY2VpdmVkICcgKyBuICsgJy4nKTtcbiAgfVxuICB0aGlzLl9tYXhMaXN0ZW5lcnMgPSBuO1xuICByZXR1cm4gdGhpcztcbn07XG5cbmZ1bmN0aW9uIF9nZXRNYXhMaXN0ZW5lcnModGhhdCkge1xuICBpZiAodGhhdC5fbWF4TGlzdGVuZXJzID09PSB1bmRlZmluZWQpXG4gICAgcmV0dXJuIEV2ZW50RW1pdHRlci5kZWZhdWx0TWF4TGlzdGVuZXJzO1xuICByZXR1cm4gdGhhdC5fbWF4TGlzdGVuZXJzO1xufVxuXG5FdmVudEVtaXR0ZXIucHJvdG90eXBlLmdldE1heExpc3RlbmVycyA9IGZ1bmN0aW9uIGdldE1heExpc3RlbmVycygpIHtcbiAgcmV0dXJuIF9nZXRNYXhMaXN0ZW5lcnModGhpcyk7XG59O1xuXG5FdmVudEVtaXR0ZXIucHJvdG90eXBlLmVtaXQgPSBmdW5jdGlvbiBlbWl0KHR5cGUpIHtcbiAgdmFyIGFyZ3MgPSBbXTtcbiAgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIGFyZ3MucHVzaChhcmd1bWVudHNbaV0pO1xuICB2YXIgZG9FcnJvciA9ICh0eXBlID09PSAnZXJyb3InKTtcblxuICB2YXIgZXZlbnRzID0gdGhpcy5fZXZlbnRzO1xuICBpZiAoZXZlbnRzICE9PSB1bmRlZmluZWQpXG4gICAgZG9FcnJvciA9IChkb0Vycm9yICYmIGV2ZW50cy5lcnJvciA9PT0gdW5kZWZpbmVkKTtcbiAgZWxzZSBpZiAoIWRvRXJyb3IpXG4gICAgcmV0dXJuIGZhbHNlO1xuXG4gIC8vIElmIHRoZXJlIGlzIG5vICdlcnJvcicgZXZlbnQgbGlzdGVuZXIgdGhlbiB0aHJvdy5cbiAgaWYgKGRvRXJyb3IpIHtcbiAgICB2YXIgZXI7XG4gICAgaWYgKGFyZ3MubGVuZ3RoID4gMClcbiAgICAgIGVyID0gYXJnc1swXTtcbiAgICBpZiAoZXIgaW5zdGFuY2VvZiBFcnJvcikge1xuICAgICAgLy8gTm90ZTogVGhlIGNvbW1lbnRzIG9uIHRoZSBgdGhyb3dgIGxpbmVzIGFyZSBpbnRlbnRpb25hbCwgdGhleSBzaG93XG4gICAgICAvLyB1cCBpbiBOb2RlJ3Mgb3V0cHV0IGlmIHRoaXMgcmVzdWx0cyBpbiBhbiB1bmhhbmRsZWQgZXhjZXB0aW9uLlxuICAgICAgdGhyb3cgZXI7IC8vIFVuaGFuZGxlZCAnZXJyb3InIGV2ZW50XG4gICAgfVxuICAgIC8vIEF0IGxlYXN0IGdpdmUgc29tZSBraW5kIG9mIGNvbnRleHQgdG8gdGhlIHVzZXJcbiAgICB2YXIgZXJyID0gbmV3IEVycm9yKCdVbmhhbmRsZWQgZXJyb3IuJyArIChlciA/ICcgKCcgKyBlci5tZXNzYWdlICsgJyknIDogJycpKTtcbiAgICBlcnIuY29udGV4dCA9IGVyO1xuICAgIHRocm93IGVycjsgLy8gVW5oYW5kbGVkICdlcnJvcicgZXZlbnRcbiAgfVxuXG4gIHZhciBoYW5kbGVyID0gZXZlbnRzW3R5cGVdO1xuXG4gIGlmIChoYW5kbGVyID09PSB1bmRlZmluZWQpXG4gICAgcmV0dXJuIGZhbHNlO1xuXG4gIGlmICh0eXBlb2YgaGFuZGxlciA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIFJlZmxlY3RBcHBseShoYW5kbGVyLCB0aGlzLCBhcmdzKTtcbiAgfSBlbHNlIHtcbiAgICB2YXIgbGVuID0gaGFuZGxlci5sZW5ndGg7XG4gICAgdmFyIGxpc3RlbmVycyA9IGFycmF5Q2xvbmUoaGFuZGxlciwgbGVuKTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbjsgKytpKVxuICAgICAgUmVmbGVjdEFwcGx5KGxpc3RlbmVyc1tpXSwgdGhpcywgYXJncyk7XG4gIH1cblxuICByZXR1cm4gdHJ1ZTtcbn07XG5cbmZ1bmN0aW9uIF9hZGRMaXN0ZW5lcih0YXJnZXQsIHR5cGUsIGxpc3RlbmVyLCBwcmVwZW5kKSB7XG4gIHZhciBtO1xuICB2YXIgZXZlbnRzO1xuICB2YXIgZXhpc3Rpbmc7XG5cbiAgY2hlY2tMaXN0ZW5lcihsaXN0ZW5lcik7XG5cbiAgZXZlbnRzID0gdGFyZ2V0Ll9ldmVudHM7XG4gIGlmIChldmVudHMgPT09IHVuZGVmaW5lZCkge1xuICAgIGV2ZW50cyA9IHRhcmdldC5fZXZlbnRzID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgICB0YXJnZXQuX2V2ZW50c0NvdW50ID0gMDtcbiAgfSBlbHNlIHtcbiAgICAvLyBUbyBhdm9pZCByZWN1cnNpb24gaW4gdGhlIGNhc2UgdGhhdCB0eXBlID09PSBcIm5ld0xpc3RlbmVyXCIhIEJlZm9yZVxuICAgIC8vIGFkZGluZyBpdCB0byB0aGUgbGlzdGVuZXJzLCBmaXJzdCBlbWl0IFwibmV3TGlzdGVuZXJcIi5cbiAgICBpZiAoZXZlbnRzLm5ld0xpc3RlbmVyICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIHRhcmdldC5lbWl0KCduZXdMaXN0ZW5lcicsIHR5cGUsXG4gICAgICAgICAgICAgICAgICBsaXN0ZW5lci5saXN0ZW5lciA/IGxpc3RlbmVyLmxpc3RlbmVyIDogbGlzdGVuZXIpO1xuXG4gICAgICAvLyBSZS1hc3NpZ24gYGV2ZW50c2AgYmVjYXVzZSBhIG5ld0xpc3RlbmVyIGhhbmRsZXIgY291bGQgaGF2ZSBjYXVzZWQgdGhlXG4gICAgICAvLyB0aGlzLl9ldmVudHMgdG8gYmUgYXNzaWduZWQgdG8gYSBuZXcgb2JqZWN0XG4gICAgICBldmVudHMgPSB0YXJnZXQuX2V2ZW50cztcbiAgICB9XG4gICAgZXhpc3RpbmcgPSBldmVudHNbdHlwZV07XG4gIH1cblxuICBpZiAoZXhpc3RpbmcgPT09IHVuZGVmaW5lZCkge1xuICAgIC8vIE9wdGltaXplIHRoZSBjYXNlIG9mIG9uZSBsaXN0ZW5lci4gRG9uJ3QgbmVlZCB0aGUgZXh0cmEgYXJyYXkgb2JqZWN0LlxuICAgIGV4aXN0aW5nID0gZXZlbnRzW3R5cGVdID0gbGlzdGVuZXI7XG4gICAgKyt0YXJnZXQuX2V2ZW50c0NvdW50O1xuICB9IGVsc2Uge1xuICAgIGlmICh0eXBlb2YgZXhpc3RpbmcgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIC8vIEFkZGluZyB0aGUgc2Vjb25kIGVsZW1lbnQsIG5lZWQgdG8gY2hhbmdlIHRvIGFycmF5LlxuICAgICAgZXhpc3RpbmcgPSBldmVudHNbdHlwZV0gPVxuICAgICAgICBwcmVwZW5kID8gW2xpc3RlbmVyLCBleGlzdGluZ10gOiBbZXhpc3RpbmcsIGxpc3RlbmVyXTtcbiAgICAgIC8vIElmIHdlJ3ZlIGFscmVhZHkgZ290IGFuIGFycmF5LCBqdXN0IGFwcGVuZC5cbiAgICB9IGVsc2UgaWYgKHByZXBlbmQpIHtcbiAgICAgIGV4aXN0aW5nLnVuc2hpZnQobGlzdGVuZXIpO1xuICAgIH0gZWxzZSB7XG4gICAgICBleGlzdGluZy5wdXNoKGxpc3RlbmVyKTtcbiAgICB9XG5cbiAgICAvLyBDaGVjayBmb3IgbGlzdGVuZXIgbGVha1xuICAgIG0gPSBfZ2V0TWF4TGlzdGVuZXJzKHRhcmdldCk7XG4gICAgaWYgKG0gPiAwICYmIGV4aXN0aW5nLmxlbmd0aCA+IG0gJiYgIWV4aXN0aW5nLndhcm5lZCkge1xuICAgICAgZXhpc3Rpbmcud2FybmVkID0gdHJ1ZTtcbiAgICAgIC8vIE5vIGVycm9yIGNvZGUgZm9yIHRoaXMgc2luY2UgaXQgaXMgYSBXYXJuaW5nXG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tcmVzdHJpY3RlZC1zeW50YXhcbiAgICAgIHZhciB3ID0gbmV3IEVycm9yKCdQb3NzaWJsZSBFdmVudEVtaXR0ZXIgbWVtb3J5IGxlYWsgZGV0ZWN0ZWQuICcgK1xuICAgICAgICAgICAgICAgICAgICAgICAgICBleGlzdGluZy5sZW5ndGggKyAnICcgKyBTdHJpbmcodHlwZSkgKyAnIGxpc3RlbmVycyAnICtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgJ2FkZGVkLiBVc2UgZW1pdHRlci5zZXRNYXhMaXN0ZW5lcnMoKSB0byAnICtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgJ2luY3JlYXNlIGxpbWl0Jyk7XG4gICAgICB3Lm5hbWUgPSAnTWF4TGlzdGVuZXJzRXhjZWVkZWRXYXJuaW5nJztcbiAgICAgIHcuZW1pdHRlciA9IHRhcmdldDtcbiAgICAgIHcudHlwZSA9IHR5cGU7XG4gICAgICB3LmNvdW50ID0gZXhpc3RpbmcubGVuZ3RoO1xuICAgICAgUHJvY2Vzc0VtaXRXYXJuaW5nKHcpO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiB0YXJnZXQ7XG59XG5cbkV2ZW50RW1pdHRlci5wcm90b3R5cGUuYWRkTGlzdGVuZXIgPSBmdW5jdGlvbiBhZGRMaXN0ZW5lcih0eXBlLCBsaXN0ZW5lcikge1xuICByZXR1cm4gX2FkZExpc3RlbmVyKHRoaXMsIHR5cGUsIGxpc3RlbmVyLCBmYWxzZSk7XG59O1xuXG5FdmVudEVtaXR0ZXIucHJvdG90eXBlLm9uID0gRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5hZGRMaXN0ZW5lcjtcblxuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5wcmVwZW5kTGlzdGVuZXIgPVxuICAgIGZ1bmN0aW9uIHByZXBlbmRMaXN0ZW5lcih0eXBlLCBsaXN0ZW5lcikge1xuICAgICAgcmV0dXJuIF9hZGRMaXN0ZW5lcih0aGlzLCB0eXBlLCBsaXN0ZW5lciwgdHJ1ZSk7XG4gICAgfTtcblxuZnVuY3Rpb24gb25jZVdyYXBwZXIoKSB7XG4gIGlmICghdGhpcy5maXJlZCkge1xuICAgIHRoaXMudGFyZ2V0LnJlbW92ZUxpc3RlbmVyKHRoaXMudHlwZSwgdGhpcy53cmFwRm4pO1xuICAgIHRoaXMuZmlyZWQgPSB0cnVlO1xuICAgIGlmIChhcmd1bWVudHMubGVuZ3RoID09PSAwKVxuICAgICAgcmV0dXJuIHRoaXMubGlzdGVuZXIuY2FsbCh0aGlzLnRhcmdldCk7XG4gICAgcmV0dXJuIHRoaXMubGlzdGVuZXIuYXBwbHkodGhpcy50YXJnZXQsIGFyZ3VtZW50cyk7XG4gIH1cbn1cblxuZnVuY3Rpb24gX29uY2VXcmFwKHRhcmdldCwgdHlwZSwgbGlzdGVuZXIpIHtcbiAgdmFyIHN0YXRlID0geyBmaXJlZDogZmFsc2UsIHdyYXBGbjogdW5kZWZpbmVkLCB0YXJnZXQ6IHRhcmdldCwgdHlwZTogdHlwZSwgbGlzdGVuZXI6IGxpc3RlbmVyIH07XG4gIHZhciB3cmFwcGVkID0gb25jZVdyYXBwZXIuYmluZChzdGF0ZSk7XG4gIHdyYXBwZWQubGlzdGVuZXIgPSBsaXN0ZW5lcjtcbiAgc3RhdGUud3JhcEZuID0gd3JhcHBlZDtcbiAgcmV0dXJuIHdyYXBwZWQ7XG59XG5cbkV2ZW50RW1pdHRlci5wcm90b3R5cGUub25jZSA9IGZ1bmN0aW9uIG9uY2UodHlwZSwgbGlzdGVuZXIpIHtcbiAgY2hlY2tMaXN0ZW5lcihsaXN0ZW5lcik7XG4gIHRoaXMub24odHlwZSwgX29uY2VXcmFwKHRoaXMsIHR5cGUsIGxpc3RlbmVyKSk7XG4gIHJldHVybiB0aGlzO1xufTtcblxuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5wcmVwZW5kT25jZUxpc3RlbmVyID1cbiAgICBmdW5jdGlvbiBwcmVwZW5kT25jZUxpc3RlbmVyKHR5cGUsIGxpc3RlbmVyKSB7XG4gICAgICBjaGVja0xpc3RlbmVyKGxpc3RlbmVyKTtcbiAgICAgIHRoaXMucHJlcGVuZExpc3RlbmVyKHR5cGUsIF9vbmNlV3JhcCh0aGlzLCB0eXBlLCBsaXN0ZW5lcikpO1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfTtcblxuLy8gRW1pdHMgYSAncmVtb3ZlTGlzdGVuZXInIGV2ZW50IGlmIGFuZCBvbmx5IGlmIHRoZSBsaXN0ZW5lciB3YXMgcmVtb3ZlZC5cbkV2ZW50RW1pdHRlci5wcm90b3R5cGUucmVtb3ZlTGlzdGVuZXIgPVxuICAgIGZ1bmN0aW9uIHJlbW92ZUxpc3RlbmVyKHR5cGUsIGxpc3RlbmVyKSB7XG4gICAgICB2YXIgbGlzdCwgZXZlbnRzLCBwb3NpdGlvbiwgaSwgb3JpZ2luYWxMaXN0ZW5lcjtcblxuICAgICAgY2hlY2tMaXN0ZW5lcihsaXN0ZW5lcik7XG5cbiAgICAgIGV2ZW50cyA9IHRoaXMuX2V2ZW50cztcbiAgICAgIGlmIChldmVudHMgPT09IHVuZGVmaW5lZClcbiAgICAgICAgcmV0dXJuIHRoaXM7XG5cbiAgICAgIGxpc3QgPSBldmVudHNbdHlwZV07XG4gICAgICBpZiAobGlzdCA9PT0gdW5kZWZpbmVkKVxuICAgICAgICByZXR1cm4gdGhpcztcblxuICAgICAgaWYgKGxpc3QgPT09IGxpc3RlbmVyIHx8IGxpc3QubGlzdGVuZXIgPT09IGxpc3RlbmVyKSB7XG4gICAgICAgIGlmICgtLXRoaXMuX2V2ZW50c0NvdW50ID09PSAwKVxuICAgICAgICAgIHRoaXMuX2V2ZW50cyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgIGRlbGV0ZSBldmVudHNbdHlwZV07XG4gICAgICAgICAgaWYgKGV2ZW50cy5yZW1vdmVMaXN0ZW5lcilcbiAgICAgICAgICAgIHRoaXMuZW1pdCgncmVtb3ZlTGlzdGVuZXInLCB0eXBlLCBsaXN0Lmxpc3RlbmVyIHx8IGxpc3RlbmVyKTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmICh0eXBlb2YgbGlzdCAhPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICBwb3NpdGlvbiA9IC0xO1xuXG4gICAgICAgIGZvciAoaSA9IGxpc3QubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIHtcbiAgICAgICAgICBpZiAobGlzdFtpXSA9PT0gbGlzdGVuZXIgfHwgbGlzdFtpXS5saXN0ZW5lciA9PT0gbGlzdGVuZXIpIHtcbiAgICAgICAgICAgIG9yaWdpbmFsTGlzdGVuZXIgPSBsaXN0W2ldLmxpc3RlbmVyO1xuICAgICAgICAgICAgcG9zaXRpb24gPSBpO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHBvc2l0aW9uIDwgMClcbiAgICAgICAgICByZXR1cm4gdGhpcztcblxuICAgICAgICBpZiAocG9zaXRpb24gPT09IDApXG4gICAgICAgICAgbGlzdC5zaGlmdCgpO1xuICAgICAgICBlbHNlIHtcbiAgICAgICAgICBzcGxpY2VPbmUobGlzdCwgcG9zaXRpb24pO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGxpc3QubGVuZ3RoID09PSAxKVxuICAgICAgICAgIGV2ZW50c1t0eXBlXSA9IGxpc3RbMF07XG5cbiAgICAgICAgaWYgKGV2ZW50cy5yZW1vdmVMaXN0ZW5lciAhPT0gdW5kZWZpbmVkKVxuICAgICAgICAgIHRoaXMuZW1pdCgncmVtb3ZlTGlzdGVuZXInLCB0eXBlLCBvcmlnaW5hbExpc3RlbmVyIHx8IGxpc3RlbmVyKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfTtcblxuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5vZmYgPSBFdmVudEVtaXR0ZXIucHJvdG90eXBlLnJlbW92ZUxpc3RlbmVyO1xuXG5FdmVudEVtaXR0ZXIucHJvdG90eXBlLnJlbW92ZUFsbExpc3RlbmVycyA9XG4gICAgZnVuY3Rpb24gcmVtb3ZlQWxsTGlzdGVuZXJzKHR5cGUpIHtcbiAgICAgIHZhciBsaXN0ZW5lcnMsIGV2ZW50cywgaTtcblxuICAgICAgZXZlbnRzID0gdGhpcy5fZXZlbnRzO1xuICAgICAgaWYgKGV2ZW50cyA9PT0gdW5kZWZpbmVkKVxuICAgICAgICByZXR1cm4gdGhpcztcblxuICAgICAgLy8gbm90IGxpc3RlbmluZyBmb3IgcmVtb3ZlTGlzdGVuZXIsIG5vIG5lZWQgdG8gZW1pdFxuICAgICAgaWYgKGV2ZW50cy5yZW1vdmVMaXN0ZW5lciA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIGlmIChhcmd1bWVudHMubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgdGhpcy5fZXZlbnRzID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgICAgICAgICB0aGlzLl9ldmVudHNDb3VudCA9IDA7XG4gICAgICAgIH0gZWxzZSBpZiAoZXZlbnRzW3R5cGVdICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICBpZiAoLS10aGlzLl9ldmVudHNDb3VudCA9PT0gMClcbiAgICAgICAgICAgIHRoaXMuX2V2ZW50cyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gICAgICAgICAgZWxzZVxuICAgICAgICAgICAgZGVsZXRlIGV2ZW50c1t0eXBlXTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgIH1cblxuICAgICAgLy8gZW1pdCByZW1vdmVMaXN0ZW5lciBmb3IgYWxsIGxpc3RlbmVycyBvbiBhbGwgZXZlbnRzXG4gICAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICB2YXIga2V5cyA9IE9iamVjdC5rZXlzKGV2ZW50cyk7XG4gICAgICAgIHZhciBrZXk7XG4gICAgICAgIGZvciAoaSA9IDA7IGkgPCBrZXlzLmxlbmd0aDsgKytpKSB7XG4gICAgICAgICAga2V5ID0ga2V5c1tpXTtcbiAgICAgICAgICBpZiAoa2V5ID09PSAncmVtb3ZlTGlzdGVuZXInKSBjb250aW51ZTtcbiAgICAgICAgICB0aGlzLnJlbW92ZUFsbExpc3RlbmVycyhrZXkpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMucmVtb3ZlQWxsTGlzdGVuZXJzKCdyZW1vdmVMaXN0ZW5lcicpO1xuICAgICAgICB0aGlzLl9ldmVudHMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICAgICAgICB0aGlzLl9ldmVudHNDb3VudCA9IDA7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgfVxuXG4gICAgICBsaXN0ZW5lcnMgPSBldmVudHNbdHlwZV07XG5cbiAgICAgIGlmICh0eXBlb2YgbGlzdGVuZXJzID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIHRoaXMucmVtb3ZlTGlzdGVuZXIodHlwZSwgbGlzdGVuZXJzKTtcbiAgICAgIH0gZWxzZSBpZiAobGlzdGVuZXJzICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgLy8gTElGTyBvcmRlclxuICAgICAgICBmb3IgKGkgPSBsaXN0ZW5lcnMubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIHtcbiAgICAgICAgICB0aGlzLnJlbW92ZUxpc3RlbmVyKHR5cGUsIGxpc3RlbmVyc1tpXSk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfTtcblxuZnVuY3Rpb24gX2xpc3RlbmVycyh0YXJnZXQsIHR5cGUsIHVud3JhcCkge1xuICB2YXIgZXZlbnRzID0gdGFyZ2V0Ll9ldmVudHM7XG5cbiAgaWYgKGV2ZW50cyA9PT0gdW5kZWZpbmVkKVxuICAgIHJldHVybiBbXTtcblxuICB2YXIgZXZsaXN0ZW5lciA9IGV2ZW50c1t0eXBlXTtcbiAgaWYgKGV2bGlzdGVuZXIgPT09IHVuZGVmaW5lZClcbiAgICByZXR1cm4gW107XG5cbiAgaWYgKHR5cGVvZiBldmxpc3RlbmVyID09PSAnZnVuY3Rpb24nKVxuICAgIHJldHVybiB1bndyYXAgPyBbZXZsaXN0ZW5lci5saXN0ZW5lciB8fCBldmxpc3RlbmVyXSA6IFtldmxpc3RlbmVyXTtcblxuICByZXR1cm4gdW53cmFwID9cbiAgICB1bndyYXBMaXN0ZW5lcnMoZXZsaXN0ZW5lcikgOiBhcnJheUNsb25lKGV2bGlzdGVuZXIsIGV2bGlzdGVuZXIubGVuZ3RoKTtcbn1cblxuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5saXN0ZW5lcnMgPSBmdW5jdGlvbiBsaXN0ZW5lcnModHlwZSkge1xuICByZXR1cm4gX2xpc3RlbmVycyh0aGlzLCB0eXBlLCB0cnVlKTtcbn07XG5cbkV2ZW50RW1pdHRlci5wcm90b3R5cGUucmF3TGlzdGVuZXJzID0gZnVuY3Rpb24gcmF3TGlzdGVuZXJzKHR5cGUpIHtcbiAgcmV0dXJuIF9saXN0ZW5lcnModGhpcywgdHlwZSwgZmFsc2UpO1xufTtcblxuRXZlbnRFbWl0dGVyLmxpc3RlbmVyQ291bnQgPSBmdW5jdGlvbihlbWl0dGVyLCB0eXBlKSB7XG4gIGlmICh0eXBlb2YgZW1pdHRlci5saXN0ZW5lckNvdW50ID09PSAnZnVuY3Rpb24nKSB7XG4gICAgcmV0dXJuIGVtaXR0ZXIubGlzdGVuZXJDb3VudCh0eXBlKTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gbGlzdGVuZXJDb3VudC5jYWxsKGVtaXR0ZXIsIHR5cGUpO1xuICB9XG59O1xuXG5FdmVudEVtaXR0ZXIucHJvdG90eXBlLmxpc3RlbmVyQ291bnQgPSBsaXN0ZW5lckNvdW50O1xuZnVuY3Rpb24gbGlzdGVuZXJDb3VudCh0eXBlKSB7XG4gIHZhciBldmVudHMgPSB0aGlzLl9ldmVudHM7XG5cbiAgaWYgKGV2ZW50cyAhPT0gdW5kZWZpbmVkKSB7XG4gICAgdmFyIGV2bGlzdGVuZXIgPSBldmVudHNbdHlwZV07XG5cbiAgICBpZiAodHlwZW9mIGV2bGlzdGVuZXIgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIHJldHVybiAxO1xuICAgIH0gZWxzZSBpZiAoZXZsaXN0ZW5lciAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICByZXR1cm4gZXZsaXN0ZW5lci5sZW5ndGg7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIDA7XG59XG5cbkV2ZW50RW1pdHRlci5wcm90b3R5cGUuZXZlbnROYW1lcyA9IGZ1bmN0aW9uIGV2ZW50TmFtZXMoKSB7XG4gIHJldHVybiB0aGlzLl9ldmVudHNDb3VudCA+IDAgPyBSZWZsZWN0T3duS2V5cyh0aGlzLl9ldmVudHMpIDogW107XG59O1xuXG5mdW5jdGlvbiBhcnJheUNsb25lKGFyciwgbikge1xuICB2YXIgY29weSA9IG5ldyBBcnJheShuKTtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBuOyArK2kpXG4gICAgY29weVtpXSA9IGFycltpXTtcbiAgcmV0dXJuIGNvcHk7XG59XG5cbmZ1bmN0aW9uIHNwbGljZU9uZShsaXN0LCBpbmRleCkge1xuICBmb3IgKDsgaW5kZXggKyAxIDwgbGlzdC5sZW5ndGg7IGluZGV4KyspXG4gICAgbGlzdFtpbmRleF0gPSBsaXN0W2luZGV4ICsgMV07XG4gIGxpc3QucG9wKCk7XG59XG5cbmZ1bmN0aW9uIHVud3JhcExpc3RlbmVycyhhcnIpIHtcbiAgdmFyIHJldCA9IG5ldyBBcnJheShhcnIubGVuZ3RoKTtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCByZXQubGVuZ3RoOyArK2kpIHtcbiAgICByZXRbaV0gPSBhcnJbaV0ubGlzdGVuZXIgfHwgYXJyW2ldO1xuICB9XG4gIHJldHVybiByZXQ7XG59XG5cbmZ1bmN0aW9uIG9uY2UoZW1pdHRlciwgbmFtZSkge1xuICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xuICAgIGZ1bmN0aW9uIGV2ZW50TGlzdGVuZXIoKSB7XG4gICAgICBpZiAoZXJyb3JMaXN0ZW5lciAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIGVtaXR0ZXIucmVtb3ZlTGlzdGVuZXIoJ2Vycm9yJywgZXJyb3JMaXN0ZW5lcik7XG4gICAgICB9XG4gICAgICByZXNvbHZlKFtdLnNsaWNlLmNhbGwoYXJndW1lbnRzKSk7XG4gICAgfTtcbiAgICB2YXIgZXJyb3JMaXN0ZW5lcjtcblxuICAgIC8vIEFkZGluZyBhbiBlcnJvciBsaXN0ZW5lciBpcyBub3Qgb3B0aW9uYWwgYmVjYXVzZVxuICAgIC8vIGlmIGFuIGVycm9yIGlzIHRocm93biBvbiBhbiBldmVudCBlbWl0dGVyIHdlIGNhbm5vdFxuICAgIC8vIGd1YXJhbnRlZSB0aGF0IHRoZSBhY3R1YWwgZXZlbnQgd2UgYXJlIHdhaXRpbmcgd2lsbFxuICAgIC8vIGJlIGZpcmVkLiBUaGUgcmVzdWx0IGNvdWxkIGJlIGEgc2lsZW50IHdheSB0byBjcmVhdGVcbiAgICAvLyBtZW1vcnkgb3IgZmlsZSBkZXNjcmlwdG9yIGxlYWtzLCB3aGljaCBpcyBzb21ldGhpbmdcbiAgICAvLyB3ZSBzaG91bGQgYXZvaWQuXG4gICAgaWYgKG5hbWUgIT09ICdlcnJvcicpIHtcbiAgICAgIGVycm9yTGlzdGVuZXIgPSBmdW5jdGlvbiBlcnJvckxpc3RlbmVyKGVycikge1xuICAgICAgICBlbWl0dGVyLnJlbW92ZUxpc3RlbmVyKG5hbWUsIGV2ZW50TGlzdGVuZXIpO1xuICAgICAgICByZWplY3QoZXJyKTtcbiAgICAgIH07XG5cbiAgICAgIGVtaXR0ZXIub25jZSgnZXJyb3InLCBlcnJvckxpc3RlbmVyKTtcbiAgICB9XG5cbiAgICBlbWl0dGVyLm9uY2UobmFtZSwgZXZlbnRMaXN0ZW5lcik7XG4gIH0pO1xufVxuIiwiZXhwb3J0IGRlZmF1bHQgXCIuLzMxY2ZiMmYwYWM0ZjIxMTc5MTlmZmQxN2NlYjUwNDVmLnBuZ1wiOyIsImV4cG9ydCBkZWZhdWx0IFwiLi9lMDQ1N2I1ZmU4MjhiYjkyODA5Yzk5OTA1YWU0ZGYzNi5wbmdcIjsiLCIvLyBJbXBvcnRzXG52YXIgX19fSFRNTF9MT0FERVJfR0VUX1NPVVJDRV9GUk9NX0lNUE9SVF9fXyA9IHJlcXVpcmUoXCIuLi9ub2RlX21vZHVsZXMvaHRtbC1sb2FkZXIvZGlzdC9ydW50aW1lL2dldFVybC5qc1wiKTtcbnZhciBfX19IVE1MX0xPQURFUl9JTVBPUlRfMF9fXyA9IHJlcXVpcmUoXCIuL2Fzc2V0cy9pbWcvaW1nX2Jhci5wbmdcIik7XG52YXIgX19fSFRNTF9MT0FERVJfSU1QT1JUXzFfX18gPSByZXF1aXJlKFwiLi9hc3NldHMvaW1nL2ltZ19waWUucG5nXCIpO1xuLy8gTW9kdWxlXG52YXIgX19fSFRNTF9MT0FERVJfUkVQTEFDRU1FTlRfMF9fXyA9IF9fX0hUTUxfTE9BREVSX0dFVF9TT1VSQ0VfRlJPTV9JTVBPUlRfX18oX19fSFRNTF9MT0FERVJfSU1QT1JUXzBfX18pO1xudmFyIF9fX0hUTUxfTE9BREVSX1JFUExBQ0VNRU5UXzFfX18gPSBfX19IVE1MX0xPQURFUl9HRVRfU09VUkNFX0ZST01fSU1QT1JUX19fKF9fX0hUTUxfTE9BREVSX0lNUE9SVF8xX19fKTtcbnZhciBjb2RlID0gXCI8IURPQ1RZUEUgaHRtbD4gPGh0bWwgbGFuZz1cXFwiZW5cXFwiPiA8aGVhZD4gPG1ldGEgY2hhcnNldD1cXFwiVVRGLThcXFwiLz4gPG1ldGEgbmFtZT1cXFwidmlld3BvcnRcXFwiIGNvbnRlbnQ9XFxcIndpZHRoPWRldmljZS13aWR0aCxpbml0aWFsLXNjYWxlPTFcXFwiLz4gPHRpdGxlPkJ1aWxkZXI8L3RpdGxlPiA8bGluayBocmVmPVxcXCJodHRwczovL2Nkbi5qc2RlbGl2ci5uZXQvbnBtL2Jvb3RzdHJhcEA1LjAuMC1iZXRhMS9kaXN0L2Nzcy9ib290c3RyYXAubWluLmNzc1xcXCIgcmVsPVxcXCJzdHlsZXNoZWV0XFxcIiBpbnRlZ3JpdHk9XFxcInNoYTM4NC1naUpGNmtrb3FOUTAwdnkrSE1EUDdhek91TDB4dGJmSWNhVDl3aktIcjhSYkRWZGRWSHlUZkFBc3Jla3dLbVAxXFxcIiBjcm9zc29yaWdpbj1cXFwiYW5vbnltb3VzXFxcIi8+IDxzY3JpcHQgc3JjPVxcXCJodHRwczovL2Nkbi5qc2RlbGl2ci5uZXQvbnBtL2Jvb3RzdHJhcEA1LjAuMC1iZXRhMS9kaXN0L2pzL2Jvb3RzdHJhcC5idW5kbGUubWluLmpzXFxcIiBpbnRlZ3JpdHk9XFxcInNoYTM4NC15Z2JWOWtpcVVjNm9hNG1zWG45ODY4cFR0V01naVFhZVlINy90N0xFQ0xieVBBMng2NUtnZjgwT0pGZHJvYWZXXFxcIiBjcm9zc29yaWdpbj1cXFwiYW5vbnltb3VzXFxcIj48L3NjcmlwdD4gPHNjcmlwdCBzcmM9XFxcImh0dHBzOi8vYWpheC5nb29nbGVhcGlzLmNvbS9hamF4L2xpYnMvanF1ZXJ5LzMuNS4xL2pxdWVyeS5taW4uanNcXFwiPjwvc2NyaXB0PiA8c3R5bGU+PC9zdHlsZT4gPC9oZWFkPiA8Ym9keT4gPGhlYWRlcj4gPG5hdiBjbGFzcz1cXFwibmF2YmFyIG5hdmJhci1leHBhbmQtbWQgbmF2YmFyLWRhcmsgYmctZGFya1xcXCI+IDxhIGNsYXNzPVxcXCJuYXZiYXItYnJhbmRcXFwiIGhyZWY9XFxcIiNcXFwiPkJ1aWxkZXI8L2E+IDwvbmF2PiA8L2hlYWRlcj4gPG1haW4gcm9sZT1cXFwibWFpblxcXCIgY2xhc3M9XFxcImNvbnRhaW5lclxcXCI+IDxoMSBjbGFzcz1cXFwibXQtNVxcXCI+UG9sbCBPdmVybGF5IEJ1aWxkZXI8L2gxPiA8cCBjbGFzcz1cXFwibGVhZFxcXCI+IEhlcmUgeW91IGNhbiBlYXNpbHkgY3VzdG9taXplIHRoZSBvdmVybGF5LiA8YnIvPiBXaGVuIHlvdSdyZSBkb25lLCBwcmVzcyB0aGUgYnV0dG9uIGF0IHRoZSBib3R0b20sIGFuZCB0aGVuIHVzZSB0aGUgb3V0cHV0IFVSTCBhcyB0aGUgd2ViIGJyb3dzZXIgVVJMIGluIHlvdXIgc3RyZWFtIHByb2dyYW0uIDwvcD4gPGhyLz4gPGZvcm0gaWQ9XFxcImZvcm1cXFwiPiA8ZGl2IGNsYXNzPVxcXCJmb3JtLWdyb3VwXFxcIj4gPGxhYmVsIGZvcj1cXFwiY2hhbm5lbFxcXCI+Q2hhbm5lbDo8L2xhYmVsPiA8aW5wdXQgdHlwZT1cXFwidGV4dFxcXCIgY2xhc3M9XFxcImZvcm0tY29udHJvbFxcXCIgaWQ9XFxcImNoYW5uZWxcXFwiIG5hbWU9XFxcImNoYW5uZWxcXFwiIHBsYWNlaG9sZGVyPVxcXCJkMmFuaWVsXFxcIiByZXF1aXJlZC8+IDxzbWFsbCBpZD1cXFwiY2hhbm5lbE5vdGljZVxcXCIgY2xhc3M9XFxcImZvcm0tdGV4dCB0ZXh0LW11dGVkXFxcIj5FbnRlciBoZXJlIHRoZSBjaGFubmVsIG5hbWUgb25seS4gV2l0aG91dCA8Y29kZT5odHRwczovL3R3aXRjaC50di88L2NvZGU+PC9zbWFsbD4gPC9kaXY+IDxkaXYgY2xhc3M9XFxcImZvcm0tZ3JvdXBcXFwiPiA8YnIvPiA8cCBjbGFzcz1cXFwiZm9ybS1jaGVjay1sYWJlbFxcXCI+VHlwZTo8L3A+IDxkaXYgY2xhc3M9XFxcImZvcm0tY2hlY2sgZm9ybS1jaGVjay1pbmxpbmVcXFwiPiA8aW5wdXQgY2xhc3M9XFxcImZvcm0tY2hlY2staW5wdXRcXFwiIHR5cGU9XFxcInJhZGlvXFxcIiBuYW1lPVxcXCJ0eXBlXFxcIiBpZD1cXFwidHlwZV9iYXJcXFwiIHZhbHVlPVxcXCJiYXJcXFwiIGNoZWNrZWQ9XFxcImNoZWNrZWRcXFwiLz4gPGxhYmVsIGNsYXNzPVxcXCJmb3JtLWNoZWNrLWxhYmVsXFxcIiBmb3I9XFxcInR5cGVfYmFyXFxcIj4gPGltZyBzcmM9XFxcIlwiICsgX19fSFRNTF9MT0FERVJfUkVQTEFDRU1FTlRfMF9fXyArIFwiXFxcIiBhbHQ9XFxcIkJhclxcXCIvPiA8L2xhYmVsPiA8L2Rpdj4gPGRpdiBjbGFzcz1cXFwiZm9ybS1jaGVjayBmb3JtLWNoZWNrLWlubGluZVxcXCI+IDxpbnB1dCBjbGFzcz1cXFwiZm9ybS1jaGVjay1pbnB1dFxcXCIgdHlwZT1cXFwicmFkaW9cXFwiIG5hbWU9XFxcInR5cGVcXFwiIGlkPVxcXCJ0eXBlX3BpZVxcXCIgdmFsdWU9XFxcInBpZVxcXCIvPiA8bGFiZWwgY2xhc3M9XFxcImZvcm0tY2hlY2stbGFiZWxcXFwiIGZvcj1cXFwidHlwZV9waWVcXFwiPiA8aW1nIHNyYz1cXFwiXCIgKyBfX19IVE1MX0xPQURFUl9SRVBMQUNFTUVOVF8xX19fICsgXCJcXFwiIGFsdD1cXFwiUGllXFxcIi8+IDwvbGFiZWw+IDwvZGl2PiA8L2Rpdj4gPGhyLz4gPGgzPkFkdmFuY2VkOjwvaDM+IDxkaXYgY2xhc3M9XFxcImZvcm0tZ3JvdXBcXFwiPiA8bGFiZWwgZm9yPVxcXCJ0aW1lb3V0XFxcIj5UaW1lb3V0OjwvbGFiZWw+IDxpbnB1dCB0eXBlPVxcXCJudW1iZXJcXFwiIGNsYXNzPVxcXCJmb3JtLWNvbnRyb2xcXFwiIGlkPVxcXCJ0aW1lb3V0XFxcIiBuYW1lPVxcXCJ0aW1lb3V0XFxcIiB2YWx1ZT1cXFwiMTBcXFwiLz4gPC9kaXY+IDxkaXYgY2xhc3M9XFxcImZvcm0tZ3JvdXBcXFwiPiA8bGFiZWwgZm9yPVxcXCJyZXF1aXJlZFBpbmdzXFxcIj5SZXF1aXJlZCBSZWFjdGlvbnM6PC9sYWJlbD4gPGlucHV0IHR5cGU9XFxcIm51bWJlclxcXCIgY2xhc3M9XFxcImZvcm0tY29udHJvbFxcXCIgaWQ9XFxcInJlcXVpcmVkUGluZ3NcXFwiIG5hbWU9XFxcInJlcXVpcmVkUGluZ3NcXFwiIHZhbHVlPVxcXCIzXFxcIi8+IDwvZGl2PiA8c21hbGwgaWQ9XFxcInRpbWVvdXRfcmVxdWlyZWRwaW5nc19ub3RpY2VcXFwiIGNsYXNzPVxcXCJmb3JtLXRleHQgdGV4dC1tdXRlZFxcXCI+IDx1bD4gPGxpPiBUaGUgb3ZlcmxheSB3aWxsIGJlIDxzdHJvbmc+c2hvd248L3N0cm9uZz4gaWYgbW9yZSB0aGFuIDxjb2RlIGNsYXNzPVxcXCJzbWluZl9yZXFwXFxcIj57UmVxdWlyZWQgUGluZ3N9PC9jb2RlPiByZWFjdGlvbnMgd2VyZSBkZXRlY3RlZCBpbiA8Y29kZSBjbGFzcz1cXFwic21pbmZfdG9cXFwiPntUaW1lb3V0fTwvY29kZT4gc2Vjb25kcyA8L2xpPiA8bGk+IFRoZSBvdmVybGF5IHdpbGwgYmUgPHN0cm9uZz5oaWRkZW48L3N0cm9uZz4gaWYgbGVzcyB0aGFuIDxjb2RlIGNsYXNzPVxcXCJzbWluZl9yZXFwXFxcIj57UmVxdWlyZWQgUGluZ3N9PC9jb2RlPiByZXNwb25zZXMgd2VyZSBkZXRlY3RlZCBpbiA8Y29kZSBjbGFzcz1cXFwic21pbmZfdG9cXFwiPntUaW1lb3V0fTwvY29kZT4gc2Vjb25kcyA8L2xpPiA8L3VsPiA8c2NyaXB0PmNvbnN0IHJlcXA9JChcXFwiI3JlcXVpcmVkUGluZ3NcXFwiKSx0bz0kKFxcXCIjdGltZW91dFxcXCIpO2Z1bmN0aW9uIHVwZGF0ZSgpeyQoXFxcIi5zbWluZl9yZXFwXFxcIikuZWFjaCgoZnVuY3Rpb24oKXskKHRoaXMpLmh0bWwocmVxcC52YWwoKSl9KSksJChcXFwiLnNtaW5mX3RvXFxcIikuZWFjaCgoZnVuY3Rpb24oKXskKHRoaXMpLmh0bWwodG8udmFsKCkpfSkpfXJlcXAub24oXFxcImtleWRvd25cXFwiLHVwZGF0ZSkub24oXFxcImNoYW5nZVxcXCIsdXBkYXRlKSx0by5vbihcXFwia2V5ZG93blxcXCIsdXBkYXRlKS5vbihcXFwiY2hhbmdlXFxcIix1cGRhdGUpPC9zY3JpcHQ+IDwvc21hbGw+IDxoci8+IDxidXR0b24gdHlwZT1cXFwic3VibWl0XFxcIiBjbGFzcz1cXFwiYnRuIGJ0bi1wcmltYXJ5XFxcIj7wn5SoPC9idXR0b24+IDwvZm9ybT4gPGRpdiBpZD1cXFwib3V0cHV0XFxcIiBzdHlsZT1cXFwiZGlzcGxheTpub25lXFxcIj4gPGhyLz4gPGgyPk91dHB1dDo8L2gyPiA8aW5wdXQgdHlwZT1cXFwidGV4dFxcXCIgY2xhc3M9XFxcImZvcm0tY29udHJvbFxcXCIgaWQ9XFxcIm91dHB1dF90eHRcXFwiIG5hbWU9XFxcImNoYW5uZWxcXFwiIHBsYWNlaG9sZGVyPVxcXCIoKCBFcnJvciApKVxcXCIgcmVhZG9ubHk9XFxcInJlYWRvbmx5XFxcIi8+IDwvZGl2PiA8c2NyaXB0PiQoXFxcIiNmb3JtXFxcIikub24oXFxcInN1Ym1pdFxcXCIsdD0+e3QucHJldmVudERlZmF1bHQoKTtjb25zdCBzPSQoXFxcIiNmb3JtXFxcIikuc2VyaWFsaXplKCksbz0kKFxcXCIjb3V0cHV0XFxcIik7XFxcIm5vbmVcXFwiPT1vLmNzcyhcXFwiZGlzcGxheVxcXCIpJiYoY29uc29sZS5sb2coXFxcIkhhcyBkaXNwbGF5OiBub25lIVxcXCIpLG8uY3NzKFxcXCJkaXNwbGF5XFxcIixcXFwidW5zZXRcXFwiKSk7Y29uc3QgZT0kKFxcXCIjb3V0cHV0X3R4dFxcXCIpO2xldCBuPXdpbmRvdy5sb2NhdGlvbi5ocmVmO24udG9Mb3dlckNhc2UoKS5lbmRzV2l0aChcXFwiYnVpbGRlci5odG1sXFxcIikmJihuPW4uc3Vic3RyaW5nKDAsbi5sZW5ndGgtMTMpKSxlLnZhbChgJHtufS8/JHtzfWApfSk8L3NjcmlwdD4gPC9tYWluPiA8L2JvZHk+IDwvaHRtbD4gXCI7XG4vLyBFeHBvcnRzXG5tb2R1bGUuZXhwb3J0cyA9IGNvZGU7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKHVybCwgb3B0aW9ucykge1xuICBpZiAoIW9wdGlvbnMpIHtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tcGFyYW0tcmVhc3NpZ25cbiAgICBvcHRpb25zID0ge307XG4gIH0gLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVuZGVyc2NvcmUtZGFuZ2xlLCBuby1wYXJhbS1yZWFzc2lnblxuXG5cbiAgdXJsID0gdXJsICYmIHVybC5fX2VzTW9kdWxlID8gdXJsLmRlZmF1bHQgOiB1cmw7XG5cbiAgaWYgKHR5cGVvZiB1cmwgIT09ICdzdHJpbmcnKSB7XG4gICAgcmV0dXJuIHVybDtcbiAgfVxuXG4gIGlmIChvcHRpb25zLmhhc2gpIHtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tcGFyYW0tcmVhc3NpZ25cbiAgICB1cmwgKz0gb3B0aW9ucy5oYXNoO1xuICB9XG5cbiAgaWYgKG9wdGlvbnMubWF5YmVOZWVkUXVvdGVzICYmIC9bXFx0XFxuXFxmXFxyIFwiJz08PmBdLy50ZXN0KHVybCkpIHtcbiAgICByZXR1cm4gXCJcXFwiXCIuY29uY2F0KHVybCwgXCJcXFwiXCIpO1xuICB9XG5cbiAgcmV0dXJuIHVybDtcbn07IiwiaW1wb3J0IGFwaSBmcm9tIFwiIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luamVjdFN0eWxlc0ludG9TdHlsZVRhZy5qc1wiO1xuICAgICAgICAgICAgaW1wb3J0IGNvbnRlbnQgZnJvbSBcIiEhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Nhc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vbWFpbi5zY3NzXCI7XG5cbnZhciBvcHRpb25zID0ge307XG5cbm9wdGlvbnMuaW5zZXJ0ID0gXCJoZWFkXCI7XG5vcHRpb25zLnNpbmdsZXRvbiA9IGZhbHNlO1xuXG52YXIgdXBkYXRlID0gYXBpKGNvbnRlbnQsIG9wdGlvbnMpO1xuXG5cblxuZXhwb3J0IGRlZmF1bHQgY29udGVudC5sb2NhbHMgfHwge307IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBpc09sZElFID0gZnVuY3Rpb24gaXNPbGRJRSgpIHtcbiAgdmFyIG1lbW87XG4gIHJldHVybiBmdW5jdGlvbiBtZW1vcml6ZSgpIHtcbiAgICBpZiAodHlwZW9mIG1lbW8gPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAvLyBUZXN0IGZvciBJRSA8PSA5IGFzIHByb3Bvc2VkIGJ5IEJyb3dzZXJoYWNrc1xuICAgICAgLy8gQHNlZSBodHRwOi8vYnJvd3NlcmhhY2tzLmNvbS8jaGFjay1lNzFkODY5MmY2NTMzNDE3M2ZlZTcxNWMyMjJjYjgwNVxuICAgICAgLy8gVGVzdHMgZm9yIGV4aXN0ZW5jZSBvZiBzdGFuZGFyZCBnbG9iYWxzIGlzIHRvIGFsbG93IHN0eWxlLWxvYWRlclxuICAgICAgLy8gdG8gb3BlcmF0ZSBjb3JyZWN0bHkgaW50byBub24tc3RhbmRhcmQgZW52aXJvbm1lbnRzXG4gICAgICAvLyBAc2VlIGh0dHBzOi8vZ2l0aHViLmNvbS93ZWJwYWNrLWNvbnRyaWIvc3R5bGUtbG9hZGVyL2lzc3Vlcy8xNzdcbiAgICAgIG1lbW8gPSBCb29sZWFuKHdpbmRvdyAmJiBkb2N1bWVudCAmJiBkb2N1bWVudC5hbGwgJiYgIXdpbmRvdy5hdG9iKTtcbiAgICB9XG5cbiAgICByZXR1cm4gbWVtbztcbiAgfTtcbn0oKTtcblxudmFyIGdldFRhcmdldCA9IGZ1bmN0aW9uIGdldFRhcmdldCgpIHtcbiAgdmFyIG1lbW8gPSB7fTtcbiAgcmV0dXJuIGZ1bmN0aW9uIG1lbW9yaXplKHRhcmdldCkge1xuICAgIGlmICh0eXBlb2YgbWVtb1t0YXJnZXRdID09PSAndW5kZWZpbmVkJykge1xuICAgICAgdmFyIHN0eWxlVGFyZ2V0ID0gZG9jdW1lbnQucXVlcnlTZWxlY3Rvcih0YXJnZXQpOyAvLyBTcGVjaWFsIGNhc2UgdG8gcmV0dXJuIGhlYWQgb2YgaWZyYW1lIGluc3RlYWQgb2YgaWZyYW1lIGl0c2VsZlxuXG4gICAgICBpZiAod2luZG93LkhUTUxJRnJhbWVFbGVtZW50ICYmIHN0eWxlVGFyZ2V0IGluc3RhbmNlb2Ygd2luZG93LkhUTUxJRnJhbWVFbGVtZW50KSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgLy8gVGhpcyB3aWxsIHRocm93IGFuIGV4Y2VwdGlvbiBpZiBhY2Nlc3MgdG8gaWZyYW1lIGlzIGJsb2NrZWRcbiAgICAgICAgICAvLyBkdWUgdG8gY3Jvc3Mtb3JpZ2luIHJlc3RyaWN0aW9uc1xuICAgICAgICAgIHN0eWxlVGFyZ2V0ID0gc3R5bGVUYXJnZXQuY29udGVudERvY3VtZW50LmhlYWQ7XG4gICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAvLyBpc3RhbmJ1bCBpZ25vcmUgbmV4dFxuICAgICAgICAgIHN0eWxlVGFyZ2V0ID0gbnVsbDtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBtZW1vW3RhcmdldF0gPSBzdHlsZVRhcmdldDtcbiAgICB9XG5cbiAgICByZXR1cm4gbWVtb1t0YXJnZXRdO1xuICB9O1xufSgpO1xuXG52YXIgc3R5bGVzSW5Eb20gPSBbXTtcblxuZnVuY3Rpb24gZ2V0SW5kZXhCeUlkZW50aWZpZXIoaWRlbnRpZmllcikge1xuICB2YXIgcmVzdWx0ID0gLTE7XG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBzdHlsZXNJbkRvbS5sZW5ndGg7IGkrKykge1xuICAgIGlmIChzdHlsZXNJbkRvbVtpXS5pZGVudGlmaWVyID09PSBpZGVudGlmaWVyKSB7XG4gICAgICByZXN1bHQgPSBpO1xuICAgICAgYnJlYWs7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxuZnVuY3Rpb24gbW9kdWxlc1RvRG9tKGxpc3QsIG9wdGlvbnMpIHtcbiAgdmFyIGlkQ291bnRNYXAgPSB7fTtcbiAgdmFyIGlkZW50aWZpZXJzID0gW107XG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBsaXN0Lmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIGl0ZW0gPSBsaXN0W2ldO1xuICAgIHZhciBpZCA9IG9wdGlvbnMuYmFzZSA/IGl0ZW1bMF0gKyBvcHRpb25zLmJhc2UgOiBpdGVtWzBdO1xuICAgIHZhciBjb3VudCA9IGlkQ291bnRNYXBbaWRdIHx8IDA7XG4gICAgdmFyIGlkZW50aWZpZXIgPSBcIlwiLmNvbmNhdChpZCwgXCIgXCIpLmNvbmNhdChjb3VudCk7XG4gICAgaWRDb3VudE1hcFtpZF0gPSBjb3VudCArIDE7XG4gICAgdmFyIGluZGV4ID0gZ2V0SW5kZXhCeUlkZW50aWZpZXIoaWRlbnRpZmllcik7XG4gICAgdmFyIG9iaiA9IHtcbiAgICAgIGNzczogaXRlbVsxXSxcbiAgICAgIG1lZGlhOiBpdGVtWzJdLFxuICAgICAgc291cmNlTWFwOiBpdGVtWzNdXG4gICAgfTtcblxuICAgIGlmIChpbmRleCAhPT0gLTEpIHtcbiAgICAgIHN0eWxlc0luRG9tW2luZGV4XS5yZWZlcmVuY2VzKys7XG4gICAgICBzdHlsZXNJbkRvbVtpbmRleF0udXBkYXRlcihvYmopO1xuICAgIH0gZWxzZSB7XG4gICAgICBzdHlsZXNJbkRvbS5wdXNoKHtcbiAgICAgICAgaWRlbnRpZmllcjogaWRlbnRpZmllcixcbiAgICAgICAgdXBkYXRlcjogYWRkU3R5bGUob2JqLCBvcHRpb25zKSxcbiAgICAgICAgcmVmZXJlbmNlczogMVxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgaWRlbnRpZmllcnMucHVzaChpZGVudGlmaWVyKTtcbiAgfVxuXG4gIHJldHVybiBpZGVudGlmaWVycztcbn1cblxuZnVuY3Rpb24gaW5zZXJ0U3R5bGVFbGVtZW50KG9wdGlvbnMpIHtcbiAgdmFyIHN0eWxlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc3R5bGUnKTtcbiAgdmFyIGF0dHJpYnV0ZXMgPSBvcHRpb25zLmF0dHJpYnV0ZXMgfHwge307XG5cbiAgaWYgKHR5cGVvZiBhdHRyaWJ1dGVzLm5vbmNlID09PSAndW5kZWZpbmVkJykge1xuICAgIHZhciBub25jZSA9IHR5cGVvZiBfX3dlYnBhY2tfbm9uY2VfXyAhPT0gJ3VuZGVmaW5lZCcgPyBfX3dlYnBhY2tfbm9uY2VfXyA6IG51bGw7XG5cbiAgICBpZiAobm9uY2UpIHtcbiAgICAgIGF0dHJpYnV0ZXMubm9uY2UgPSBub25jZTtcbiAgICB9XG4gIH1cblxuICBPYmplY3Qua2V5cyhhdHRyaWJ1dGVzKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbiAgICBzdHlsZS5zZXRBdHRyaWJ1dGUoa2V5LCBhdHRyaWJ1dGVzW2tleV0pO1xuICB9KTtcblxuICBpZiAodHlwZW9mIG9wdGlvbnMuaW5zZXJ0ID09PSAnZnVuY3Rpb24nKSB7XG4gICAgb3B0aW9ucy5pbnNlcnQoc3R5bGUpO1xuICB9IGVsc2Uge1xuICAgIHZhciB0YXJnZXQgPSBnZXRUYXJnZXQob3B0aW9ucy5pbnNlcnQgfHwgJ2hlYWQnKTtcblxuICAgIGlmICghdGFyZ2V0KSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJDb3VsZG4ndCBmaW5kIGEgc3R5bGUgdGFyZ2V0LiBUaGlzIHByb2JhYmx5IG1lYW5zIHRoYXQgdGhlIHZhbHVlIGZvciB0aGUgJ2luc2VydCcgcGFyYW1ldGVyIGlzIGludmFsaWQuXCIpO1xuICAgIH1cblxuICAgIHRhcmdldC5hcHBlbmRDaGlsZChzdHlsZSk7XG4gIH1cblxuICByZXR1cm4gc3R5bGU7XG59XG5cbmZ1bmN0aW9uIHJlbW92ZVN0eWxlRWxlbWVudChzdHlsZSkge1xuICAvLyBpc3RhbmJ1bCBpZ25vcmUgaWZcbiAgaWYgKHN0eWxlLnBhcmVudE5vZGUgPT09IG51bGwpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICBzdHlsZS5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKHN0eWxlKTtcbn1cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICAqL1xuXG5cbnZhciByZXBsYWNlVGV4dCA9IGZ1bmN0aW9uIHJlcGxhY2VUZXh0KCkge1xuICB2YXIgdGV4dFN0b3JlID0gW107XG4gIHJldHVybiBmdW5jdGlvbiByZXBsYWNlKGluZGV4LCByZXBsYWNlbWVudCkge1xuICAgIHRleHRTdG9yZVtpbmRleF0gPSByZXBsYWNlbWVudDtcbiAgICByZXR1cm4gdGV4dFN0b3JlLmZpbHRlcihCb29sZWFuKS5qb2luKCdcXG4nKTtcbiAgfTtcbn0oKTtcblxuZnVuY3Rpb24gYXBwbHlUb1NpbmdsZXRvblRhZyhzdHlsZSwgaW5kZXgsIHJlbW92ZSwgb2JqKSB7XG4gIHZhciBjc3MgPSByZW1vdmUgPyAnJyA6IG9iai5tZWRpYSA/IFwiQG1lZGlhIFwiLmNvbmNhdChvYmoubWVkaWEsIFwiIHtcIikuY29uY2F0KG9iai5jc3MsIFwifVwiKSA6IG9iai5jc3M7IC8vIEZvciBvbGQgSUVcblxuICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgICovXG5cbiAgaWYgKHN0eWxlLnN0eWxlU2hlZXQpIHtcbiAgICBzdHlsZS5zdHlsZVNoZWV0LmNzc1RleHQgPSByZXBsYWNlVGV4dChpbmRleCwgY3NzKTtcbiAgfSBlbHNlIHtcbiAgICB2YXIgY3NzTm9kZSA9IGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKGNzcyk7XG4gICAgdmFyIGNoaWxkTm9kZXMgPSBzdHlsZS5jaGlsZE5vZGVzO1xuXG4gICAgaWYgKGNoaWxkTm9kZXNbaW5kZXhdKSB7XG4gICAgICBzdHlsZS5yZW1vdmVDaGlsZChjaGlsZE5vZGVzW2luZGV4XSk7XG4gICAgfVxuXG4gICAgaWYgKGNoaWxkTm9kZXMubGVuZ3RoKSB7XG4gICAgICBzdHlsZS5pbnNlcnRCZWZvcmUoY3NzTm9kZSwgY2hpbGROb2Rlc1tpbmRleF0pO1xuICAgIH0gZWxzZSB7XG4gICAgICBzdHlsZS5hcHBlbmRDaGlsZChjc3NOb2RlKTtcbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gYXBwbHlUb1RhZyhzdHlsZSwgb3B0aW9ucywgb2JqKSB7XG4gIHZhciBjc3MgPSBvYmouY3NzO1xuICB2YXIgbWVkaWEgPSBvYmoubWVkaWE7XG4gIHZhciBzb3VyY2VNYXAgPSBvYmouc291cmNlTWFwO1xuXG4gIGlmIChtZWRpYSkge1xuICAgIHN0eWxlLnNldEF0dHJpYnV0ZSgnbWVkaWEnLCBtZWRpYSk7XG4gIH0gZWxzZSB7XG4gICAgc3R5bGUucmVtb3ZlQXR0cmlidXRlKCdtZWRpYScpO1xuICB9XG5cbiAgaWYgKHNvdXJjZU1hcCAmJiB0eXBlb2YgYnRvYSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICBjc3MgKz0gXCJcXG4vKiMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LFwiLmNvbmNhdChidG9hKHVuZXNjYXBlKGVuY29kZVVSSUNvbXBvbmVudChKU09OLnN0cmluZ2lmeShzb3VyY2VNYXApKSkpLCBcIiAqL1wiKTtcbiAgfSAvLyBGb3Igb2xkIElFXG5cbiAgLyogaXN0YW5idWwgaWdub3JlIGlmICAqL1xuXG5cbiAgaWYgKHN0eWxlLnN0eWxlU2hlZXQpIHtcbiAgICBzdHlsZS5zdHlsZVNoZWV0LmNzc1RleHQgPSBjc3M7XG4gIH0gZWxzZSB7XG4gICAgd2hpbGUgKHN0eWxlLmZpcnN0Q2hpbGQpIHtcbiAgICAgIHN0eWxlLnJlbW92ZUNoaWxkKHN0eWxlLmZpcnN0Q2hpbGQpO1xuICAgIH1cblxuICAgIHN0eWxlLmFwcGVuZENoaWxkKGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKGNzcykpO1xuICB9XG59XG5cbnZhciBzaW5nbGV0b24gPSBudWxsO1xudmFyIHNpbmdsZXRvbkNvdW50ZXIgPSAwO1xuXG5mdW5jdGlvbiBhZGRTdHlsZShvYmosIG9wdGlvbnMpIHtcbiAgdmFyIHN0eWxlO1xuICB2YXIgdXBkYXRlO1xuICB2YXIgcmVtb3ZlO1xuXG4gIGlmIChvcHRpb25zLnNpbmdsZXRvbikge1xuICAgIHZhciBzdHlsZUluZGV4ID0gc2luZ2xldG9uQ291bnRlcisrO1xuICAgIHN0eWxlID0gc2luZ2xldG9uIHx8IChzaW5nbGV0b24gPSBpbnNlcnRTdHlsZUVsZW1lbnQob3B0aW9ucykpO1xuICAgIHVwZGF0ZSA9IGFwcGx5VG9TaW5nbGV0b25UYWcuYmluZChudWxsLCBzdHlsZSwgc3R5bGVJbmRleCwgZmFsc2UpO1xuICAgIHJlbW92ZSA9IGFwcGx5VG9TaW5nbGV0b25UYWcuYmluZChudWxsLCBzdHlsZSwgc3R5bGVJbmRleCwgdHJ1ZSk7XG4gIH0gZWxzZSB7XG4gICAgc3R5bGUgPSBpbnNlcnRTdHlsZUVsZW1lbnQob3B0aW9ucyk7XG4gICAgdXBkYXRlID0gYXBwbHlUb1RhZy5iaW5kKG51bGwsIHN0eWxlLCBvcHRpb25zKTtcblxuICAgIHJlbW92ZSA9IGZ1bmN0aW9uIHJlbW92ZSgpIHtcbiAgICAgIHJlbW92ZVN0eWxlRWxlbWVudChzdHlsZSk7XG4gICAgfTtcbiAgfVxuXG4gIHVwZGF0ZShvYmopO1xuICByZXR1cm4gZnVuY3Rpb24gdXBkYXRlU3R5bGUobmV3T2JqKSB7XG4gICAgaWYgKG5ld09iaikge1xuICAgICAgaWYgKG5ld09iai5jc3MgPT09IG9iai5jc3MgJiYgbmV3T2JqLm1lZGlhID09PSBvYmoubWVkaWEgJiYgbmV3T2JqLnNvdXJjZU1hcCA9PT0gb2JqLnNvdXJjZU1hcCkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIHVwZGF0ZShvYmogPSBuZXdPYmopO1xuICAgIH0gZWxzZSB7XG4gICAgICByZW1vdmUoKTtcbiAgICB9XG4gIH07XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGxpc3QsIG9wdGlvbnMpIHtcbiAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307IC8vIEZvcmNlIHNpbmdsZS10YWcgc29sdXRpb24gb24gSUU2LTksIHdoaWNoIGhhcyBhIGhhcmQgbGltaXQgb24gdGhlICMgb2YgPHN0eWxlPlxuICAvLyB0YWdzIGl0IHdpbGwgYWxsb3cgb24gYSBwYWdlXG5cbiAgaWYgKCFvcHRpb25zLnNpbmdsZXRvbiAmJiB0eXBlb2Ygb3B0aW9ucy5zaW5nbGV0b24gIT09ICdib29sZWFuJykge1xuICAgIG9wdGlvbnMuc2luZ2xldG9uID0gaXNPbGRJRSgpO1xuICB9XG5cbiAgbGlzdCA9IGxpc3QgfHwgW107XG4gIHZhciBsYXN0SWRlbnRpZmllcnMgPSBtb2R1bGVzVG9Eb20obGlzdCwgb3B0aW9ucyk7XG4gIHJldHVybiBmdW5jdGlvbiB1cGRhdGUobmV3TGlzdCkge1xuICAgIG5ld0xpc3QgPSBuZXdMaXN0IHx8IFtdO1xuXG4gICAgaWYgKE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChuZXdMaXN0KSAhPT0gJ1tvYmplY3QgQXJyYXldJykge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGFzdElkZW50aWZpZXJzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgaWRlbnRpZmllciA9IGxhc3RJZGVudGlmaWVyc1tpXTtcbiAgICAgIHZhciBpbmRleCA9IGdldEluZGV4QnlJZGVudGlmaWVyKGlkZW50aWZpZXIpO1xuICAgICAgc3R5bGVzSW5Eb21baW5kZXhdLnJlZmVyZW5jZXMtLTtcbiAgICB9XG5cbiAgICB2YXIgbmV3TGFzdElkZW50aWZpZXJzID0gbW9kdWxlc1RvRG9tKG5ld0xpc3QsIG9wdGlvbnMpO1xuXG4gICAgZm9yICh2YXIgX2kgPSAwOyBfaSA8IGxhc3RJZGVudGlmaWVycy5sZW5ndGg7IF9pKyspIHtcbiAgICAgIHZhciBfaWRlbnRpZmllciA9IGxhc3RJZGVudGlmaWVyc1tfaV07XG5cbiAgICAgIHZhciBfaW5kZXggPSBnZXRJbmRleEJ5SWRlbnRpZmllcihfaWRlbnRpZmllcik7XG5cbiAgICAgIGlmIChzdHlsZXNJbkRvbVtfaW5kZXhdLnJlZmVyZW5jZXMgPT09IDApIHtcbiAgICAgICAgc3R5bGVzSW5Eb21bX2luZGV4XS51cGRhdGVyKCk7XG5cbiAgICAgICAgc3R5bGVzSW5Eb20uc3BsaWNlKF9pbmRleCwgMSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgbGFzdElkZW50aWZpZXJzID0gbmV3TGFzdElkZW50aWZpZXJzO1xuICB9O1xufTsiLCJtb2R1bGUuZXhwb3J0cyA9IHtcblx0Y2xpZW50OiByZXF1aXJlKFwiLi9saWIvY2xpZW50XCIpLFxuXHRDbGllbnQ6IHJlcXVpcmUoXCIuL2xpYi9jbGllbnRcIilcbn07XG4iLCJ2YXIgcmVxdWVzdCA9IHJlcXVpcmUoXCJyZXF1ZXN0XCIpO1xudmFyIF8gPSByZXF1aXJlKFwiLi91dGlsc1wiKTtcblxudmFyIGFwaSA9IGZ1bmN0aW9uIGFwaShvcHRpb25zLCBjYWxsYmFjaykge1xuICAgIC8vIFNldCB0aGUgdXJsIHRvIG9wdGlvbnMudXJpIG9yIG9wdGlvbnMudXJsLi5cbiAgICB2YXIgdXJsID0gXy5nZXQob3B0aW9ucy51cmwsIG51bGwpID09PSBudWxsID8gXy5nZXQob3B0aW9ucy51cmksIG51bGwpIDogXy5nZXQob3B0aW9ucy51cmwsIG51bGwpO1xuXG4gICAgLy8gTWFrZSBzdXJlIGl0IGlzIGEgdmFsaWQgdXJsLi5cbiAgICBpZiAoIV8uaXNVUkwodXJsKSkgeyB1cmwgPSBcImh0dHBzOi8vYXBpLnR3aXRjaC50di9rcmFrZW5cIiArICh1cmxbMF0gPT09IFwiL1wiID8gdXJsIDogYC8ke3VybH1gKTsgfVxuXG4gICAgLy8gV2UgYXJlIGluc2lkZSBhIE5vZGUgYXBwbGljYXRpb24sIHNvIHdlIGNhbiB1c2UgdGhlIHJlcXVlc3QgbW9kdWxlLi5cbiAgICBpZiAoXy5pc05vZGUoKSkge1xuICAgICAgICByZXF1ZXN0KF8ubWVyZ2UoeyBtZXRob2Q6IFwiR0VUXCIsIGpzb246IHRydWUgfSwgb3B0aW9ucywgeyB1cmw6IHVybCB9KSwgY2FsbGJhY2spO1xuICAgIH1cbiAgICAvLyBJbnNpZGUgYW4gZXh0ZW5zaW9uIC0+IHdlIGNhbm5vdCB1c2UganNvbnAhXG4gICAgZWxzZSBpZiAoXy5pc0V4dGVuc2lvbigpIHx8IF8uaXNSZWFjdE5hdGl2ZSgpKSB7XG4gICAgICAgIG9wdGlvbnMgPSBfLm1lcmdlKHsgdXJsOiB1cmwsIG1ldGhvZDogXCJHRVRcIiwgaGVhZGVyczoge30gfSwgb3B0aW9ucyk7XG4gICAgICAgIC8vIHByZXBhcmUgcmVxdWVzdFxuICAgICAgICB2YXIgeGhyID0gbmV3IFhNTEh0dHBSZXF1ZXN0KCk7XG4gICAgICAgIHhoci5vcGVuKG9wdGlvbnMubWV0aG9kLCBvcHRpb25zLnVybCwgdHJ1ZSk7XG4gICAgICAgIGZvcih2YXIgbmFtZSBpbiBvcHRpb25zLmhlYWRlcnMpIHtcbiAgICAgICAgICAgIHhoci5zZXRSZXF1ZXN0SGVhZGVyKG5hbWUsIG9wdGlvbnMuaGVhZGVyc1tuYW1lXSk7XG4gICAgICAgIH1cbiAgICAgICAgeGhyLnJlc3BvbnNlVHlwZSA9IFwianNvblwiO1xuICAgICAgICAvLyBzZXQgcmVxdWVzdCBoYW5kbGVyXG4gICAgICAgIHhoci5hZGRFdmVudExpc3RlbmVyKFwibG9hZFwiLCAoZXYpID0+IHtcbiAgICAgICAgICAgIGlmKHhoci5yZWFkeVN0YXRlID09IDQpIHtcbiAgICAgICAgICAgICAgICBpZih4aHIuc3RhdHVzICE9IDIwMCkge1xuICAgICAgICAgICAgICAgICAgICBjYWxsYmFjayh4aHIuc3RhdHVzLCBudWxsLCBudWxsKTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBjYWxsYmFjayhudWxsLCBudWxsLCB4aHIucmVzcG9uc2UpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICAgIC8vIHN1Ym1pdFxuICAgICAgICB4aHIuc2VuZCgpO1xuICAgIH1cbiAgICAvLyBJbnNpZGUgYSB3ZWIgYXBwbGljYXRpb24sIHVzZSBqc29ucC4uXG4gICAgZWxzZSB7XG4gICAgICAgIC8vIENhbGxiYWNrcyBtdXN0IG1hdGNoIHRoZSByZWdleCBbYS16QS1aXyRdW1xcdyRdKihcXC5bYS16QS1aXyRdW1xcdyRdKikqXG4gICAgICAgIHZhciBjYWxsYmFja05hbWUgPSBganNvbnBfY2FsbGJhY2tfJHtNYXRoLnJvdW5kKDEwMDAwMCAqIE1hdGgucmFuZG9tKCkpfWA7XG4gICAgICAgIHdpbmRvd1tjYWxsYmFja05hbWVdID0gZnVuY3Rpb24oZGF0YSkge1xuICAgICAgICAgICAgZGVsZXRlIHdpbmRvd1tjYWxsYmFja05hbWVdO1xuICAgICAgICAgICAgZG9jdW1lbnQuYm9keS5yZW1vdmVDaGlsZChzY3JpcHQpO1xuICAgICAgICAgICAgY2FsbGJhY2sobnVsbCwgbnVsbCwgZGF0YSk7XG4gICAgICAgIH07XG5cbiAgICAgICAgLy8gSW5qZWN0IHRoZSBzY3JpcHQgaW4gdGhlIGRvY3VtZW50Li5cbiAgICAgICAgdmFyIHNjcmlwdCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJzY3JpcHRcIik7XG4gICAgICAgIHNjcmlwdC5zcmMgPSBgJHt1cmx9JHt1cmwuaW5jbHVkZXMoXCI/XCIpID8gXCImXCIgOiBcIj9cIn1jYWxsYmFjaz0ke2NhbGxiYWNrTmFtZX1gO1xuICAgICAgICBkb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKHNjcmlwdCk7XG4gICAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGFwaTtcbiIsInZhciBhcGkgPSByZXF1aXJlKFwiLi9hcGlcIik7XG52YXIgY29tbWFuZHMgPSByZXF1aXJlKFwiLi9jb21tYW5kc1wiKTtcbnZhciBldmVudEVtaXR0ZXIgPSByZXF1aXJlKFwiLi9ldmVudHNcIikuRXZlbnRFbWl0dGVyO1xudmFyIGxvZ2dlciA9IHJlcXVpcmUoXCIuL2xvZ2dlclwiKTtcbnZhciBwYXJzZSA9IHJlcXVpcmUoXCIuL3BhcnNlclwiKTtcbnZhciB0aW1lciA9IHJlcXVpcmUoXCIuL3RpbWVyXCIpO1xudmFyIHdzID0gZ2xvYmFsLldlYlNvY2tldCB8fCBnbG9iYWwuTW96V2ViU29ja2V0IHx8IHJlcXVpcmUoXCJ3c1wiKTtcbnZhciBfID0gcmVxdWlyZShcIi4vdXRpbHNcIik7XG5cbi8vIENsaWVudCBpbnN0YW5jZS4uXG52YXIgY2xpZW50ID0gZnVuY3Rpb24gY2xpZW50KG9wdHMpIHtcbiAgICBpZiAodGhpcyBpbnN0YW5jZW9mIGNsaWVudCA9PT0gZmFsc2UpIHsgcmV0dXJuIG5ldyBjbGllbnQob3B0cyk7IH1cbiAgICB0aGlzLnNldE1heExpc3RlbmVycygwKTtcblxuICAgIHRoaXMub3B0cyA9IF8uZ2V0KG9wdHMsIHt9KTtcbiAgICB0aGlzLm9wdHMuY2hhbm5lbHMgPSB0aGlzLm9wdHMuY2hhbm5lbHMgfHwgW107XG4gICAgdGhpcy5vcHRzLmNvbm5lY3Rpb24gPSB0aGlzLm9wdHMuY29ubmVjdGlvbiB8fCB7fTtcbiAgICB0aGlzLm9wdHMuaWRlbnRpdHkgPSB0aGlzLm9wdHMuaWRlbnRpdHkgfHwge307XG4gICAgdGhpcy5vcHRzLm9wdGlvbnMgPSB0aGlzLm9wdHMub3B0aW9ucyB8fCB7fTtcblxuICAgIHRoaXMuY2xpZW50SWQgPSBfLmdldCh0aGlzLm9wdHMub3B0aW9ucy5jbGllbnRJZCwgbnVsbCk7XG5cbiAgICB0aGlzLm1heFJlY29ubmVjdEF0dGVtcHRzID0gXy5nZXQodGhpcy5vcHRzLmNvbm5lY3Rpb24ubWF4UmVjb25uZWN0QXR0ZW1wdHMsIEluZmluaXR5KTtcbiAgICB0aGlzLm1heFJlY29ubmVjdEludGVydmFsID0gXy5nZXQodGhpcy5vcHRzLmNvbm5lY3Rpb24ubWF4UmVjb25uZWN0SW50ZXJ2YWwsIDMwMDAwKTtcbiAgICB0aGlzLnJlY29ubmVjdCA9IF8uZ2V0KHRoaXMub3B0cy5jb25uZWN0aW9uLnJlY29ubmVjdCwgZmFsc2UpO1xuICAgIHRoaXMucmVjb25uZWN0RGVjYXkgPSBfLmdldCh0aGlzLm9wdHMuY29ubmVjdGlvbi5yZWNvbm5lY3REZWNheSwgMS41KTtcbiAgICB0aGlzLnJlY29ubmVjdEludGVydmFsID0gXy5nZXQodGhpcy5vcHRzLmNvbm5lY3Rpb24ucmVjb25uZWN0SW50ZXJ2YWwsIDEwMDApO1xuXG4gICAgdGhpcy5yZWNvbm5lY3RpbmcgPSBmYWxzZTtcbiAgICB0aGlzLnJlY29ubmVjdGlvbnMgPSAwO1xuICAgIHRoaXMucmVjb25uZWN0VGltZXIgPSB0aGlzLnJlY29ubmVjdEludGVydmFsO1xuXG4gICAgdGhpcy5zZWN1cmUgPSBfLmdldCh0aGlzLm9wdHMuY29ubmVjdGlvbi5zZWN1cmUsIGZhbHNlKTtcblxuICAgIC8vIFJhdyBkYXRhIGFuZCBvYmplY3QgZm9yIGVtb3RlLXNldHMuLlxuICAgIHRoaXMuZW1vdGVzID0gXCJcIjtcbiAgICB0aGlzLmVtb3Rlc2V0cyA9IHt9O1xuXG4gICAgdGhpcy5jaGFubmVscyA9IFtdO1xuICAgIHRoaXMuY3VycmVudExhdGVuY3kgPSAwO1xuICAgIHRoaXMuZ2xvYmFsdXNlcnN0YXRlID0ge307XG4gICAgdGhpcy5sYXN0Sm9pbmVkID0gXCJcIjtcbiAgICB0aGlzLmxhdGVuY3kgPSBuZXcgRGF0ZSgpO1xuICAgIHRoaXMubW9kZXJhdG9ycyA9IHt9O1xuICAgIHRoaXMucGluZ0xvb3AgPSBudWxsO1xuICAgIHRoaXMucGluZ1RpbWVvdXQgPSBudWxsO1xuICAgIHRoaXMucmVhc29uID0gXCJcIjtcbiAgICB0aGlzLnVzZXJuYW1lID0gXCJcIjtcbiAgICB0aGlzLnVzZXJzdGF0ZSA9IHt9O1xuICAgIHRoaXMud2FzQ2xvc2VDYWxsZWQgPSBmYWxzZTtcbiAgICB0aGlzLndzID0gbnVsbDtcblxuICAgIC8vIENyZWF0ZSB0aGUgbG9nZ2VyLi5cbiAgICB2YXIgbGV2ZWwgPSBcImVycm9yXCI7XG4gICAgaWYgKHRoaXMub3B0cy5vcHRpb25zLmRlYnVnKSB7IGxldmVsID0gXCJpbmZvXCI7IH1cbiAgICB0aGlzLmxvZyA9IHRoaXMub3B0cy5sb2dnZXIgfHwgbG9nZ2VyO1xuXG4gICAgdHJ5IHsgbG9nZ2VyLnNldExldmVsKGxldmVsKTsgfSBjYXRjaChlKSB7fTtcblxuICAgIC8vIEZvcm1hdCB0aGUgY2hhbm5lbCBuYW1lcy4uXG4gICAgdGhpcy5vcHRzLmNoYW5uZWxzLmZvckVhY2goZnVuY3Rpb24ocGFydCwgaW5kZXgsIHRoZUFycmF5KSB7XG4gICAgICAgIHRoZUFycmF5W2luZGV4XSA9IF8uY2hhbm5lbChwYXJ0KTtcbiAgICB9KTtcblxuICAgIGV2ZW50RW1pdHRlci5jYWxsKHRoaXMpO1xufVxuXG5fLmluaGVyaXRzKGNsaWVudCwgZXZlbnRFbWl0dGVyKTtcblxuY2xpZW50LnByb3RvdHlwZS5hcGkgPSBhcGk7XG5cbi8vIFB1dCBhbGwgY29tbWFuZHMgaW4gcHJvdG90eXBlLi5cbmZvcih2YXIgbWV0aG9kTmFtZSBpbiBjb21tYW5kcykge1xuICAgIGNsaWVudC5wcm90b3R5cGVbbWV0aG9kTmFtZV0gPSBjb21tYW5kc1ttZXRob2ROYW1lXTtcbn1cblxuLy8gSGFuZGxlIHBhcnNlZCBjaGF0IHNlcnZlciBtZXNzYWdlLi5cbmNsaWVudC5wcm90b3R5cGUuaGFuZGxlTWVzc2FnZSA9IGZ1bmN0aW9uIGhhbmRsZU1lc3NhZ2UobWVzc2FnZSkge1xuICAgIGlmIChfLmlzTnVsbChtZXNzYWdlKSkge1xuICAgICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdGhpcy5lbWl0KFwicmF3X21lc3NhZ2VcIiwgSlNPTi5wYXJzZShKU09OLnN0cmluZ2lmeShtZXNzYWdlKSksIG1lc3NhZ2UpO1xuXG4gICAgdmFyIGNoYW5uZWwgPSBfLmNoYW5uZWwoXy5nZXQobWVzc2FnZS5wYXJhbXNbMF0sIG51bGwpKTtcbiAgICB2YXIgbXNnID0gXy5nZXQobWVzc2FnZS5wYXJhbXNbMV0sIG51bGwpO1xuICAgIHZhciBtc2dpZCA9IF8uZ2V0KG1lc3NhZ2UudGFnc1tcIm1zZy1pZFwiXSwgbnVsbCk7XG5cbiAgICAvLyBQYXJzZSBiYWRnZXMsIGJhZGdlLWluZm8gYW5kIGVtb3Rlcy4uXG4gICAgbWVzc2FnZS50YWdzID0gcGFyc2UuYmFkZ2VzKHBhcnNlLmJhZGdlSW5mbyhwYXJzZS5lbW90ZXMobWVzc2FnZS50YWdzKSkpO1xuXG4gICAgLy8gVHJhbnNmb3JtIElSQ3YzIHRhZ3MuLlxuICAgIGlmIChtZXNzYWdlLnRhZ3MpIHtcbiAgICAgICAgdmFyIHRhZ3MgPSBtZXNzYWdlLnRhZ3M7XG4gICAgICAgIGZvcih2YXIga2V5IGluIHRhZ3MpIHtcbiAgICAgICAgICAgIGlmIChrZXkgIT09IFwiZW1vdGUtc2V0c1wiICYmIGtleSAhPT0gXCJiYW4tZHVyYXRpb25cIiAmJiBrZXkgIT09IFwiYml0c1wiKSB7XG4gICAgICAgICAgICAgICAgdmFyIHZhbHVlID0gdGFnc1trZXldO1xuICAgICAgICAgICAgICAgIGlmIChfLmlzQm9vbGVhbih2YWx1ZSkpIHsgdmFsdWUgPSBudWxsOyB9XG4gICAgICAgICAgICAgICAgZWxzZSBpZiAodmFsdWUgPT09IFwiMVwiKSB7IHZhbHVlID0gdHJ1ZTsgfVxuICAgICAgICAgICAgICAgIGVsc2UgaWYgKHZhbHVlID09PSBcIjBcIikgeyB2YWx1ZSA9IGZhbHNlOyB9XG4gICAgICAgICAgICAgICAgZWxzZSBpZiAoXy5pc1N0cmluZyh2YWx1ZSkpIHsgdmFsdWUgPSBfLnVuZXNjYXBlSVJDKHZhbHVlKTsgfVxuICAgICAgICAgICAgICAgIHRhZ3Nba2V5XSA9IHZhbHVlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgLy8gTWVzc2FnZXMgd2l0aCBubyBwcmVmaXguLlxuICAgIGlmIChfLmlzTnVsbChtZXNzYWdlLnByZWZpeCkpIHtcbiAgICAgICAgc3dpdGNoKG1lc3NhZ2UuY29tbWFuZCkge1xuICAgICAgICAgICAgLy8gUmVjZWl2ZWQgUElORyBmcm9tIHNlcnZlci4uXG4gICAgICAgICAgICBjYXNlIFwiUElOR1wiOlxuICAgICAgICAgICAgICAgIHRoaXMuZW1pdChcInBpbmdcIik7XG4gICAgICAgICAgICAgICAgaWYgKCFfLmlzTnVsbCh0aGlzLndzKSAmJiB0aGlzLndzLnJlYWR5U3RhdGUgPT09IDEpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy53cy5zZW5kKFwiUE9OR1wiKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgIC8vIFJlY2VpdmVkIFBPTkcgZnJvbSBzZXJ2ZXIsIHJldHVybiBjdXJyZW50IGxhdGVuY3kuLlxuICAgICAgICAgICAgY2FzZSBcIlBPTkdcIjpcbiAgICAgICAgICAgICAgICB2YXIgY3VyckRhdGUgPSBuZXcgRGF0ZSgpO1xuICAgICAgICAgICAgICAgIHRoaXMuY3VycmVudExhdGVuY3kgPSAoY3VyckRhdGUuZ2V0VGltZSgpIC0gdGhpcy5sYXRlbmN5LmdldFRpbWUoKSkgLyAxMDAwO1xuICAgICAgICAgICAgICAgIHRoaXMuZW1pdHMoW1wicG9uZ1wiLCBcIl9wcm9taXNlUGluZ1wiXSwgW1t0aGlzLmN1cnJlbnRMYXRlbmN5XV0pO1xuXG4gICAgICAgICAgICAgICAgY2xlYXJUaW1lb3V0KHRoaXMucGluZ1RpbWVvdXQpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgIHRoaXMubG9nLndhcm4oYENvdWxkIG5vdCBwYXJzZSBtZXNzYWdlIHdpdGggbm8gcHJlZml4OlxcbiR7SlNPTi5zdHJpbmdpZnkobWVzc2FnZSwgbnVsbCwgNCl9YCk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBNZXNzYWdlcyB3aXRoIFwidG1pLnR3aXRjaC50dlwiIGFzIGEgcHJlZml4Li5cbiAgICBlbHNlIGlmIChtZXNzYWdlLnByZWZpeCA9PT0gXCJ0bWkudHdpdGNoLnR2XCIpIHtcbiAgICAgICAgc3dpdGNoKG1lc3NhZ2UuY29tbWFuZCkge1xuICAgICAgICAgICAgY2FzZSBcIjAwMlwiOlxuICAgICAgICAgICAgY2FzZSBcIjAwM1wiOlxuICAgICAgICAgICAgY2FzZSBcIjAwNFwiOlxuICAgICAgICAgICAgY2FzZSBcIjM3NVwiOlxuICAgICAgICAgICAgY2FzZSBcIjM3NlwiOlxuICAgICAgICAgICAgY2FzZSBcIkNBUFwiOlxuICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICAvLyBSZXRyaWV2ZSB1c2VybmFtZSBmcm9tIHNlcnZlci4uXG4gICAgICAgICAgICBjYXNlIFwiMDAxXCI6XG4gICAgICAgICAgICAgICAgdGhpcy51c2VybmFtZSA9IG1lc3NhZ2UucGFyYW1zWzBdO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICAvLyBDb25uZWN0ZWQgdG8gc2VydmVyLi5cbiAgICAgICAgICAgIGNhc2UgXCIzNzJcIjpcbiAgICAgICAgICAgICAgICB0aGlzLmxvZy5pbmZvKFwiQ29ubmVjdGVkIHRvIHNlcnZlci5cIik7XG4gICAgICAgICAgICAgICAgdGhpcy51c2Vyc3RhdGVbXCIjdG1panNcIl0gPSB7fTtcbiAgICAgICAgICAgICAgICB0aGlzLmVtaXRzKFtcImNvbm5lY3RlZFwiLCBcIl9wcm9taXNlQ29ubmVjdFwiXSwgW1t0aGlzLnNlcnZlciwgdGhpcy5wb3J0XSwgW251bGxdXSk7XG4gICAgICAgICAgICAgICAgdGhpcy5yZWNvbm5lY3Rpb25zID0gMDtcbiAgICAgICAgICAgICAgICB0aGlzLnJlY29ubmVjdFRpbWVyID0gdGhpcy5yZWNvbm5lY3RJbnRlcnZhbDtcblxuICAgICAgICAgICAgICAgIC8vIFNldCBhbiBpbnRlcm5hbCBwaW5nIHRpbWVvdXQgY2hlY2sgaW50ZXJ2YWwuLlxuICAgICAgICAgICAgICAgIHRoaXMucGluZ0xvb3AgPSBzZXRJbnRlcnZhbCgoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIC8vIE1ha2Ugc3VyZSB0aGUgY29ubmVjdGlvbiBpcyBvcGVuZWQgYmVmb3JlIHNlbmRpbmcgdGhlIG1lc3NhZ2UuLlxuICAgICAgICAgICAgICAgICAgICBpZiAoIV8uaXNOdWxsKHRoaXMud3MpICYmIHRoaXMud3MucmVhZHlTdGF0ZSA9PT0gMSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy53cy5zZW5kKFwiUElOR1wiKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB0aGlzLmxhdGVuY3kgPSBuZXcgRGF0ZSgpO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnBpbmdUaW1lb3V0ID0gc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIV8uaXNOdWxsKHRoaXMud3MpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy53YXNDbG9zZUNhbGxlZCA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMubG9nLmVycm9yKFwiUGluZyB0aW1lb3V0LlwiKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLndzLmNsb3NlKCk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGVhckludGVydmFsKHRoaXMucGluZ0xvb3ApO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsZWFyVGltZW91dCh0aGlzLnBpbmdUaW1lb3V0KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfSwgXy5nZXQodGhpcy5vcHRzLmNvbm5lY3Rpb24udGltZW91dCwgOTk5OSkpO1xuICAgICAgICAgICAgICAgIH0sIDYwMDAwKTtcblxuICAgICAgICAgICAgICAgIC8vIEpvaW4gYWxsIHRoZSBjaGFubmVscyBmcm9tIGNvbmZpZ3VyYXRpb24gd2l0aCBhIDIgc2Vjb25kcyBpbnRlcnZhbC4uXG4gICAgICAgICAgICAgICAgdmFyIGpvaW5RdWV1ZSA9IG5ldyB0aW1lci5xdWV1ZSgyMDAwKTtcbiAgICAgICAgICAgICAgICB2YXIgam9pbkNoYW5uZWxzID0gXy51bmlvbih0aGlzLm9wdHMuY2hhbm5lbHMsIHRoaXMuY2hhbm5lbHMpO1xuICAgICAgICAgICAgICAgIHRoaXMuY2hhbm5lbHMgPSBbXTtcblxuICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgam9pbkNoYW5uZWxzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgICAgIGxldCBjaGFubmVsID0gam9pbkNoYW5uZWxzW2ldO1xuICAgICAgICAgICAgICAgICAgICBqb2luUXVldWUuYWRkKCgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghXy5pc051bGwodGhpcy53cykgJiYgdGhpcy53cy5yZWFkeVN0YXRlID09PSAxKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5qb2luKGNoYW5uZWwpLmNhdGNoKGVyciA9PiB7IHRoaXMubG9nLmVycm9yKGVycik7IH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBqb2luUXVldWUucnVuKCk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS9qdXN0aW50di9Ud2l0Y2gtQVBJL2Jsb2IvbWFzdGVyL2NoYXQvY2FwYWJpbGl0aWVzLm1kI25vdGljZVxuICAgICAgICAgICAgY2FzZSBcIk5PVElDRVwiOlxuICAgICAgICAgICAgICAgIHZhciBudWxsQXJyID0gW251bGxdO1xuICAgICAgICAgICAgICAgIHZhciBub3RpY2VBcnIgPSBbY2hhbm5lbCwgbXNnaWQsIG1zZ107XG4gICAgICAgICAgICAgICAgdmFyIG1zZ2lkQXJyID0gW21zZ2lkXTtcbiAgICAgICAgICAgICAgICB2YXIgY2hhbm5lbFRydWVBcnIgPSBbY2hhbm5lbCwgdHJ1ZV07XG4gICAgICAgICAgICAgICAgdmFyIGNoYW5uZWxGYWxzZUFyciA9IFtjaGFubmVsLCBmYWxzZV07XG4gICAgICAgICAgICAgICAgdmFyIG5vdGljZUFuZE51bGwgPSBbbm90aWNlQXJyLCBudWxsQXJyXTtcbiAgICAgICAgICAgICAgICB2YXIgbm90aWNlQW5kTXNnaWQgPSBbbm90aWNlQXJyLCBtc2dpZEFycl07XG4gICAgICAgICAgICAgICAgdmFyIGJhc2ljTG9nID0gYFske2NoYW5uZWx9XSAke21zZ31gO1xuICAgICAgICAgICAgICAgIHN3aXRjaChtc2dpZCkge1xuICAgICAgICAgICAgICAgICAgICAvLyBUaGlzIHJvb20gaXMgbm93IGluIHN1YnNjcmliZXJzLW9ubHkgbW9kZS5cbiAgICAgICAgICAgICAgICAgICAgY2FzZSBcInN1YnNfb25cIjpcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMubG9nLmluZm8oYFske2NoYW5uZWx9XSBUaGlzIHJvb20gaXMgbm93IGluIHN1YnNjcmliZXJzLW9ubHkgbW9kZS5gKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuZW1pdHMoW1wic3Vic2NyaWJlclwiLCBcInN1YnNjcmliZXJzXCIsIFwiX3Byb21pc2VTdWJzY3JpYmVyc1wiXSwgW2NoYW5uZWxUcnVlQXJyLCBjaGFubmVsVHJ1ZUFyciwgbnVsbEFycl0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgICAgICAgICAgLy8gVGhpcyByb29tIGlzIG5vIGxvbmdlciBpbiBzdWJzY3JpYmVycy1vbmx5IG1vZGUuXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgXCJzdWJzX29mZlwiOlxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5sb2cuaW5mbyhgWyR7Y2hhbm5lbH1dIFRoaXMgcm9vbSBpcyBubyBsb25nZXIgaW4gc3Vic2NyaWJlcnMtb25seSBtb2RlLmApO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5lbWl0cyhbXCJzdWJzY3JpYmVyXCIsIFwic3Vic2NyaWJlcnNcIiwgXCJfcHJvbWlzZVN1YnNjcmliZXJzb2ZmXCJdLCBbY2hhbm5lbEZhbHNlQXJyLCBjaGFubmVsRmFsc2VBcnIsIG51bGxBcnJdKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICAgICAgICAgIC8vIFRoaXMgcm9vbSBpcyBub3cgaW4gZW1vdGUtb25seSBtb2RlLlxuICAgICAgICAgICAgICAgICAgICBjYXNlIFwiZW1vdGVfb25seV9vblwiOlxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5sb2cuaW5mbyhgWyR7Y2hhbm5lbH1dIFRoaXMgcm9vbSBpcyBub3cgaW4gZW1vdGUtb25seSBtb2RlLmApO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5lbWl0cyhbXCJlbW90ZW9ubHlcIiwgXCJfcHJvbWlzZUVtb3Rlb25seVwiXSwgW2NoYW5uZWxUcnVlQXJyLCBudWxsQXJyXSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgICAgICAgICAvLyBUaGlzIHJvb20gaXMgbm8gbG9uZ2VyIGluIGVtb3RlLW9ubHkgbW9kZS5cbiAgICAgICAgICAgICAgICAgICAgY2FzZSBcImVtb3RlX29ubHlfb2ZmXCI6XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmxvZy5pbmZvKGBbJHtjaGFubmVsfV0gVGhpcyByb29tIGlzIG5vIGxvbmdlciBpbiBlbW90ZS1vbmx5IG1vZGUuYCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmVtaXRzKFtcImVtb3Rlb25seVwiLCBcIl9wcm9taXNlRW1vdGVvbmx5b2ZmXCJdLCBbY2hhbm5lbEZhbHNlQXJyLCBudWxsQXJyXSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgICAgICAgICAvLyBEbyBub3QgaGFuZGxlIHNsb3dfb24vb2ZmIGhlcmUsIGxpc3RlbiB0byB0aGUgUk9PTVNUQVRFIG5vdGljZSBpbnN0ZWFkIGFzIGl0IHJldHVybnMgdGhlIGRlbGF5LlxuICAgICAgICAgICAgICAgICAgICBjYXNlIFwic2xvd19vblwiOlxuICAgICAgICAgICAgICAgICAgICBjYXNlIFwic2xvd19vZmZcIjpcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICAgICAgICAgIC8vIERvIG5vdCBoYW5kbGUgZm9sbG93ZXJzX29uL29mZiBoZXJlLCBsaXN0ZW4gdG8gdGhlIFJPT01TVEFURSBub3RpY2UgaW5zdGVhZCBhcyBpdCByZXR1cm5zIHRoZSBkZWxheS5cbiAgICAgICAgICAgICAgICAgICAgY2FzZSBcImZvbGxvd2Vyc19vbl96ZXJvXCI6XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgXCJmb2xsb3dlcnNfb25cIjpcbiAgICAgICAgICAgICAgICAgICAgY2FzZSBcImZvbGxvd2Vyc19vZmZcIjpcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICAgICAgICAgIC8vIFRoaXMgcm9vbSBpcyBub3cgaW4gcjlrIG1vZGUuXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgXCJyOWtfb25cIjpcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMubG9nLmluZm8oYFske2NoYW5uZWx9XSBUaGlzIHJvb20gaXMgbm93IGluIHI5ayBtb2RlLmApO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5lbWl0cyhbXCJyOWttb2RlXCIsIFwicjlrYmV0YVwiLCBcIl9wcm9taXNlUjlrYmV0YVwiXSwgW2NoYW5uZWxUcnVlQXJyLCBjaGFubmVsVHJ1ZUFyciwgbnVsbEFycl0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgICAgICAgICAgLy8gVGhpcyByb29tIGlzIG5vIGxvbmdlciBpbiByOWsgbW9kZS5cbiAgICAgICAgICAgICAgICAgICAgY2FzZSBcInI5a19vZmZcIjpcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMubG9nLmluZm8oYFske2NoYW5uZWx9XSBUaGlzIHJvb20gaXMgbm8gbG9uZ2VyIGluIHI5ayBtb2RlLmApO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5lbWl0cyhbXCJyOWttb2RlXCIsIFwicjlrYmV0YVwiLCBcIl9wcm9taXNlUjlrYmV0YW9mZlwiXSwgW2NoYW5uZWxGYWxzZUFyciwgY2hhbm5lbEZhbHNlQXJyLCBudWxsQXJyXSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgICAgICAgICAvLyBUaGUgbW9kZXJhdG9ycyBvZiB0aGlzIHJvb20gYXJlOiBbLi4uLCAuLi5dXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgXCJyb29tX21vZHNcIjpcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBtb2RzID0gbXNnLnNwbGl0KFwiOiBcIilbMV0udG9Mb3dlckNhc2UoKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5zcGxpdChcIiwgXCIpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLmZpbHRlcihuID0+IG4pO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmVtaXRzKFtcIl9wcm9taXNlTW9kc1wiLCBcIm1vZHNcIl0sIFtbbnVsbCwgbW9kc10sIFtjaGFubmVsLCBtb2RzXV0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgICAgICAgICAgLy8gVGhlcmUgYXJlIG5vIG1vZGVyYXRvcnMgZm9yIHRoaXMgcm9vbS5cbiAgICAgICAgICAgICAgICAgICAgY2FzZSBcIm5vX21vZHNcIjpcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuZW1pdHMoW1wiX3Byb21pc2VNb2RzXCIsIFwibW9kc1wiXSwgW1tudWxsLCBbXV0sIFtjaGFubmVsLCBbXV1dKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICAgICAgICAgIC8vIFRoZSBWSVBzIG9mIHRoaXMgY2hhbm5lbCBhcmU6IFsuLi4sIC4uLl1cbiAgICAgICAgICAgICAgICAgICAgY2FzZSBcInZpcHNfc3VjY2Vzc1wiOlxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG1zZy5lbmRzV2l0aChcIi5cIikpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtc2cgPSBtc2cuc2xpY2UoMCwgLTEpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHZpcHMgPSBtc2cuc3BsaXQoXCI6IFwiKVsxXS50b0xvd2VyQ2FzZSgpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLnNwbGl0KFwiLCBcIilcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAuZmlsdGVyKG4gPT4gbik7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmVtaXRzKFtcIl9wcm9taXNlVmlwc1wiLCBcInZpcHNcIl0sIFtbbnVsbCwgdmlwc10sIFtjaGFubmVsLCB2aXBzXV0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICAgICAgICAgIC8vIFRoZXJlIGFyZSBubyBWSVBzIGZvciB0aGlzIHJvb20uXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgXCJub192aXBzXCI6XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmVtaXRzKFtcIl9wcm9taXNlVmlwc1wiLCBcInZpcHNcIl0sIFtbbnVsbCwgW11dLCBbY2hhbm5lbCwgW11dXSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgICAgICAgICAvLyBCYW4gY29tbWFuZCBmYWlsZWQuLlxuICAgICAgICAgICAgICAgICAgICBjYXNlIFwiYWxyZWFkeV9iYW5uZWRcIjpcbiAgICAgICAgICAgICAgICAgICAgY2FzZSBcImJhZF9iYW5fYWRtaW5cIjpcbiAgICAgICAgICAgICAgICAgICAgY2FzZSBcImJhZF9iYW5fYnJvYWRjYXN0ZXJcIjpcbiAgICAgICAgICAgICAgICAgICAgY2FzZSBcImJhZF9iYW5fZ2xvYmFsX21vZFwiOlxuICAgICAgICAgICAgICAgICAgICBjYXNlIFwiYmFkX2Jhbl9zZWxmXCI6XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgXCJiYWRfYmFuX3N0YWZmXCI6XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgXCJ1c2FnZV9iYW5cIjpcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMubG9nLmluZm8oYmFzaWNMb2cpO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5lbWl0cyhbXCJub3RpY2VcIiwgXCJfcHJvbWlzZUJhblwiXSwgbm90aWNlQW5kTXNnaWQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgICAgICAgICAgLy8gQmFuIGNvbW1hbmQgc3VjY2Vzcy4uXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgXCJiYW5fc3VjY2Vzc1wiOlxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5sb2cuaW5mbyhiYXNpY0xvZyk7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmVtaXRzKFtcIm5vdGljZVwiLCBcIl9wcm9taXNlQmFuXCJdLCBub3RpY2VBbmROdWxsKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICAgICAgICAgIC8vIENsZWFyIGNvbW1hbmQgZmFpbGVkLi5cbiAgICAgICAgICAgICAgICAgICAgY2FzZSBcInVzYWdlX2NsZWFyXCI6XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmxvZy5pbmZvKGJhc2ljTG9nKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuZW1pdHMoW1wibm90aWNlXCIsIFwiX3Byb21pc2VDbGVhclwiXSwgbm90aWNlQW5kTXNnaWQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgICAgICAgICAgLy8gTW9kcyBjb21tYW5kIGZhaWxlZC4uXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgXCJ1c2FnZV9tb2RzXCI6XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmxvZy5pbmZvKGJhc2ljTG9nKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuZW1pdHMoW1wibm90aWNlXCIsIFwiX3Byb21pc2VNb2RzXCJdLCBbbm90aWNlQXJyLCBbbXNnaWQsIFtdXV0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgICAgICAgICAgLy8gTW9kIGNvbW1hbmQgc3VjY2Vzcy4uXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgXCJtb2Rfc3VjY2Vzc1wiOlxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5sb2cuaW5mbyhiYXNpY0xvZyk7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmVtaXRzKFtcIm5vdGljZVwiLCBcIl9wcm9taXNlTW9kXCJdLCBub3RpY2VBbmROdWxsKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICAgICAgICAgIC8vIFZJUHMgY29tbWFuZCBmYWlsZWQuLlxuICAgICAgICAgICAgICAgICAgICBjYXNlIFwidXNhZ2Vfdmlwc1wiOlxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5sb2cuaW5mbyhiYXNpY0xvZyk7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmVtaXRzKFtcIm5vdGljZVwiLCBcIl9wcm9taXNlVmlwc1wiXSwgW25vdGljZUFyciwgW21zZ2lkLCBbXV1dKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICAgICAgICAgIC8vIFZJUCBjb21tYW5kIGZhaWxlZC4uXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgXCJ1c2FnZV92aXBcIjpcbiAgICAgICAgICAgICAgICAgICAgY2FzZSBcImJhZF92aXBfZ3JhbnRlZV9iYW5uZWRcIjpcbiAgICAgICAgICAgICAgICAgICAgY2FzZSBcImJhZF92aXBfZ3JhbnRlZV9hbHJlYWR5X3ZpcFwiOlxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5sb2cuaW5mbyhiYXNpY0xvZyk7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmVtaXRzKFtcIm5vdGljZVwiLCBcIl9wcm9taXNlVmlwXCJdLCBbbm90aWNlQXJyLCBbbXNnaWQsIFtdXV0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgICAgICAgICAgLy8gVklQIGNvbW1hbmQgc3VjY2Vzcy4uXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgXCJ2aXBfc3VjY2Vzc1wiOlxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5sb2cuaW5mbyhiYXNpY0xvZyk7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmVtaXRzKFtcIm5vdGljZVwiLCBcIl9wcm9taXNlVmlwXCJdLCBub3RpY2VBbmROdWxsKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICAgICAgICAgIC8vIE1vZCBjb21tYW5kIGZhaWxlZC4uXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgXCJ1c2FnZV9tb2RcIjpcbiAgICAgICAgICAgICAgICAgICAgY2FzZSBcImJhZF9tb2RfYmFubmVkXCI6XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgXCJiYWRfbW9kX21vZFwiOlxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5sb2cuaW5mbyhiYXNpY0xvZyk7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmVtaXRzKFtcIm5vdGljZVwiLCBcIl9wcm9taXNlTW9kXCJdLCBub3RpY2VBbmRNc2dpZCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgICAgICAgICAvLyBVbm1vZCBjb21tYW5kIHN1Y2Nlc3MuLlxuICAgICAgICAgICAgICAgICAgICBjYXNlIFwidW5tb2Rfc3VjY2Vzc1wiOlxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5sb2cuaW5mbyhiYXNpY0xvZyk7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmVtaXRzKFtcIm5vdGljZVwiLCBcIl9wcm9taXNlVW5tb2RcIl0sIG5vdGljZUFuZE51bGwpO1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgICAgICAgICAgLy8gVW52aXAgY29tbWFuZCBzdWNjZXNzLi4uXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgXCJ1bnZpcF9zdWNjZXNzXCI6XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmxvZy5pbmZvKGJhc2ljTG9nKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuZW1pdHMoW1wibm90aWNlXCIsIFwiX3Byb21pc2VVbnZpcFwiXSwgbm90aWNlQW5kTnVsbCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgICAgICAgICAvLyBVbm1vZCBjb21tYW5kIGZhaWxlZC4uXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgXCJ1c2FnZV91bm1vZFwiOlxuICAgICAgICAgICAgICAgICAgICBjYXNlIFwiYmFkX3VubW9kX21vZFwiOlxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5sb2cuaW5mbyhiYXNpY0xvZyk7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmVtaXRzKFtcIm5vdGljZVwiLCBcIl9wcm9taXNlVW5tb2RcIl0sIG5vdGljZUFuZE1zZ2lkKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICAgICAgICAgIC8vIFVudmlwIGNvbW1hbmQgZmFpbGVkLi5cbiAgICAgICAgICAgICAgICAgICAgY2FzZSBcInVzYWdlX3VudmlwXCI6XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgXCJiYWRfdW52aXBfZ3JhbnRlZV9ub3RfdmlwXCI6XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmxvZy5pbmZvKGJhc2ljTG9nKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuZW1pdHMoW1wibm90aWNlXCIsIFwiX3Byb21pc2VVbnZpcFwiXSwgbm90aWNlQW5kTXNnaWQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgICAgICAgICAgLy8gQ29sb3IgY29tbWFuZCBzdWNjZXNzLi5cbiAgICAgICAgICAgICAgICAgICAgY2FzZSBcImNvbG9yX2NoYW5nZWRcIjpcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMubG9nLmluZm8oYmFzaWNMb2cpO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5lbWl0cyhbXCJub3RpY2VcIiwgXCJfcHJvbWlzZUNvbG9yXCJdLCBub3RpY2VBbmROdWxsKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICAgICAgICAgIC8vIENvbG9yIGNvbW1hbmQgZmFpbGVkLi5cbiAgICAgICAgICAgICAgICAgICAgY2FzZSBcInVzYWdlX2NvbG9yXCI6XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgXCJ0dXJib19vbmx5X2NvbG9yXCI6XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmxvZy5pbmZvKGJhc2ljTG9nKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuZW1pdHMoW1wibm90aWNlXCIsIFwiX3Byb21pc2VDb2xvclwiXSwgbm90aWNlQW5kTXNnaWQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgICAgICAgICAgLy8gQ29tbWVyY2lhbCBjb21tYW5kIHN1Y2Nlc3MuLlxuICAgICAgICAgICAgICAgICAgICBjYXNlIFwiY29tbWVyY2lhbF9zdWNjZXNzXCI6XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmxvZy5pbmZvKGJhc2ljTG9nKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuZW1pdHMoW1wibm90aWNlXCIsIFwiX3Byb21pc2VDb21tZXJjaWFsXCJdLCBub3RpY2VBbmROdWxsKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICAgICAgICAgIC8vIENvbW1lcmNpYWwgY29tbWFuZCBmYWlsZWQuLlxuICAgICAgICAgICAgICAgICAgICBjYXNlIFwidXNhZ2VfY29tbWVyY2lhbFwiOlxuICAgICAgICAgICAgICAgICAgICBjYXNlIFwiYmFkX2NvbW1lcmNpYWxfZXJyb3JcIjpcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMubG9nLmluZm8oYmFzaWNMb2cpO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5lbWl0cyhbXCJub3RpY2VcIiwgXCJfcHJvbWlzZUNvbW1lcmNpYWxcIl0sIG5vdGljZUFuZE1zZ2lkKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICAgICAgICAgIC8vIEhvc3QgY29tbWFuZCBzdWNjZXNzLi5cbiAgICAgICAgICAgICAgICAgICAgY2FzZSBcImhvc3RzX3JlbWFpbmluZ1wiOlxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5sb2cuaW5mbyhiYXNpY0xvZyk7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgcmVtYWluaW5nSG9zdCA9ICghaXNOYU4obXNnWzBdKSA/IHBhcnNlSW50KG1zZ1swXSkgOiAwKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuZW1pdHMoW1wibm90aWNlXCIsIFwiX3Byb21pc2VIb3N0XCJdLCBbbm90aWNlQXJyLCBbbnVsbCwgfn5yZW1haW5pbmdIb3N0XV0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgICAgICAgICAgLy8gSG9zdCBjb21tYW5kIGZhaWxlZC4uXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgXCJiYWRfaG9zdF9ob3N0aW5nXCI6XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgXCJiYWRfaG9zdF9yYXRlX2V4Y2VlZGVkXCI6XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgXCJiYWRfaG9zdF9lcnJvclwiOlxuICAgICAgICAgICAgICAgICAgICBjYXNlIFwidXNhZ2VfaG9zdFwiOlxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5sb2cuaW5mbyhiYXNpY0xvZyk7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmVtaXRzKFtcIm5vdGljZVwiLCBcIl9wcm9taXNlSG9zdFwiXSwgW25vdGljZUFyciwgW21zZ2lkLCBudWxsXV0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgICAgICAgICAgLy8gcjlrYmV0YSBjb21tYW5kIGZhaWxlZC4uXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgXCJhbHJlYWR5X3I5a19vblwiOlxuICAgICAgICAgICAgICAgICAgICBjYXNlIFwidXNhZ2VfcjlrX29uXCI6XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmxvZy5pbmZvKGJhc2ljTG9nKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuZW1pdHMoW1wibm90aWNlXCIsIFwiX3Byb21pc2VSOWtiZXRhXCJdLCBub3RpY2VBbmRNc2dpZCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgICAgICAgICAvLyByOWtiZXRhb2ZmIGNvbW1hbmQgZmFpbGVkLi5cbiAgICAgICAgICAgICAgICAgICAgY2FzZSBcImFscmVhZHlfcjlrX29mZlwiOlxuICAgICAgICAgICAgICAgICAgICBjYXNlIFwidXNhZ2VfcjlrX29mZlwiOlxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5sb2cuaW5mbyhiYXNpY0xvZyk7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmVtaXRzKFtcIm5vdGljZVwiLCBcIl9wcm9taXNlUjlrYmV0YW9mZlwiXSwgbm90aWNlQW5kTXNnaWQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgICAgICAgICAgLy8gVGltZW91dCBjb21tYW5kIHN1Y2Nlc3MuLlxuICAgICAgICAgICAgICAgICAgICBjYXNlIFwidGltZW91dF9zdWNjZXNzXCI6XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmxvZy5pbmZvKGJhc2ljTG9nKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuZW1pdHMoW1wibm90aWNlXCIsIFwiX3Byb21pc2VUaW1lb3V0XCJdLCBub3RpY2VBbmROdWxsKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgXCJkZWxldGVfbWVzc2FnZV9zdWNjZXNzXCI6XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmxvZy5pbmZvKGBbJHtjaGFubmVsfSAke21zZ31dYCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmVtaXRzKFtcIm5vdGljZVwiLCBcIl9wcm9taXNlRGVsZXRlbWVzc2FnZVwiXSwgbm90aWNlQW5kTnVsbCk7XG5cbiAgICAgICAgICAgICAgICAgICAgLy8gU3Vic2NyaWJlcnNvZmYgY29tbWFuZCBmYWlsZWQuLlxuICAgICAgICAgICAgICAgICAgICBjYXNlIFwiYWxyZWFkeV9zdWJzX29mZlwiOlxuICAgICAgICAgICAgICAgICAgICBjYXNlIFwidXNhZ2Vfc3Vic19vZmZcIjpcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMubG9nLmluZm8oYmFzaWNMb2cpO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5lbWl0cyhbXCJub3RpY2VcIiwgXCJfcHJvbWlzZVN1YnNjcmliZXJzb2ZmXCJdLCBub3RpY2VBbmRNc2dpZCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgICAgICAgICAvLyBTdWJzY3JpYmVycyBjb21tYW5kIGZhaWxlZC4uXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgXCJhbHJlYWR5X3N1YnNfb25cIjpcbiAgICAgICAgICAgICAgICAgICAgY2FzZSBcInVzYWdlX3N1YnNfb25cIjpcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMubG9nLmluZm8oYmFzaWNMb2cpO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5lbWl0cyhbXCJub3RpY2VcIiwgXCJfcHJvbWlzZVN1YnNjcmliZXJzXCJdLCBub3RpY2VBbmRNc2dpZCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgICAgICAgICAvLyBFbW90ZW9ubHlvZmYgY29tbWFuZCBmYWlsZWQuLlxuICAgICAgICAgICAgICAgICAgICBjYXNlIFwiYWxyZWFkeV9lbW90ZV9vbmx5X29mZlwiOlxuICAgICAgICAgICAgICAgICAgICBjYXNlIFwidXNhZ2VfZW1vdGVfb25seV9vZmZcIjpcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMubG9nLmluZm8oYmFzaWNMb2cpO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5lbWl0cyhbXCJub3RpY2VcIiwgXCJfcHJvbWlzZUVtb3Rlb25seW9mZlwiXSwgbm90aWNlQW5kTXNnaWQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgICAgICAgICAgLy8gRW1vdGVvbmx5IGNvbW1hbmQgZmFpbGVkLi5cbiAgICAgICAgICAgICAgICAgICAgY2FzZSBcImFscmVhZHlfZW1vdGVfb25seV9vblwiOlxuICAgICAgICAgICAgICAgICAgICBjYXNlIFwidXNhZ2VfZW1vdGVfb25seV9vblwiOlxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5sb2cuaW5mbyhiYXNpY0xvZyk7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmVtaXRzKFtcIm5vdGljZVwiLCBcIl9wcm9taXNlRW1vdGVvbmx5XCJdLCBub3RpY2VBbmRNc2dpZCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgICAgICAgICAvLyBTbG93IGNvbW1hbmQgZmFpbGVkLi5cbiAgICAgICAgICAgICAgICAgICAgY2FzZSBcInVzYWdlX3Nsb3dfb25cIjpcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMubG9nLmluZm8oYmFzaWNMb2cpO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5lbWl0cyhbXCJub3RpY2VcIiwgXCJfcHJvbWlzZVNsb3dcIl0sIG5vdGljZUFuZE1zZ2lkKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICAgICAgICAgIC8vIFNsb3dvZmYgY29tbWFuZCBmYWlsZWQuLlxuICAgICAgICAgICAgICAgICAgICBjYXNlIFwidXNhZ2Vfc2xvd19vZmZcIjpcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMubG9nLmluZm8oYmFzaWNMb2cpO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5lbWl0cyhbXCJub3RpY2VcIiwgXCJfcHJvbWlzZVNsb3dvZmZcIl0sIG5vdGljZUFuZE1zZ2lkKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICAgICAgICAgIC8vIFRpbWVvdXQgY29tbWFuZCBmYWlsZWQuLlxuICAgICAgICAgICAgICAgICAgICBjYXNlIFwidXNhZ2VfdGltZW91dFwiOlxuICAgICAgICAgICAgICAgICAgICBjYXNlIFwiYmFkX3RpbWVvdXRfYWRtaW5cIjpcbiAgICAgICAgICAgICAgICAgICAgY2FzZSBcImJhZF90aW1lb3V0X2Jyb2FkY2FzdGVyXCI6XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgXCJiYWRfdGltZW91dF9kdXJhdGlvblwiOlxuICAgICAgICAgICAgICAgICAgICBjYXNlIFwiYmFkX3RpbWVvdXRfZ2xvYmFsX21vZFwiOlxuICAgICAgICAgICAgICAgICAgICBjYXNlIFwiYmFkX3RpbWVvdXRfc2VsZlwiOlxuICAgICAgICAgICAgICAgICAgICBjYXNlIFwiYmFkX3RpbWVvdXRfc3RhZmZcIjpcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMubG9nLmluZm8oYmFzaWNMb2cpO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5lbWl0cyhbXCJub3RpY2VcIiwgXCJfcHJvbWlzZVRpbWVvdXRcIl0sIG5vdGljZUFuZE1zZ2lkKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICAgICAgICAgIC8vIFVuYmFuIGNvbW1hbmQgc3VjY2Vzcy4uXG4gICAgICAgICAgICAgICAgICAgIC8vIFVuYmFuIGNhbiBhbHNvIGJlIHVzZWQgdG8gY2FuY2VsIGFuIGFjdGl2ZSB0aW1lb3V0LlxuICAgICAgICAgICAgICAgICAgICBjYXNlIFwidW50aW1lb3V0X3N1Y2Nlc3NcIjpcbiAgICAgICAgICAgICAgICAgICAgY2FzZSBcInVuYmFuX3N1Y2Nlc3NcIjpcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMubG9nLmluZm8oYmFzaWNMb2cpO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5lbWl0cyhbXCJub3RpY2VcIiwgXCJfcHJvbWlzZVVuYmFuXCJdLCBub3RpY2VBbmROdWxsKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICAgICAgICAgIC8vIFVuYmFuIGNvbW1hbmQgZmFpbGVkLi5cbiAgICAgICAgICAgICAgICAgICAgY2FzZSBcInVzYWdlX3VuYmFuXCI6XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgXCJiYWRfdW5iYW5fbm9fYmFuXCI6XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmxvZy5pbmZvKGJhc2ljTG9nKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuZW1pdHMoW1wibm90aWNlXCIsIFwiX3Byb21pc2VVbmJhblwiXSwgbm90aWNlQW5kTXNnaWQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgICAgICAgICAgLy8gRGVsZXRlIGNvbW1hbmQgZmFpbGVkLi5cbiAgICAgICAgICAgICAgICAgICAgY2FzZSBcInVzYWdlX2RlbGV0ZVwiOlxuICAgICAgICAgICAgICAgICAgICBjYXNlIFwiYmFkX2RlbGV0ZV9tZXNzYWdlX2Vycm9yXCI6XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgXCJiYWRfZGVsZXRlX21lc3NhZ2VfYnJvYWRjYXN0ZXJcIjpcbiAgICAgICAgICAgICAgICAgICAgY2FzZSBcImJhZF9kZWxldGVfbWVzc2FnZV9tb2RcIjpcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMubG9nLmluZm8oYmFzaWNMb2cpO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5lbWl0cyhbXCJub3RpY2VcIiwgXCJfcHJvbWlzZURlbGV0ZW1lc3NhZ2VcIl0sIG5vdGljZUFuZE1zZ2lkKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICAgICAgICAgIC8vIFVuaG9zdCBjb21tYW5kIGZhaWxlZC4uXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgXCJ1c2FnZV91bmhvc3RcIjpcbiAgICAgICAgICAgICAgICAgICAgY2FzZSBcIm5vdF9ob3N0aW5nXCI6XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmxvZy5pbmZvKGJhc2ljTG9nKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuZW1pdHMoW1wibm90aWNlXCIsIFwiX3Byb21pc2VVbmhvc3RcIl0sIG5vdGljZUFuZE1zZ2lkKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICAgICAgICAgIC8vIFdoaXNwZXIgY29tbWFuZCBmYWlsZWQuLlxuICAgICAgICAgICAgICAgICAgICBjYXNlIFwid2hpc3Blcl9pbnZhbGlkX2xvZ2luXCI6XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgXCJ3aGlzcGVyX2ludmFsaWRfc2VsZlwiOlxuICAgICAgICAgICAgICAgICAgICBjYXNlIFwid2hpc3Blcl9saW1pdF9wZXJfbWluXCI6XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgXCJ3aGlzcGVyX2xpbWl0X3Blcl9zZWNcIjpcbiAgICAgICAgICAgICAgICAgICAgY2FzZSBcIndoaXNwZXJfcmVzdHJpY3RlZF9yZWNpcGllbnRcIjpcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMubG9nLmluZm8oYmFzaWNMb2cpO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5lbWl0cyhbXCJub3RpY2VcIiwgXCJfcHJvbWlzZVdoaXNwZXJcIl0sIG5vdGljZUFuZE1zZ2lkKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICAgICAgICAgIC8vIFBlcm1pc3Npb24gZXJyb3IuLlxuICAgICAgICAgICAgICAgICAgICBjYXNlIFwibm9fcGVybWlzc2lvblwiOlxuICAgICAgICAgICAgICAgICAgICBjYXNlIFwibXNnX2Jhbm5lZFwiOlxuICAgICAgICAgICAgICAgICAgICBjYXNlIFwibXNnX3Jvb21fbm90X2ZvdW5kXCI6XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgXCJtc2dfY2hhbm5lbF9zdXNwZW5kZWRcIjpcbiAgICAgICAgICAgICAgICAgICAgY2FzZSBcInRvc19iYW5cIjpcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMubG9nLmluZm8oYmFzaWNMb2cpO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5lbWl0cyhbXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJub3RpY2VcIixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBcIl9wcm9taXNlQmFuXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJfcHJvbWlzZUNsZWFyXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJfcHJvbWlzZVVuYmFuXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJfcHJvbWlzZVRpbWVvdXRcIixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBcIl9wcm9taXNlRGVsZXRlbWVzc2FnZVwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwiX3Byb21pc2VNb2RzXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJfcHJvbWlzZU1vZFwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwiX3Byb21pc2VVbm1vZFwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwiX3Byb21pc2VWaXBzXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJfcHJvbWlzZVZpcFwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwiX3Byb21pc2VVbnZpcFwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwiX3Byb21pc2VDb21tZXJjaWFsXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJfcHJvbWlzZUhvc3RcIixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBcIl9wcm9taXNlVW5ob3N0XCIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJfcHJvbWlzZUpvaW5cIixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBcIl9wcm9taXNlUGFydFwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwiX3Byb21pc2VSOWtiZXRhXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJfcHJvbWlzZVI5a2JldGFvZmZcIixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBcIl9wcm9taXNlU2xvd1wiLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwiX3Byb21pc2VTbG93b2ZmXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJfcHJvbWlzZUZvbGxvd2Vyc1wiLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwiX3Byb21pc2VGb2xsb3dlcnNvZmZcIixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBcIl9wcm9taXNlU3Vic2NyaWJlcnNcIixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBcIl9wcm9taXNlU3Vic2NyaWJlcnNvZmZcIixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBcIl9wcm9taXNlRW1vdGVvbmx5XCIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJfcHJvbWlzZUVtb3Rlb25seW9mZlwiXG4gICAgICAgICAgICAgICAgICAgICAgICBdLCBbbm90aWNlQXJyLCBbbXNnaWQsIGNoYW5uZWxdXSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgIC8vIEF1dG9tb2QtcmVsYXRlZC4uXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgXCJtc2dfcmVqZWN0ZWRcIjpcbiAgICAgICAgICAgICAgICAgICAgY2FzZSBcIm1zZ19yZWplY3RlZF9tYW5kYXRvcnlcIjpcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMubG9nLmluZm8oYmFzaWNMb2cpO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5lbWl0KFwiYXV0b21vZFwiLCBjaGFubmVsLCBtc2dpZCwgbXNnKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICAgICAgICAgIC8vIFVucmVjb2duaXplZCBjb21tYW5kLi5cbiAgICAgICAgICAgICAgICAgICAgY2FzZSBcInVucmVjb2duaXplZF9jbWRcIjpcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMubG9nLmluZm8oYmFzaWNMb2cpO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5lbWl0KFwibm90aWNlXCIsIGNoYW5uZWwsIG1zZ2lkLCBtc2cpO1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgICAgICAgICAgLy8gU2VuZCB0aGUgZm9sbG93aW5nIG1zZy1pZHMgdG8gdGhlIG5vdGljZSBldmVudCBsaXN0ZW5lci4uXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgXCJjbWRzX2F2YWlsYWJsZVwiOlxuICAgICAgICAgICAgICAgICAgICBjYXNlIFwiaG9zdF90YXJnZXRfd2VudF9vZmZsaW5lXCI6XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgXCJtc2dfY2Vuc29yZWRfYnJvYWRjYXN0ZXJcIjpcbiAgICAgICAgICAgICAgICAgICAgY2FzZSBcIm1zZ19kdXBsaWNhdGVcIjpcbiAgICAgICAgICAgICAgICAgICAgY2FzZSBcIm1zZ19lbW90ZW9ubHlcIjpcbiAgICAgICAgICAgICAgICAgICAgY2FzZSBcIm1zZ192ZXJpZmllZF9lbWFpbFwiOlxuICAgICAgICAgICAgICAgICAgICBjYXNlIFwibXNnX3JhdGVsaW1pdFwiOlxuICAgICAgICAgICAgICAgICAgICBjYXNlIFwibXNnX3N1YnNvbmx5XCI6XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgXCJtc2dfdGltZWRvdXRcIjpcbiAgICAgICAgICAgICAgICAgICAgY2FzZSBcIm1zZ19iYWRfY2hhcmFjdGVyc1wiOlxuICAgICAgICAgICAgICAgICAgICBjYXNlIFwibXNnX2NoYW5uZWxfYmxvY2tlZFwiOlxuICAgICAgICAgICAgICAgICAgICBjYXNlIFwibXNnX2ZhY2Vib29rXCI6XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgXCJtc2dfZm9sbG93ZXJzb25seVwiOlxuICAgICAgICAgICAgICAgICAgICBjYXNlIFwibXNnX2ZvbGxvd2Vyc29ubHlfZm9sbG93ZWRcIjpcbiAgICAgICAgICAgICAgICAgICAgY2FzZSBcIm1zZ19mb2xsb3dlcnNvbmx5X3plcm9cIjpcbiAgICAgICAgICAgICAgICAgICAgY2FzZSBcIm1zZ19zbG93bW9kZVwiOlxuICAgICAgICAgICAgICAgICAgICBjYXNlIFwibXNnX3N1c3BlbmRlZFwiOlxuICAgICAgICAgICAgICAgICAgICBjYXNlIFwibm9faGVscFwiOlxuICAgICAgICAgICAgICAgICAgICBjYXNlIFwidXNhZ2VfZGlzY29ubmVjdFwiOlxuICAgICAgICAgICAgICAgICAgICBjYXNlIFwidXNhZ2VfaGVscFwiOlxuICAgICAgICAgICAgICAgICAgICBjYXNlIFwidXNhZ2VfbWVcIjpcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMubG9nLmluZm8oYmFzaWNMb2cpO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5lbWl0KFwibm90aWNlXCIsIGNoYW5uZWwsIG1zZ2lkLCBtc2cpO1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgICAgICAgICAgLy8gSWdub3JlIHRoaXMgYmVjYXVzZSB3ZSBhcmUgYWxyZWFkeSBsaXN0ZW5pbmcgdG8gSE9TVFRBUkdFVC4uXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgXCJob3N0X29uXCI6XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgXCJob3N0X29mZlwiOlxuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChtc2cuaW5jbHVkZXMoXCJMb2dpbiB1bnN1Y2Nlc3NmdWxcIikgfHwgbXNnLmluY2x1ZGVzKFwiTG9naW4gYXV0aGVudGljYXRpb24gZmFpbGVkXCIpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy53YXNDbG9zZUNhbGxlZCA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucmVjb25uZWN0ID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5yZWFzb24gPSBtc2c7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5sb2cuZXJyb3IodGhpcy5yZWFzb24pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMud3MuY2xvc2UoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGVsc2UgaWYgKG1zZy5pbmNsdWRlcyhcIkVycm9yIGxvZ2dpbmcgaW5cIikgfHwgbXNnLmluY2x1ZGVzKFwiSW1wcm9wZXJseSBmb3JtYXR0ZWQgYXV0aFwiKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMud2FzQ2xvc2VDYWxsZWQgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnJlY29ubmVjdCA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucmVhc29uID0gbXNnO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMubG9nLmVycm9yKHRoaXMucmVhc29uKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLndzLmNsb3NlKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBlbHNlIGlmIChtc2cuaW5jbHVkZXMoXCJJbnZhbGlkIE5JQ0tcIikpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLndhc0Nsb3NlQ2FsbGVkID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5yZWNvbm5lY3QgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnJlYXNvbiA9IFwiSW52YWxpZCBOSUNLLlwiO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMubG9nLmVycm9yKHRoaXMucmVhc29uKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLndzLmNsb3NlKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmxvZy53YXJuKGBDb3VsZCBub3QgcGFyc2UgTk9USUNFIGZyb20gdG1pLnR3aXRjaC50djpcXG4ke0pTT04uc3RyaW5naWZ5KG1lc3NhZ2UsIG51bGwsIDQpfWApO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICAvLyBIYW5kbGUgc3ViYW5uaXZlcnNhcnkgLyByZXN1Yi4uXG4gICAgICAgICAgICBjYXNlIFwiVVNFUk5PVElDRVwiOlxuICAgICAgICAgICAgICAgIHZhciB1c2VybmFtZSA9IG1lc3NhZ2UudGFnc1tcImRpc3BsYXktbmFtZVwiXSB8fCBtZXNzYWdlLnRhZ3NbXCJsb2dpblwiXTtcbiAgICAgICAgICAgICAgICB2YXIgcGxhbiA9IG1lc3NhZ2UudGFnc1tcIm1zZy1wYXJhbS1zdWItcGxhblwiXSB8fCBcIlwiO1xuICAgICAgICAgICAgICAgIHZhciBwbGFuTmFtZSA9IF8udW5lc2NhcGVJUkMoXy5nZXQobWVzc2FnZS50YWdzW1wibXNnLXBhcmFtLXN1Yi1wbGFuLW5hbWVcIl0sIFwiXCIpKSB8fCBudWxsO1xuICAgICAgICAgICAgICAgIHZhciBwcmltZSA9IHBsYW4uaW5jbHVkZXMoXCJQcmltZVwiKTtcbiAgICAgICAgICAgICAgICB2YXIgbWV0aG9kcyA9IHsgcHJpbWUsIHBsYW4sIHBsYW5OYW1lIH07XG4gICAgICAgICAgICAgICAgdmFyIHVzZXJzdGF0ZSA9IG1lc3NhZ2UudGFncztcbiAgICAgICAgICAgICAgICB2YXIgc3RyZWFrTW9udGhzID0gfn4obWVzc2FnZS50YWdzW1wibXNnLXBhcmFtLXN0cmVhay1tb250aHNcIl0gfHwgMCk7XG4gICAgICAgICAgICAgICAgdmFyIHJlY2lwaWVudCA9IG1lc3NhZ2UudGFnc1tcIm1zZy1wYXJhbS1yZWNpcGllbnQtZGlzcGxheS1uYW1lXCJdIHx8IG1lc3NhZ2UudGFnc1tcIm1zZy1wYXJhbS1yZWNpcGllbnQtdXNlci1uYW1lXCJdO1xuICAgICAgICAgICAgICAgIHZhciBnaWZ0U3ViQ291bnQgPSB+fm1lc3NhZ2UudGFnc1tcIm1zZy1wYXJhbS1tYXNzLWdpZnQtY291bnRcIl07XG4gICAgICAgICAgICAgICAgdXNlcnN0YXRlW1wibWVzc2FnZS10eXBlXCJdID0gbXNnaWQ7XG5cbiAgICAgICAgICAgICAgICBzd2l0Y2gobXNnaWQpIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gSGFuZGxlIHJlc3ViXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgXCJyZXN1YlwiOlxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5lbWl0cyhbXCJyZXN1YlwiLCBcInN1YmFubml2ZXJzYXJ5XCJdLCBbXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgW2NoYW5uZWwsIHVzZXJuYW1lLCBzdHJlYWtNb250aHMsIG1zZywgdXNlcnN0YXRlLCBtZXRob2RzXVxuICAgICAgICAgICAgICAgICAgICAgICAgXSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgICAgICAgICAvLyBIYW5kbGUgc3ViXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgXCJzdWJcIjpcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuZW1pdChcInN1YnNjcmlwdGlvblwiLCBjaGFubmVsLCB1c2VybmFtZSwgbWV0aG9kcywgbXNnLCB1c2Vyc3RhdGUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgICAgICAgICAgLy8gSGFuZGxlIGdpZnQgc3ViXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgXCJzdWJnaWZ0XCI6XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmVtaXQoXCJzdWJnaWZ0XCIsIGNoYW5uZWwsIHVzZXJuYW1lLCBzdHJlYWtNb250aHMsIHJlY2lwaWVudCwgbWV0aG9kcywgdXNlcnN0YXRlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICAgICAgICAgIC8vIEhhbmRsZSBhbm9ueW1vdXMgZ2lmdCBzdWJcbiAgICAgICAgICAgICAgICAgICAgLy8gTmVlZCBwcm9vZiB0aGF0IHRoaXMgZXZlbnQgb2NjdXJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSBcImFub25zdWJnaWZ0XCI6XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmVtaXQoXCJhbm9uc3ViZ2lmdFwiLCBjaGFubmVsLCBzdHJlYWtNb250aHMsIHJlY2lwaWVudCwgbWV0aG9kcywgdXNlcnN0YXRlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICAgICAgICAgIC8vIEhhbmRsZSByYW5kb20gZ2lmdCBzdWJzXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgXCJzdWJteXN0ZXJ5Z2lmdFwiOlxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5lbWl0KFwic3VibXlzdGVyeWdpZnRcIiwgY2hhbm5lbCwgdXNlcm5hbWUsIGdpZnRTdWJDb3VudCwgbWV0aG9kcywgdXNlcnN0YXRlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICAgICAgICAgIC8vIEhhbmRsZSBhbm9ueW1vdXMgcmFuZG9tIGdpZnQgc3Vic1xuICAgICAgICAgICAgICAgICAgICAvLyBOZWVkIHByb29mIHRoYXQgdGhpcyBldmVudCBvY2N1clxuICAgICAgICAgICAgICAgICAgICBjYXNlIFwiYW5vbnN1Ym15c3RlcnlnaWZ0XCI6XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmVtaXQoXCJhbm9uc3VibXlzdGVyeWdpZnRcIiwgY2hhbm5lbCwgZ2lmdFN1YkNvdW50LCBtZXRob2RzLCB1c2Vyc3RhdGUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgICAgICAgICAgLy8gSGFuZGxlIHVzZXIgdXBncmFkaW5nIGZyb20gUHJpbWUgdG8gYSBub3JtYWwgdGllciBzdWJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSBcInByaW1lcGFpZHVwZ3JhZGVcIjpcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuZW1pdChcInByaW1lcGFpZHVwZ3JhZGVcIiwgY2hhbm5lbCwgdXNlcm5hbWUsIG1ldGhvZHMsIHVzZXJzdGF0ZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgICAgICAgICAvLyBIYW5kbGUgdXNlciB1cGdyYWRpbmcgZnJvbSBhIGdpZnRlZCBzdWJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSBcImdpZnRwYWlkdXBncmFkZVwiOlxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHNlbmRlciA9IG1lc3NhZ2UudGFnc1tcIm1zZy1wYXJhbS1zZW5kZXItbmFtZVwiXSB8fCBtZXNzYWdlLnRhZ3NbXCJtc2ctcGFyYW0tc2VuZGVyLWxvZ2luXCJdO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5lbWl0KFwiZ2lmdHBhaWR1cGdyYWRlXCIsIGNoYW5uZWwsIHVzZXJuYW1lLCBzZW5kZXIsIHVzZXJzdGF0ZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgICAgICAgICAvLyBIYW5kbGUgdXNlciB1cGdyYWRpbmcgZnJvbSBhbiBhbm9ueW1vdXMgZ2lmdGVkIHN1YlxuICAgICAgICAgICAgICAgICAgICBjYXNlIFwiYW5vbmdpZnRwYWlkdXBncmFkZVwiOlxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5lbWl0KFwiYW5vbmdpZnRwYWlkdXBncmFkZVwiLCBjaGFubmVsLCB1c2VybmFtZSwgdXNlcnN0YXRlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICAgICAgICAgIC8vIEhhbmRsZSByYWlkXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgXCJyYWlkXCI6XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgdXNlcm5hbWUgPSBtZXNzYWdlLnRhZ3NbXCJtc2ctcGFyYW0tZGlzcGxheU5hbWVcIl0gfHwgbWVzc2FnZS50YWdzW1wibXNnLXBhcmFtLWxvZ2luXCJdO1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHZpZXdlcnMgPSBtZXNzYWdlLnRhZ3NbXCJtc2ctcGFyYW0tdmlld2VyQ291bnRcIl07XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmVtaXQoXCJyYWlkZWRcIiwgY2hhbm5lbCwgdXNlcm5hbWUsIHZpZXdlcnMpO1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgIC8vIENoYW5uZWwgaXMgbm93IGhvc3RpbmcgYW5vdGhlciBjaGFubmVsIG9yIGV4aXRlZCBob3N0IG1vZGUuLlxuICAgICAgICAgICAgY2FzZSBcIkhPU1RUQVJHRVRcIjpcbiAgICAgICAgICAgICAgICB2YXIgbXNnU3BsaXQgPSBtc2cuc3BsaXQoXCIgXCIpO1xuICAgICAgICAgICAgICAgIHZhciB2aWV3ZXJzID0gfn5tc2dTcGxpdFsxXSB8fCAwO1xuICAgICAgICAgICAgICAgIC8vIFN0b3BwZWQgaG9zdGluZy4uXG4gICAgICAgICAgICAgICAgaWYgKG1zZ1NwbGl0WzBdID09PSBcIi1cIikge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmxvZy5pbmZvKGBbJHtjaGFubmVsfV0gRXhpdGVkIGhvc3QgbW9kZS5gKTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5lbWl0cyhbXCJ1bmhvc3RcIiwgXCJfcHJvbWlzZVVuaG9zdFwiXSwgW1tjaGFubmVsLCB2aWV3ZXJzXSwgW251bGxdXSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIC8vIE5vdyBob3N0aW5nLi5cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5sb2cuaW5mbyhgWyR7Y2hhbm5lbH1dIE5vdyBob3N0aW5nICR7bXNnU3BsaXRbMF19IGZvciAke3ZpZXdlcnN9IHZpZXdlcihzKS5gKTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5lbWl0KFwiaG9zdGluZ1wiLCBjaGFubmVsLCBtc2dTcGxpdFswXSwgdmlld2Vycyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICAvLyBTb21lb25lIGhhcyBiZWVuIHRpbWVkIG91dCBvciBjaGF0IGhhcyBiZWVuIGNsZWFyZWQgYnkgYSBtb2RlcmF0b3IuLlxuICAgICAgICAgICAgY2FzZSBcIkNMRUFSQ0hBVFwiOlxuICAgICAgICAgICAgICAgIC8vIFVzZXIgaGFzIGJlZW4gYmFubmVkIC8gdGltZWQgb3V0IGJ5IGEgbW9kZXJhdG9yLi5cbiAgICAgICAgICAgICAgICBpZiAobWVzc2FnZS5wYXJhbXMubGVuZ3RoID4gMSkge1xuICAgICAgICAgICAgICAgICAgICAvLyBEdXJhdGlvbiByZXR1cm5zIG51bGwgaWYgaXQncyBhIGJhbiwgb3RoZXJ3aXNlIGl0J3MgYSB0aW1lb3V0Li5cbiAgICAgICAgICAgICAgICAgICAgdmFyIGR1cmF0aW9uID0gXy5nZXQobWVzc2FnZS50YWdzW1wiYmFuLWR1cmF0aW9uXCJdLCBudWxsKTtcblxuICAgICAgICAgICAgICAgICAgICBpZiAoXy5pc051bGwoZHVyYXRpb24pKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmxvZy5pbmZvKGBbJHtjaGFubmVsfV0gJHttc2d9IGhhcyBiZWVuIGJhbm5lZC5gKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuZW1pdChcImJhblwiLCBjaGFubmVsLCBtc2csIG51bGwsIG1lc3NhZ2UudGFncyk7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmxvZy5pbmZvKGBbJHtjaGFubmVsfV0gJHttc2d9IGhhcyBiZWVuIHRpbWVkIG91dCBmb3IgJHtkdXJhdGlvbn0gc2Vjb25kcy5gKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuZW1pdChcInRpbWVvdXRcIiwgY2hhbm5lbCwgbXNnLCBudWxsLCB+fmR1cmF0aW9uLCBtZXNzYWdlLnRhZ3MpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIC8vIENoYXQgd2FzIGNsZWFyZWQgYnkgYSBtb2RlcmF0b3IuLlxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmxvZy5pbmZvKGBbJHtjaGFubmVsfV0gQ2hhdCB3YXMgY2xlYXJlZCBieSBhIG1vZGVyYXRvci5gKTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5lbWl0cyhbXCJjbGVhcmNoYXRcIiwgXCJfcHJvbWlzZUNsZWFyXCJdLCBbW2NoYW5uZWxdLCBbbnVsbF1dKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgIC8vIFNvbWVvbmUncyBtZXNzYWdlIGhhcyBiZWVuIGRlbGV0ZWRcbiAgICAgICAgICAgIGNhc2UgXCJDTEVBUk1TR1wiOlxuICAgICAgICAgICAgICAgIGlmIChtZXNzYWdlLnBhcmFtcy5sZW5ndGggPiAxKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciB1c2VybmFtZSA9IG1lc3NhZ2UudGFnc1tcImxvZ2luXCJdO1xuICAgICAgICAgICAgICAgICAgICB2YXIgZGVsZXRlZE1lc3NhZ2UgPSBtc2c7XG4gICAgICAgICAgICAgICAgICAgIHZhciB1c2Vyc3RhdGUgPSBtZXNzYWdlLnRhZ3M7XG4gICAgICAgICAgICAgICAgICAgIHVzZXJzdGF0ZVtcIm1lc3NhZ2UtdHlwZVwiXSA9IFwibWVzc2FnZWRlbGV0ZWRcIjtcblxuICAgICAgICAgICAgICAgICAgICB0aGlzLmxvZy5pbmZvKGBbJHtjaGFubmVsfV0gJHt1c2VybmFtZX0ncyBtZXNzYWdlIGhhcyBiZWVuIGRlbGV0ZWQuYCk7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZW1pdChcIm1lc3NhZ2VkZWxldGVkXCIsIGNoYW5uZWwsIHVzZXJuYW1lLCBkZWxldGVkTWVzc2FnZSwgdXNlcnN0YXRlKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgIC8vIFJlY2VpdmVkIGEgcmVjb25uZWN0aW9uIHJlcXVlc3QgZnJvbSB0aGUgc2VydmVyLi5cbiAgICAgICAgICAgIGNhc2UgXCJSRUNPTk5FQ1RcIjpcbiAgICAgICAgICAgICAgICB0aGlzLmxvZy5pbmZvKFwiUmVjZWl2ZWQgUkVDT05ORUNUIHJlcXVlc3QgZnJvbSBUd2l0Y2guLlwiKTtcbiAgICAgICAgICAgICAgICB0aGlzLmxvZy5pbmZvKGBEaXNjb25uZWN0aW5nIGFuZCByZWNvbm5lY3RpbmcgaW4gJHtNYXRoLnJvdW5kKHRoaXMucmVjb25uZWN0VGltZXIgLyAxMDAwKX0gc2Vjb25kcy4uYCk7XG4gICAgICAgICAgICAgICAgdGhpcy5kaXNjb25uZWN0KCk7XG4gICAgICAgICAgICAgICAgc2V0VGltZW91dCgoKSA9PiB7IHRoaXMuY29ubmVjdCgpOyB9LCB0aGlzLnJlY29ubmVjdFRpbWVyKTtcbiAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgLy8gUmVjZWl2ZWQgd2hlbiBqb2luaW5nIGEgY2hhbm5lbCBhbmQgZXZlcnkgdGltZSB5b3Ugc2VuZCBhIFBSSVZNU0cgdG8gYSBjaGFubmVsLlxuICAgICAgICAgICAgY2FzZSBcIlVTRVJTVEFURVwiOlxuICAgICAgICAgICAgICAgIG1lc3NhZ2UudGFncy51c2VybmFtZSA9IHRoaXMudXNlcm5hbWU7XG5cbiAgICAgICAgICAgICAgICAvLyBBZGQgdGhlIGNsaWVudCB0byB0aGUgbW9kZXJhdG9ycyBvZiB0aGlzIHJvb20uLlxuICAgICAgICAgICAgICAgIGlmIChtZXNzYWdlLnRhZ3NbXCJ1c2VyLXR5cGVcIl0gPT09IFwibW9kXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCF0aGlzLm1vZGVyYXRvcnNbdGhpcy5sYXN0Sm9pbmVkXSkgeyB0aGlzLm1vZGVyYXRvcnNbdGhpcy5sYXN0Sm9pbmVkXSA9IFtdOyB9XG4gICAgICAgICAgICAgICAgICAgIGlmICghdGhpcy5tb2RlcmF0b3JzW3RoaXMubGFzdEpvaW5lZF0uaW5jbHVkZXModGhpcy51c2VybmFtZSkpIHsgdGhpcy5tb2RlcmF0b3JzW3RoaXMubGFzdEpvaW5lZF0ucHVzaCh0aGlzLnVzZXJuYW1lKTsgfVxuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIC8vIExvZ2dlZCBpbiBhbmQgdXNlcm5hbWUgZG9lc24ndCBzdGFydCB3aXRoIGp1c3RpbmZhbi4uXG4gICAgICAgICAgICAgICAgaWYgKCFfLmlzSnVzdGluZmFuKHRoaXMuZ2V0VXNlcm5hbWUoKSkgJiYgIXRoaXMudXNlcnN0YXRlW2NoYW5uZWxdKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMudXNlcnN0YXRlW2NoYW5uZWxdID0gbWVzc2FnZS50YWdzO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmxhc3RKb2luZWQgPSBjaGFubmVsO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmNoYW5uZWxzLnB1c2goY2hhbm5lbCk7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMubG9nLmluZm8oYEpvaW5lZCAke2NoYW5uZWx9YCk7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZW1pdChcImpvaW5cIiwgY2hhbm5lbCwgXy51c2VybmFtZSh0aGlzLmdldFVzZXJuYW1lKCkpLCB0cnVlKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAvLyBFbW90ZS1zZXRzIGhhcyBjaGFuZ2VkLCB1cGRhdGUgaXQuLlxuICAgICAgICAgICAgICAgIGlmIChtZXNzYWdlLnRhZ3NbXCJlbW90ZS1zZXRzXCJdICE9PSB0aGlzLmVtb3Rlcykge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLl91cGRhdGVFbW90ZXNldChtZXNzYWdlLnRhZ3NbXCJlbW90ZS1zZXRzXCJdKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICB0aGlzLnVzZXJzdGF0ZVtjaGFubmVsXSA9IG1lc3NhZ2UudGFncztcbiAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgLy8gRGVzY3JpYmUgbm9uLWNoYW5uZWwtc3BlY2lmaWMgc3RhdGUgaW5mb3JtYXRpb25zLi5cbiAgICAgICAgICAgIGNhc2UgXCJHTE9CQUxVU0VSU1RBVEVcIjpcbiAgICAgICAgICAgICAgICB0aGlzLmdsb2JhbHVzZXJzdGF0ZSA9IG1lc3NhZ2UudGFncztcblxuICAgICAgICAgICAgICAgIC8vIFJlY2VpdmVkIGVtb3RlLXNldHMuLlxuICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgbWVzc2FnZS50YWdzW1wiZW1vdGUtc2V0c1wiXSAhPT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLl91cGRhdGVFbW90ZXNldChtZXNzYWdlLnRhZ3NbXCJlbW90ZS1zZXRzXCJdKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgIC8vIFJlY2VpdmVkIHdoZW4gam9pbmluZyBhIGNoYW5uZWwgYW5kIGV2ZXJ5IHRpbWUgb25lIG9mIHRoZSBjaGF0IHJvb20gc2V0dGluZ3MsIGxpa2Ugc2xvdyBtb2RlLCBjaGFuZ2UuXG4gICAgICAgICAgICAvLyBUaGUgbWVzc2FnZSBvbiBqb2luIGNvbnRhaW5zIGFsbCByb29tIHNldHRpbmdzLlxuICAgICAgICAgICAgY2FzZSBcIlJPT01TVEFURVwiOlxuICAgICAgICAgICAgICAgIC8vIFdlIHVzZSB0aGlzIG5vdGljZSB0byBrbm93IGlmIHdlIHN1Y2Nlc3NmdWxseSBqb2luZWQgYSBjaGFubmVsLi5cbiAgICAgICAgICAgICAgICBpZiAoXy5jaGFubmVsKHRoaXMubGFzdEpvaW5lZCkgPT09IGNoYW5uZWwpIHsgdGhpcy5lbWl0KFwiX3Byb21pc2VKb2luXCIsIG51bGwsIGNoYW5uZWwpOyB9XG5cbiAgICAgICAgICAgICAgICAvLyBQcm92aWRlIHRoZSBjaGFubmVsIG5hbWUgaW4gdGhlIHRhZ3MgYmVmb3JlIGVtaXR0aW5nIGl0Li5cbiAgICAgICAgICAgICAgICBtZXNzYWdlLnRhZ3MuY2hhbm5lbCA9IGNoYW5uZWw7XG4gICAgICAgICAgICAgICAgdGhpcy5lbWl0KFwicm9vbXN0YXRlXCIsIGNoYW5uZWwsIG1lc3NhZ2UudGFncyk7XG5cbiAgICAgICAgICAgICAgICBpZiAoIW1lc3NhZ2UudGFncy5oYXNPd25Qcm9wZXJ0eShcInN1YnMtb25seVwiKSkge1xuICAgICAgICAgICAgICAgICAgICAvLyBIYW5kbGUgc2xvdyBtb2RlIGhlcmUgaW5zdGVhZCBvZiB0aGUgc2xvd19vbi9vZmYgbm90aWNlLi5cbiAgICAgICAgICAgICAgICAgICAgLy8gVGhpcyByb29tIGlzIG5vdyBpbiBzbG93IG1vZGUuIFlvdSBtYXkgc2VuZCBtZXNzYWdlcyBldmVyeSBzbG93X2R1cmF0aW9uIHNlY29uZHMuXG4gICAgICAgICAgICAgICAgICAgIGlmIChtZXNzYWdlLnRhZ3MuaGFzT3duUHJvcGVydHkoXCJzbG93XCIpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodHlwZW9mIG1lc3NhZ2UudGFncy5zbG93ID09PSBcImJvb2xlYW5cIiAmJiAhbWVzc2FnZS50YWdzLnNsb3cpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgZGlzYWJsZWQgPSBbY2hhbm5lbCwgZmFsc2UsIDBdO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMubG9nLmluZm8oYFske2NoYW5uZWx9XSBUaGlzIHJvb20gaXMgbm8gbG9uZ2VyIGluIHNsb3cgbW9kZS5gKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmVtaXRzKFtcInNsb3dcIiwgXCJzbG93bW9kZVwiLCBcIl9wcm9taXNlU2xvd29mZlwiXSwgW2Rpc2FibGVkLCBkaXNhYmxlZCwgW251bGxdXSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBtaW51dGVzID0gfn5tZXNzYWdlLnRhZ3Muc2xvdztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgZW5hYmxlZCA9IFtjaGFubmVsLCB0cnVlLCBtaW51dGVzXTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmxvZy5pbmZvKGBbJHtjaGFubmVsfV0gVGhpcyByb29tIGlzIG5vdyBpbiBzbG93IG1vZGUuYCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5lbWl0cyhbXCJzbG93XCIsIFwic2xvd21vZGVcIiwgXCJfcHJvbWlzZVNsb3dcIl0sIFtlbmFibGVkLCBlbmFibGVkLCBbbnVsbF1dKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIC8vIEhhbmRsZSBmb2xsb3dlcnMgb25seSBtb2RlIGhlcmUgaW5zdGVhZCBvZiB0aGUgZm9sbG93ZXJzX29uL29mZiBub3RpY2UuLlxuICAgICAgICAgICAgICAgICAgICAvLyBUaGlzIHJvb20gaXMgbm93IGluIGZvbGxvd2VyLW9ubHkgbW9kZS5cbiAgICAgICAgICAgICAgICAgICAgLy8gVGhpcyByb29tIGlzIG5vdyBpbiA8ZHVyYXRpb24+IGZvbGxvd2Vycy1vbmx5IG1vZGUuXG4gICAgICAgICAgICAgICAgICAgIC8vIFRoaXMgcm9vbSBpcyBubyBsb25nZXIgaW4gZm9sbG93ZXJzLW9ubHkgbW9kZS5cbiAgICAgICAgICAgICAgICAgICAgLy8gZHVyYXRpb24gaXMgaW4gbWludXRlcyAoc3RyaW5nKVxuICAgICAgICAgICAgICAgICAgICAvLyAtMSB3aGVuIC9mb2xsb3dlcnNvZmYgKHN0cmluZylcbiAgICAgICAgICAgICAgICAgICAgLy8gZmFsc2Ugd2hlbiAvZm9sbG93ZXJzIHdpdGggbm8gZHVyYXRpb24gKGJvb2xlYW4pXG4gICAgICAgICAgICAgICAgICAgIGlmIChtZXNzYWdlLnRhZ3MuaGFzT3duUHJvcGVydHkoXCJmb2xsb3dlcnMtb25seVwiKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG1lc3NhZ2UudGFnc1tcImZvbGxvd2Vycy1vbmx5XCJdID09PSBcIi0xXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgZGlzYWJsZWQgPSBbY2hhbm5lbCwgZmFsc2UsIDBdO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMubG9nLmluZm8oYFske2NoYW5uZWx9XSBUaGlzIHJvb20gaXMgbm8gbG9uZ2VyIGluIGZvbGxvd2Vycy1vbmx5IG1vZGUuYCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5lbWl0cyhbXCJmb2xsb3dlcnNvbmx5XCIsIFwiZm9sbG93ZXJzbW9kZVwiLCBcIl9wcm9taXNlRm9sbG93ZXJzb2ZmXCJdLCBbZGlzYWJsZWQsIGRpc2FibGVkLCBbbnVsbF1dKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIG1pbnV0ZXMgPSB+fm1lc3NhZ2UudGFnc1tcImZvbGxvd2Vycy1vbmx5XCJdO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBlbmFibGVkID0gW2NoYW5uZWwsIHRydWUsIG1pbnV0ZXNdO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMubG9nLmluZm8oYFske2NoYW5uZWx9XSBUaGlzIHJvb20gaXMgbm93IGluIGZvbGxvd2VyLW9ubHkgbW9kZS5gKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmVtaXRzKFtcImZvbGxvd2Vyc29ubHlcIiwgXCJmb2xsb3dlcnNtb2RlXCIsIFwiX3Byb21pc2VGb2xsb3dlcnNcIl0sIFtlbmFibGVkLCBlbmFibGVkLCBbbnVsbF1dKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgLy8gV3JvbmcgY2x1c3Rlci4uXG4gICAgICAgICAgICBjYXNlIFwiU0VSVkVSQ0hBTkdFXCI6XG4gICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgdGhpcy5sb2cud2FybihgQ291bGQgbm90IHBhcnNlIG1lc3NhZ2UgZnJvbSB0bWkudHdpdGNoLnR2OlxcbiR7SlNPTi5zdHJpbmdpZnkobWVzc2FnZSwgbnVsbCwgNCl9YCk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBNZXNzYWdlcyBmcm9tIGp0di4uXG4gICAgZWxzZSBpZiAobWVzc2FnZS5wcmVmaXggPT09IFwianR2XCIpIHtcbiAgICAgICAgc3dpdGNoKG1lc3NhZ2UuY29tbWFuZCkge1xuICAgICAgICAgICAgY2FzZSBcIk1PREVcIjpcbiAgICAgICAgICAgICAgICBpZiAobXNnID09PSBcIitvXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gQWRkIHVzZXJuYW1lIHRvIHRoZSBtb2RlcmF0b3JzLi5cbiAgICAgICAgICAgICAgICAgICAgaWYgKCF0aGlzLm1vZGVyYXRvcnNbY2hhbm5lbF0pIHsgdGhpcy5tb2RlcmF0b3JzW2NoYW5uZWxdID0gW107IH1cbiAgICAgICAgICAgICAgICAgICAgaWYgKCF0aGlzLm1vZGVyYXRvcnNbY2hhbm5lbF0uaW5jbHVkZXMobWVzc2FnZS5wYXJhbXNbMl0pKSB7IHRoaXMubW9kZXJhdG9yc1tjaGFubmVsXS5wdXNoKG1lc3NhZ2UucGFyYW1zWzJdKTsgfVxuXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZW1pdChcIm1vZFwiLCBjaGFubmVsLCBtZXNzYWdlLnBhcmFtc1syXSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2UgaWYgKG1zZyA9PT0gXCItb1wiKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIFJlbW92ZSB1c2VybmFtZSBmcm9tIHRoZSBtb2RlcmF0b3JzLi5cbiAgICAgICAgICAgICAgICAgICAgaWYgKCF0aGlzLm1vZGVyYXRvcnNbY2hhbm5lbF0pIHsgdGhpcy5tb2RlcmF0b3JzW2NoYW5uZWxdID0gW107IH1cbiAgICAgICAgICAgICAgICAgICAgdGhpcy5tb2RlcmF0b3JzW2NoYW5uZWxdLmZpbHRlcigodmFsdWUpID0+IHsgcmV0dXJuIHZhbHVlICE9IG1lc3NhZ2UucGFyYW1zWzJdOyB9KTtcblxuICAgICAgICAgICAgICAgICAgICB0aGlzLmVtaXQoXCJ1bm1vZFwiLCBjaGFubmVsLCBtZXNzYWdlLnBhcmFtc1syXSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgIHRoaXMubG9nLndhcm4oYENvdWxkIG5vdCBwYXJzZSBtZXNzYWdlIGZyb20ganR2OlxcbiR7SlNPTi5zdHJpbmdpZnkobWVzc2FnZSwgbnVsbCwgNCl9YCk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBBbnl0aGluZyBlbHNlLi5cbiAgICBlbHNlIHtcbiAgICAgICAgc3dpdGNoKG1lc3NhZ2UuY29tbWFuZCkge1xuICAgICAgICAgICAgY2FzZSBcIjM1M1wiOlxuICAgICAgICAgICAgICAgIHRoaXMuZW1pdChcIm5hbWVzXCIsIG1lc3NhZ2UucGFyYW1zWzJdLCBtZXNzYWdlLnBhcmFtc1szXS5zcGxpdChcIiBcIikpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICBjYXNlIFwiMzY2XCI6XG4gICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgIC8vIFNvbWVvbmUgaGFzIGpvaW5lZCB0aGUgY2hhbm5lbC4uXG4gICAgICAgICAgICBjYXNlIFwiSk9JTlwiOlxuICAgICAgICAgICAgICAgIHZhciBuaWNrID0gbWVzc2FnZS5wcmVmaXguc3BsaXQoXCIhXCIpWzBdO1xuICAgICAgICAgICAgICAgIC8vIEpvaW5lZCBhIGNoYW5uZWwgYXMgYSBqdXN0aW5mYW4gKGFub255bW91cykgdXNlci4uXG4gICAgICAgICAgICAgICAgaWYgKF8uaXNKdXN0aW5mYW4odGhpcy5nZXRVc2VybmFtZSgpKSAmJiB0aGlzLnVzZXJuYW1lID09PSBuaWNrKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMubGFzdEpvaW5lZCA9IGNoYW5uZWw7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuY2hhbm5lbHMucHVzaChjaGFubmVsKTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5sb2cuaW5mbyhgSm9pbmVkICR7Y2hhbm5lbH1gKTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5lbWl0KFwiam9pblwiLCBjaGFubmVsLCBuaWNrLCB0cnVlKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAvLyBTb21lb25lIGVsc2Ugam9pbmVkIHRoZSBjaGFubmVsLCBqdXN0IGVtaXQgdGhlIGpvaW4gZXZlbnQuLlxuICAgICAgICAgICAgICAgIGlmICh0aGlzLnVzZXJuYW1lICE9PSBuaWNrKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZW1pdChcImpvaW5cIiwgY2hhbm5lbCwgbmljaywgZmFsc2UpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgLy8gU29tZW9uZSBoYXMgbGVmdCB0aGUgY2hhbm5lbC4uXG4gICAgICAgICAgICBjYXNlIFwiUEFSVFwiOlxuICAgICAgICAgICAgICAgIHZhciBpc1NlbGYgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICB2YXIgbmljayA9IG1lc3NhZ2UucHJlZml4LnNwbGl0KFwiIVwiKVswXTtcbiAgICAgICAgICAgICAgICAvLyBDbGllbnQgbGVmdCBhIGNoYW5uZWwuLlxuICAgICAgICAgICAgICAgIGlmICh0aGlzLnVzZXJuYW1lID09PSBuaWNrKSB7XG4gICAgICAgICAgICAgICAgICAgIGlzU2VsZiA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLnVzZXJzdGF0ZVtjaGFubmVsXSkgeyBkZWxldGUgdGhpcy51c2Vyc3RhdGVbY2hhbm5lbF07IH1cblxuICAgICAgICAgICAgICAgICAgICB2YXIgaW5kZXggPSB0aGlzLmNoYW5uZWxzLmluZGV4T2YoY2hhbm5lbCk7XG4gICAgICAgICAgICAgICAgICAgIGlmIChpbmRleCAhPT0gLTEpIHsgdGhpcy5jaGFubmVscy5zcGxpY2UoaW5kZXgsIDEpOyB9XG5cbiAgICAgICAgICAgICAgICAgICAgdmFyIGluZGV4ID0gdGhpcy5vcHRzLmNoYW5uZWxzLmluZGV4T2YoY2hhbm5lbCk7XG4gICAgICAgICAgICAgICAgICAgIGlmIChpbmRleCAhPT0gLTEpIHsgdGhpcy5vcHRzLmNoYW5uZWxzLnNwbGljZShpbmRleCwgMSk7IH1cblxuICAgICAgICAgICAgICAgICAgICB0aGlzLmxvZy5pbmZvKGBMZWZ0ICR7Y2hhbm5lbH1gKTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5lbWl0KFwiX3Byb21pc2VQYXJ0XCIsIG51bGwpO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIC8vIENsaWVudCBvciBzb21lb25lIGVsc2UgbGVmdCB0aGUgY2hhbm5lbCwgZW1pdCB0aGUgcGFydCBldmVudC4uXG4gICAgICAgICAgICAgICAgdGhpcy5lbWl0KFwicGFydFwiLCBjaGFubmVsLCBuaWNrLCBpc1NlbGYpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICAvLyBSZWNlaXZlZCBhIHdoaXNwZXIuLlxuICAgICAgICAgICAgY2FzZSBcIldISVNQRVJcIjpcbiAgICAgICAgICAgICAgICB2YXIgbmljayA9IG1lc3NhZ2UucHJlZml4LnNwbGl0KFwiIVwiKVswXTtcbiAgICAgICAgICAgICAgICB0aGlzLmxvZy5pbmZvKGBbV0hJU1BFUl0gPCR7bmlja30+OiAke21zZ31gKTtcblxuICAgICAgICAgICAgICAgIC8vIFVwZGF0ZSB0aGUgdGFncyB0byBwcm92aWRlIHRoZSB1c2VybmFtZS4uXG4gICAgICAgICAgICAgICAgaWYgKCFtZXNzYWdlLnRhZ3MuaGFzT3duUHJvcGVydHkoXCJ1c2VybmFtZVwiKSkgeyBtZXNzYWdlLnRhZ3MudXNlcm5hbWUgPSBuaWNrOyB9XG4gICAgICAgICAgICAgICAgbWVzc2FnZS50YWdzW1wibWVzc2FnZS10eXBlXCJdID0gXCJ3aGlzcGVyXCI7XG5cbiAgICAgICAgICAgICAgICB2YXIgZnJvbSA9IF8uY2hhbm5lbChtZXNzYWdlLnRhZ3MudXNlcm5hbWUpO1xuICAgICAgICAgICAgICAgIC8vIEVtaXQgZm9yIGJvdGgsIHdoaXNwZXIgYW5kIG1lc3NhZ2UuLlxuICAgICAgICAgICAgICAgIHRoaXMuZW1pdHMoW1wid2hpc3BlclwiLCBcIm1lc3NhZ2VcIl0sIFtcbiAgICAgICAgICAgICAgICAgICAgW2Zyb20sIG1lc3NhZ2UudGFncywgbXNnLCBmYWxzZV1cbiAgICAgICAgICAgICAgICBdKTtcbiAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgY2FzZSBcIlBSSVZNU0dcIjpcbiAgICAgICAgICAgICAgICAvLyBBZGQgdXNlcm5hbWUgKGxvd2VyY2FzZSkgdG8gdGhlIHRhZ3MuLlxuICAgICAgICAgICAgICAgIG1lc3NhZ2UudGFncy51c2VybmFtZSA9IG1lc3NhZ2UucHJlZml4LnNwbGl0KFwiIVwiKVswXTtcblxuICAgICAgICAgICAgICAgIC8vIE1lc3NhZ2UgZnJvbSBKVFYuLlxuICAgICAgICAgICAgICAgIGlmIChtZXNzYWdlLnRhZ3MudXNlcm5hbWUgPT09IFwianR2XCIpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIG5hbWUgPSBfLnVzZXJuYW1lKG1zZy5zcGxpdChcIiBcIilbMF0pO1xuICAgICAgICAgICAgICAgICAgICB2YXIgYXV0b2hvc3QgPSBtc2cuaW5jbHVkZXMoXCJhdXRvXCIpO1xuICAgICAgICAgICAgICAgICAgICAvLyBTb21lb25lIGlzIGhvc3RpbmcgdGhlIGNoYW5uZWwgYW5kIHRoZSBtZXNzYWdlIGNvbnRhaW5zIGhvdyBtYW55IHZpZXdlcnMuLlxuICAgICAgICAgICAgICAgICAgICBpZiAobXNnLmluY2x1ZGVzKFwiaG9zdGluZyB5b3UgZm9yXCIpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgY291bnQgPSBfLmV4dHJhY3ROdW1iZXIobXNnKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5lbWl0KFwiaG9zdGVkXCIsIGNoYW5uZWwsIG5hbWUsIGNvdW50LCBhdXRvaG9zdCk7XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAvLyBTb21lIGlzIGhvc3RpbmcgdGhlIGNoYW5uZWwsIGJ1dCBubyB2aWV3ZXIocykgY291bnQgcHJvdmlkZWQgaW4gdGhlIG1lc3NhZ2UuLlxuICAgICAgICAgICAgICAgICAgICBlbHNlIGlmIChtc2cuaW5jbHVkZXMoXCJob3N0aW5nIHlvdVwiKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5lbWl0KFwiaG9zdGVkXCIsIGNoYW5uZWwsIG5hbWUsIDAsIGF1dG9ob3N0KTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAvLyBNZXNzYWdlIGlzIGFuIGFjdGlvbiAoL21lIDxtZXNzYWdlPikuLlxuICAgICAgICAgICAgICAgICAgICB2YXIgYWN0aW9uTWVzc2FnZSA9IF8uYWN0aW9uTWVzc2FnZShtc2cpO1xuICAgICAgICAgICAgICAgICAgICBpZiAoYWN0aW9uTWVzc2FnZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgbWVzc2FnZS50YWdzW1wibWVzc2FnZS10eXBlXCJdID0gXCJhY3Rpb25cIjtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMubG9nLmluZm8oYFske2NoYW5uZWx9XSAqPCR7bWVzc2FnZS50YWdzLnVzZXJuYW1lfT46ICR7YWN0aW9uTWVzc2FnZVsxXX1gKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuZW1pdHMoW1wiYWN0aW9uXCIsIFwibWVzc2FnZVwiXSwgW1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIFtjaGFubmVsLCBtZXNzYWdlLnRhZ3MsIGFjdGlvbk1lc3NhZ2VbMV0sIGZhbHNlXVxuICAgICAgICAgICAgICAgICAgICAgICAgXSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAobWVzc2FnZS50YWdzLmhhc093blByb3BlcnR5KFwiYml0c1wiKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuZW1pdChcImNoZWVyXCIsIGNoYW5uZWwsIG1lc3NhZ2UudGFncywgbXNnKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gTWVzc2FnZSBpcyBhIHJlZ3VsYXIgY2hhdCBtZXNzYWdlLi5cbiAgICAgICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1lc3NhZ2UudGFnc1tcIm1lc3NhZ2UtdHlwZVwiXSA9IFwiY2hhdFwiO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMubG9nLmluZm8oYFske2NoYW5uZWx9XSA8JHttZXNzYWdlLnRhZ3MudXNlcm5hbWV9PjogJHttc2d9YCk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmVtaXRzKFtcImNoYXRcIiwgXCJtZXNzYWdlXCJdLCBbXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFtjaGFubmVsLCBtZXNzYWdlLnRhZ3MsIG1zZywgZmFsc2VdXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgdGhpcy5sb2cud2FybihgQ291bGQgbm90IHBhcnNlIG1lc3NhZ2U6XFxuJHtKU09OLnN0cmluZ2lmeShtZXNzYWdlLCBudWxsLCA0KX1gKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgIH1cbn07XG5cbi8vIENvbm5lY3QgdG8gc2VydmVyLi5cbmNsaWVudC5wcm90b3R5cGUuY29ubmVjdCA9IGZ1bmN0aW9uIGNvbm5lY3QoKSB7XG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgICAgdGhpcy5zZXJ2ZXIgPSBfLmdldCh0aGlzLm9wdHMuY29ubmVjdGlvbi5zZXJ2ZXIsIFwiaXJjLXdzLmNoYXQudHdpdGNoLnR2XCIpO1xuICAgICAgICB0aGlzLnBvcnQgPSBfLmdldCh0aGlzLm9wdHMuY29ubmVjdGlvbi5wb3J0LCA4MCk7XG5cbiAgICAgICAgLy8gT3ZlcnJpZGUgcG9ydCBpZiB1c2luZyBhIHNlY3VyZSBjb25uZWN0aW9uLi5cbiAgICAgICAgaWYgKHRoaXMuc2VjdXJlKSB7IHRoaXMucG9ydCA9IDQ0MzsgfVxuICAgICAgICBpZiAodGhpcy5wb3J0ID09PSA0NDMpIHsgdGhpcy5zZWN1cmUgPSB0cnVlOyB9XG5cbiAgICAgICAgdGhpcy5yZWNvbm5lY3RUaW1lciA9IHRoaXMucmVjb25uZWN0VGltZXIgKiB0aGlzLnJlY29ubmVjdERlY2F5O1xuICAgICAgICBpZiAodGhpcy5yZWNvbm5lY3RUaW1lciA+PSB0aGlzLm1heFJlY29ubmVjdEludGVydmFsKSB7XG4gICAgICAgICAgICB0aGlzLnJlY29ubmVjdFRpbWVyID0gdGhpcy5tYXhSZWNvbm5lY3RJbnRlcnZhbDtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIENvbm5lY3QgdG8gc2VydmVyIGZyb20gY29uZmlndXJhdGlvbi4uXG4gICAgICAgIHRoaXMuX29wZW5Db25uZWN0aW9uKCk7XG4gICAgICAgIHRoaXMub25jZShcIl9wcm9taXNlQ29ubmVjdFwiLCAoZXJyKSA9PiB7XG4gICAgICAgICAgICBpZiAoIWVycikgeyByZXNvbHZlKFt0aGlzLnNlcnZlciwgfn50aGlzLnBvcnRdKTsgfVxuICAgICAgICAgICAgZWxzZSB7IHJlamVjdChlcnIpOyB9XG4gICAgICAgIH0pO1xuICAgIH0pO1xufTtcblxuLy8gT3BlbiBhIGNvbm5lY3Rpb24uLlxuY2xpZW50LnByb3RvdHlwZS5fb3BlbkNvbm5lY3Rpb24gPSBmdW5jdGlvbiBfb3BlbkNvbm5lY3Rpb24oKSB7XG4gICAgdGhpcy53cyA9IG5ldyB3cyhgJHt0aGlzLnNlY3VyZSA/IFwid3NzXCIgOiBcIndzXCJ9Oi8vJHt0aGlzLnNlcnZlcn06JHt0aGlzLnBvcnR9L2AsIFwiaXJjXCIpO1xuXG4gICAgdGhpcy53cy5vbm1lc3NhZ2UgPSB0aGlzLl9vbk1lc3NhZ2UuYmluZCh0aGlzKTtcbiAgICB0aGlzLndzLm9uZXJyb3IgPSB0aGlzLl9vbkVycm9yLmJpbmQodGhpcyk7XG4gICAgdGhpcy53cy5vbmNsb3NlID0gdGhpcy5fb25DbG9zZS5iaW5kKHRoaXMpO1xuICAgIHRoaXMud3Mub25vcGVuID0gdGhpcy5fb25PcGVuLmJpbmQodGhpcyk7XG59O1xuXG4vLyBDYWxsZWQgd2hlbiB0aGUgV2ViU29ja2V0IGNvbm5lY3Rpb24ncyByZWFkeVN0YXRlIGNoYW5nZXMgdG8gT1BFTi5cbi8vIEluZGljYXRlcyB0aGF0IHRoZSBjb25uZWN0aW9uIGlzIHJlYWR5IHRvIHNlbmQgYW5kIHJlY2VpdmUgZGF0YS4uXG5jbGllbnQucHJvdG90eXBlLl9vbk9wZW4gPSBmdW5jdGlvbiBfb25PcGVuKCkge1xuICAgIGlmIChfLmlzTnVsbCh0aGlzLndzKSB8fCB0aGlzLndzLnJlYWR5U3RhdGUgIT09IDEpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICAvLyBFbWl0dGluZyBcImNvbm5lY3RpbmdcIiBldmVudC4uXG4gICAgdGhpcy5sb2cuaW5mbyhgQ29ubmVjdGluZyB0byAke3RoaXMuc2VydmVyfSBvbiBwb3J0ICR7dGhpcy5wb3J0fS4uYCk7XG4gICAgdGhpcy5lbWl0KFwiY29ubmVjdGluZ1wiLCB0aGlzLnNlcnZlciwgfn50aGlzLnBvcnQpO1xuXG4gICAgdGhpcy51c2VybmFtZSA9IF8uZ2V0KHRoaXMub3B0cy5pZGVudGl0eS51c2VybmFtZSwgXy5qdXN0aW5mYW4oKSk7XG4gICAgdGhpcy5wYXNzd29yZCA9IF8ucGFzc3dvcmQoXy5nZXQodGhpcy5vcHRzLmlkZW50aXR5LnBhc3N3b3JkLCBcIlNDSE1PT1BJSUVcIikpO1xuXG4gICAgLy8gRW1pdHRpbmcgXCJsb2dvblwiIGV2ZW50Li5cbiAgICB0aGlzLmxvZy5pbmZvKFwiU2VuZGluZyBhdXRoZW50aWNhdGlvbiB0byBzZXJ2ZXIuLlwiKTtcbiAgICB0aGlzLmVtaXQoXCJsb2dvblwiKTtcblxuICAgIC8vIEF1dGhlbnRpY2F0aW9uLi5cbiAgICB0aGlzLndzLnNlbmQoXCJDQVAgUkVRIDp0d2l0Y2gudHYvdGFncyB0d2l0Y2gudHYvY29tbWFuZHMgdHdpdGNoLnR2L21lbWJlcnNoaXBcIik7XG4gICAgdGhpcy53cy5zZW5kKGBQQVNTICR7dGhpcy5wYXNzd29yZH1gKTtcbiAgICB0aGlzLndzLnNlbmQoYE5JQ0sgJHt0aGlzLnVzZXJuYW1lfWApO1xufTtcblxuLy8gQ2FsbGVkIHdoZW4gYSBtZXNzYWdlIGlzIHJlY2VpdmVkIGZyb20gdGhlIHNlcnZlci4uXG5jbGllbnQucHJvdG90eXBlLl9vbk1lc3NhZ2UgPSBmdW5jdGlvbiBfb25NZXNzYWdlKGV2ZW50KSB7XG4gICAgdmFyIHBhcnRzID0gZXZlbnQuZGF0YS5zcGxpdChcIlxcclxcblwiKTtcblxuICAgIHBhcnRzLmZvckVhY2goKHN0cikgPT4ge1xuICAgICAgICBpZiAoIV8uaXNOdWxsKHN0cikpIHsgdGhpcy5oYW5kbGVNZXNzYWdlKHBhcnNlLm1zZyhzdHIpKTsgfVxuICAgIH0pO1xufTtcblxuLy8gQ2FsbGVkIHdoZW4gYW4gZXJyb3Igb2NjdXJzLi5cbmNsaWVudC5wcm90b3R5cGUuX29uRXJyb3IgPSBmdW5jdGlvbiBfb25FcnJvcigpIHtcbiAgICB0aGlzLm1vZGVyYXRvcnMgPSB7fTtcbiAgICB0aGlzLnVzZXJzdGF0ZSA9IHt9O1xuICAgIHRoaXMuZ2xvYmFsdXNlcnN0YXRlID0ge307XG5cbiAgICAvLyBTdG9wIHRoZSBpbnRlcm5hbCBwaW5nIHRpbWVvdXQgY2hlY2sgaW50ZXJ2YWwuLlxuICAgIGNsZWFySW50ZXJ2YWwodGhpcy5waW5nTG9vcCk7XG4gICAgY2xlYXJUaW1lb3V0KHRoaXMucGluZ1RpbWVvdXQpO1xuXG4gICAgdGhpcy5yZWFzb24gPSAhXy5pc051bGwodGhpcy53cykgPyBcIlVuYWJsZSB0byBjb25uZWN0LlwiIDogXCJDb25uZWN0aW9uIGNsb3NlZC5cIjtcblxuICAgIHRoaXMuZW1pdHMoW1wiX3Byb21pc2VDb25uZWN0XCIsIFwiZGlzY29ubmVjdGVkXCJdLCBbW3RoaXMucmVhc29uXV0pO1xuXG4gICAgLy8gUmVjb25uZWN0IHRvIHNlcnZlci4uXG4gICAgaWYgKHRoaXMucmVjb25uZWN0ICYmIHRoaXMucmVjb25uZWN0aW9ucyA9PT0gdGhpcy5tYXhSZWNvbm5lY3RBdHRlbXB0cykge1xuICAgICAgICB0aGlzLmVtaXQoXCJtYXhyZWNvbm5lY3RcIik7XG4gICAgICAgIHRoaXMubG9nLmVycm9yKFwiTWF4aW11bSByZWNvbm5lY3Rpb24gYXR0ZW1wdHMgcmVhY2hlZC5cIik7XG4gICAgfVxuICAgIGlmICh0aGlzLnJlY29ubmVjdCAmJiAhdGhpcy5yZWNvbm5lY3RpbmcgJiYgdGhpcy5yZWNvbm5lY3Rpb25zIDw9IHRoaXMubWF4UmVjb25uZWN0QXR0ZW1wdHMtMSkge1xuICAgICAgICB0aGlzLnJlY29ubmVjdGluZyA9IHRydWU7XG4gICAgICAgIHRoaXMucmVjb25uZWN0aW9ucyA9IHRoaXMucmVjb25uZWN0aW9ucysxO1xuICAgICAgICB0aGlzLmxvZy5lcnJvcihgUmVjb25uZWN0aW5nIGluICR7TWF0aC5yb3VuZCh0aGlzLnJlY29ubmVjdFRpbWVyIC8gMTAwMCl9IHNlY29uZHMuLmApO1xuICAgICAgICB0aGlzLmVtaXQoXCJyZWNvbm5lY3RcIik7XG4gICAgICAgIHNldFRpbWVvdXQoKCkgPT4geyB0aGlzLnJlY29ubmVjdGluZyA9IGZhbHNlOyB0aGlzLmNvbm5lY3QoKTsgfSwgdGhpcy5yZWNvbm5lY3RUaW1lcik7XG4gICAgfVxuXG4gICAgdGhpcy53cyA9IG51bGw7XG59O1xuXG4vLyBDYWxsZWQgd2hlbiB0aGUgV2ViU29ja2V0IGNvbm5lY3Rpb24ncyByZWFkeVN0YXRlIGNoYW5nZXMgdG8gQ0xPU0VELi5cbmNsaWVudC5wcm90b3R5cGUuX29uQ2xvc2UgPSBmdW5jdGlvbiBfb25DbG9zZSgpIHtcbiAgICB0aGlzLm1vZGVyYXRvcnMgPSB7fTtcbiAgICB0aGlzLnVzZXJzdGF0ZSA9IHt9O1xuICAgIHRoaXMuZ2xvYmFsdXNlcnN0YXRlID0ge307XG5cbiAgICAvLyBTdG9wIHRoZSBpbnRlcm5hbCBwaW5nIHRpbWVvdXQgY2hlY2sgaW50ZXJ2YWwuLlxuICAgIGNsZWFySW50ZXJ2YWwodGhpcy5waW5nTG9vcCk7XG4gICAgY2xlYXJUaW1lb3V0KHRoaXMucGluZ1RpbWVvdXQpO1xuXG4gICAgLy8gVXNlciBjYWxsZWQgLmRpc2Nvbm5lY3QoKSwgZG9uJ3QgdHJ5IHRvIHJlY29ubmVjdC5cbiAgICBpZiAodGhpcy53YXNDbG9zZUNhbGxlZCkge1xuICAgICAgICB0aGlzLndhc0Nsb3NlQ2FsbGVkID0gZmFsc2U7XG4gICAgICAgIHRoaXMucmVhc29uID0gXCJDb25uZWN0aW9uIGNsb3NlZC5cIjtcbiAgICAgICAgdGhpcy5sb2cuaW5mbyh0aGlzLnJlYXNvbik7XG4gICAgICAgIHRoaXMuZW1pdHMoW1wiX3Byb21pc2VDb25uZWN0XCIsIFwiX3Byb21pc2VEaXNjb25uZWN0XCIsIFwiZGlzY29ubmVjdGVkXCJdLCBbW3RoaXMucmVhc29uXSwgW251bGxdLCBbdGhpcy5yZWFzb25dXSk7XG4gICAgfVxuICAgIC8vIEdvdCBkaXNjb25uZWN0ZWQgZnJvbSBzZXJ2ZXIuLlxuICAgIGVsc2Uge1xuICAgICAgICB0aGlzLmVtaXRzKFtcIl9wcm9taXNlQ29ubmVjdFwiLCBcImRpc2Nvbm5lY3RlZFwiXSwgW1t0aGlzLnJlYXNvbl1dKTtcblxuICAgICAgICAvLyBSZWNvbm5lY3QgdG8gc2VydmVyLi5cbiAgICAgICAgaWYgKHRoaXMucmVjb25uZWN0ICYmIHRoaXMucmVjb25uZWN0aW9ucyA9PT0gdGhpcy5tYXhSZWNvbm5lY3RBdHRlbXB0cykge1xuICAgICAgICAgICAgdGhpcy5lbWl0KFwibWF4cmVjb25uZWN0XCIpO1xuICAgICAgICAgICAgdGhpcy5sb2cuZXJyb3IoXCJNYXhpbXVtIHJlY29ubmVjdGlvbiBhdHRlbXB0cyByZWFjaGVkLlwiKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy5yZWNvbm5lY3QgJiYgIXRoaXMucmVjb25uZWN0aW5nICYmIHRoaXMucmVjb25uZWN0aW9ucyA8PSB0aGlzLm1heFJlY29ubmVjdEF0dGVtcHRzLTEpIHtcbiAgICAgICAgICAgIHRoaXMucmVjb25uZWN0aW5nID0gdHJ1ZTtcbiAgICAgICAgICAgIHRoaXMucmVjb25uZWN0aW9ucyA9IHRoaXMucmVjb25uZWN0aW9ucysxO1xuICAgICAgICAgICAgdGhpcy5sb2cuZXJyb3IoYENvdWxkIG5vdCBjb25uZWN0IHRvIHNlcnZlci4gUmVjb25uZWN0aW5nIGluICR7TWF0aC5yb3VuZCh0aGlzLnJlY29ubmVjdFRpbWVyIC8gMTAwMCl9IHNlY29uZHMuLmApO1xuICAgICAgICAgICAgdGhpcy5lbWl0KFwicmVjb25uZWN0XCIpO1xuICAgICAgICAgICAgc2V0VGltZW91dCgoKSA9PiB7IHRoaXMucmVjb25uZWN0aW5nID0gZmFsc2U7IHRoaXMuY29ubmVjdCgpOyB9LCB0aGlzLnJlY29ubmVjdFRpbWVyKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHRoaXMud3MgPSBudWxsO1xufTtcblxuLy8gTWluaW11bSBvZiA2MDBtcyBmb3IgY29tbWFuZCBwcm9taXNlcywgaWYgY3VycmVudCBsYXRlbmN5IGV4Y2VlZHMsIGFkZCAxMDBtcyB0byBpdCB0byBtYWtlIHN1cmUgaXQgZG9lc24ndCBnZXQgdGltZWQgb3V0Li5cbmNsaWVudC5wcm90b3R5cGUuX2dldFByb21pc2VEZWxheSA9IGZ1bmN0aW9uIF9nZXRQcm9taXNlRGVsYXkoKSB7XG4gICAgaWYgKHRoaXMuY3VycmVudExhdGVuY3kgPD0gNjAwKSB7IHJldHVybiA2MDA7IH1cbiAgICBlbHNlIHsgcmV0dXJuIHRoaXMuY3VycmVudExhdGVuY3kgKyAxMDA7IH1cbn07XG5cbi8vIFNlbmQgY29tbWFuZCB0byBzZXJ2ZXIgb3IgY2hhbm5lbC4uXG5jbGllbnQucHJvdG90eXBlLl9zZW5kQ29tbWFuZCA9IGZ1bmN0aW9uIF9zZW5kQ29tbWFuZChkZWxheSwgY2hhbm5lbCwgY29tbWFuZCwgZm4pIHtcbiAgICAvLyBSYWNlIHByb21pc2UgYWdhaW5zdCBkZWxheS4uXG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgICAgLy8gTWFrZSBzdXJlIHRoZSBzb2NrZXQgaXMgb3BlbmVkLi5cbiAgICAgICAgaWYgKF8uaXNOdWxsKHRoaXMud3MpIHx8IHRoaXMud3MucmVhZHlTdGF0ZSAhPT0gMSkge1xuICAgICAgICAgICAgLy8gRGlzY29ubmVjdGVkIGZyb20gc2VydmVyLi5cbiAgICAgICAgICAgIHJldHVybiByZWplY3QoXCJOb3QgY29ubmVjdGVkIHRvIHNlcnZlci5cIik7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAodHlwZW9mIGRlbGF5ID09PSAnbnVtYmVyJykge1xuICAgICAgICAgICAgXy5wcm9taXNlRGVsYXkoZGVsYXkpLnRoZW4oKCkgPT4geyByZWplY3QoXCJObyByZXNwb25zZSBmcm9tIFR3aXRjaC5cIik7IH0pO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gRXhlY3V0aW5nIGEgY29tbWFuZCBvbiBhIGNoYW5uZWwuLlxuICAgICAgICBpZiAoIV8uaXNOdWxsKGNoYW5uZWwpKSB7XG4gICAgICAgICAgICB2YXIgY2hhbiA9IF8uY2hhbm5lbChjaGFubmVsKTtcbiAgICAgICAgICAgIHRoaXMubG9nLmluZm8oYFske2NoYW59XSBFeGVjdXRpbmcgY29tbWFuZDogJHtjb21tYW5kfWApO1xuICAgICAgICAgICAgdGhpcy53cy5zZW5kKGBQUklWTVNHICR7Y2hhbn0gOiR7Y29tbWFuZH1gKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIEV4ZWN1dGluZyBhIHJhdyBjb21tYW5kLi5cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB0aGlzLmxvZy5pbmZvKGBFeGVjdXRpbmcgY29tbWFuZDogJHtjb21tYW5kfWApO1xuICAgICAgICAgICAgdGhpcy53cy5zZW5kKGNvbW1hbmQpO1xuICAgICAgICB9XG4gICAgICAgIGZuKHJlc29sdmUsIHJlamVjdCk7XG4gICAgfSk7XG59O1xuXG4vLyBTZW5kIGEgbWVzc2FnZSB0byBjaGFubmVsLi5cbmNsaWVudC5wcm90b3R5cGUuX3NlbmRNZXNzYWdlID0gZnVuY3Rpb24gX3NlbmRNZXNzYWdlKGRlbGF5LCBjaGFubmVsLCBtZXNzYWdlLCBmbikge1xuICAgIC8vIFByb21pc2UgYSByZXN1bHQuLlxuICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICAgIC8vIE1ha2Ugc3VyZSB0aGUgc29ja2V0IGlzIG9wZW5lZCBhbmQgbm90IGxvZ2dlZCBpbiBhcyBhIGp1c3RpbmZhbiB1c2VyLi5cbiAgICAgICAgaWYgKF8uaXNOdWxsKHRoaXMud3MpIHx8IHRoaXMud3MucmVhZHlTdGF0ZSAhPT0gMSkge1xuICAgICAgICAgICAgcmV0dXJuIHJlamVjdChcIk5vdCBjb25uZWN0ZWQgdG8gc2VydmVyLlwiKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChfLmlzSnVzdGluZmFuKHRoaXMuZ2V0VXNlcm5hbWUoKSkpIHtcbiAgICAgICAgICAgIHJldHVybiByZWplY3QoXCJDYW5ub3Qgc2VuZCBhbm9ueW1vdXMgbWVzc2FnZXMuXCIpO1xuICAgICAgICB9XG4gICAgICAgIHZhciBjaGFuID0gXy5jaGFubmVsKGNoYW5uZWwpO1xuICAgICAgICBpZiAoIXRoaXMudXNlcnN0YXRlW2NoYW5dKSB7IHRoaXMudXNlcnN0YXRlW2NoYW5dID0ge30gfVxuXG4gICAgICAgIC8vIFNwbGl0IGxvbmcgbGluZXMgb3RoZXJ3aXNlIHRoZXkgd2lsbCBiZSBlYXRlbiBieSB0aGUgc2VydmVyLi5cbiAgICAgICAgaWYgKG1lc3NhZ2UubGVuZ3RoID49IDUwMCkge1xuICAgICAgICAgICAgdmFyIG1zZyA9IF8uc3BsaXRMaW5lKG1lc3NhZ2UsIDUwMCk7XG4gICAgICAgICAgICBtZXNzYWdlID0gbXNnWzBdO1xuXG4gICAgICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgICAgICAgICB0aGlzLl9zZW5kTWVzc2FnZShkZWxheSwgY2hhbm5lbCwgbXNnWzFdLCAoKSA9PiB7fSk7XG4gICAgICAgICAgICB9LCAzNTApO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy53cy5zZW5kKGBQUklWTVNHICR7Y2hhbn0gOiR7bWVzc2FnZX1gKTtcblxuICAgICAgICB2YXIgZW1vdGVzID0ge307XG5cbiAgICAgICAgLy8gUGFyc2UgcmVnZXggYW5kIHN0cmluZyBlbW90ZXMuLlxuICAgICAgICBPYmplY3Qua2V5cyh0aGlzLmVtb3Rlc2V0cykuZm9yRWFjaCgoaWQpID0+IHtcbiAgICAgICAgICAgIHRoaXMuZW1vdGVzZXRzW2lkXS5mb3JFYWNoKGZ1bmN0aW9uKGVtb3RlKSB7XG4gICAgICAgICAgICAgICAgaWYgKF8uaXNSZWdleChlbW90ZS5jb2RlKSkgeyByZXR1cm4gcGFyc2UuZW1vdGVSZWdleChtZXNzYWdlLCBlbW90ZS5jb2RlLCBlbW90ZS5pZCwgZW1vdGVzKTsgfVxuICAgICAgICAgICAgICAgIHBhcnNlLmVtb3RlU3RyaW5nKG1lc3NhZ2UsIGVtb3RlLmNvZGUsIGVtb3RlLmlkLCBlbW90ZXMpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIC8vIE1lcmdlIHVzZXJzdGF0ZSB3aXRoIHBhcnNlZCBlbW90ZXMuLlxuICAgICAgICB2YXIgdXNlcnN0YXRlID0gXy5tZXJnZSh0aGlzLnVzZXJzdGF0ZVtjaGFuXSwgcGFyc2UuZW1vdGVzKHsgZW1vdGVzOiBwYXJzZS50cmFuc2Zvcm1FbW90ZXMoZW1vdGVzKSB8fCBudWxsIH0pKTtcblxuICAgICAgICAvLyBNZXNzYWdlIGlzIGFuIGFjdGlvbiAoL21lIDxtZXNzYWdlPikuLlxuICAgICAgICB2YXIgYWN0aW9uTWVzc2FnZSA9IF8uYWN0aW9uTWVzc2FnZShtZXNzYWdlKTtcbiAgICAgICAgaWYgKGFjdGlvbk1lc3NhZ2UpIHtcbiAgICAgICAgICAgIHVzZXJzdGF0ZVtcIm1lc3NhZ2UtdHlwZVwiXSA9IFwiYWN0aW9uXCI7XG4gICAgICAgICAgICB0aGlzLmxvZy5pbmZvKGBbJHtjaGFufV0gKjwke3RoaXMuZ2V0VXNlcm5hbWUoKX0+OiAke2FjdGlvbk1lc3NhZ2VbMV19YCk7XG4gICAgICAgICAgICB0aGlzLmVtaXRzKFtcImFjdGlvblwiLCBcIm1lc3NhZ2VcIl0sIFtcbiAgICAgICAgICAgICAgICBbY2hhbiwgdXNlcnN0YXRlLCBhY3Rpb25NZXNzYWdlWzFdLCB0cnVlXVxuICAgICAgICAgICAgXSk7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBNZXNzYWdlIGlzIGEgcmVndWxhciBjaGF0IG1lc3NhZ2UuLlxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHVzZXJzdGF0ZVtcIm1lc3NhZ2UtdHlwZVwiXSA9IFwiY2hhdFwiO1xuICAgICAgICAgICAgdGhpcy5sb2cuaW5mbyhgWyR7Y2hhbn1dIDwke3RoaXMuZ2V0VXNlcm5hbWUoKX0+OiAke21lc3NhZ2V9YCk7XG4gICAgICAgICAgICB0aGlzLmVtaXRzKFtcImNoYXRcIiwgXCJtZXNzYWdlXCJdLCBbXG4gICAgICAgICAgICAgICAgW2NoYW4sIHVzZXJzdGF0ZSwgbWVzc2FnZSwgdHJ1ZV1cbiAgICAgICAgICAgIF0pO1xuICAgICAgICB9XG4gICAgICAgIGZuKHJlc29sdmUsIHJlamVjdCk7XG4gICAgfSk7XG59O1xuXG4vLyBHcmFiIHRoZSBlbW90ZS1zZXRzIG9iamVjdCBmcm9tIHRoZSBBUEkuLlxuY2xpZW50LnByb3RvdHlwZS5fdXBkYXRlRW1vdGVzZXQgPSBmdW5jdGlvbiBfdXBkYXRlRW1vdGVzZXQoc2V0cykge1xuICAgIHRoaXMuZW1vdGVzID0gc2V0cztcblxuICAgIHRoaXMuYXBpKHtcbiAgICAgICAgdXJsOiBgL2NoYXQvZW1vdGljb25faW1hZ2VzP2Vtb3Rlc2V0cz0ke3NldHN9YCxcbiAgICAgICAgaGVhZGVyczoge1xuICAgICAgICAgICAgXCJBdXRob3JpemF0aW9uXCI6IGBPQXV0aCAke18ucGFzc3dvcmQoXy5nZXQodGhpcy5vcHRzLmlkZW50aXR5LnBhc3N3b3JkLCBcIlwiKSkucmVwbGFjZShcIm9hdXRoOlwiLCBcIlwiKX1gLFxuICAgICAgICAgICAgXCJDbGllbnQtSURcIjogdGhpcy5jbGllbnRJZFxuICAgICAgICB9XG4gICAgfSwgKGVyciwgcmVzLCBib2R5KSA9PiB7XG4gICAgICAgIGlmICghZXJyKSB7XG4gICAgICAgICAgICB0aGlzLmVtb3Rlc2V0cyA9IGJvZHlbXCJlbW90aWNvbl9zZXRzXCJdIHx8IHt9O1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuZW1pdChcImVtb3Rlc2V0c1wiLCBzZXRzLCB0aGlzLmVtb3Rlc2V0cyk7XG4gICAgICAgIH1cbiAgICAgICAgc2V0VGltZW91dCgoKSA9PiB7IHRoaXMuX3VwZGF0ZUVtb3Rlc2V0KHNldHMpOyB9LCA2MDAwMCk7XG4gICAgfSk7XG59O1xuXG4vLyBHZXQgY3VycmVudCB1c2VybmFtZS4uXG5jbGllbnQucHJvdG90eXBlLmdldFVzZXJuYW1lID0gZnVuY3Rpb24gZ2V0VXNlcm5hbWUoKSB7XG4gICAgcmV0dXJuIHRoaXMudXNlcm5hbWU7XG59O1xuXG4vLyBHZXQgY3VycmVudCBvcHRpb25zLi5cbmNsaWVudC5wcm90b3R5cGUuZ2V0T3B0aW9ucyA9IGZ1bmN0aW9uIGdldE9wdGlvbnMoKSB7XG4gICAgcmV0dXJuIHRoaXMub3B0cztcbn07XG5cbi8vIEdldCBjdXJyZW50IGNoYW5uZWxzLi5cbmNsaWVudC5wcm90b3R5cGUuZ2V0Q2hhbm5lbHMgPSBmdW5jdGlvbiBnZXRDaGFubmVscygpIHtcbiAgICByZXR1cm4gdGhpcy5jaGFubmVscztcbn07XG5cbi8vIENoZWNrIGlmIHVzZXJuYW1lIGlzIGEgbW9kZXJhdG9yIG9uIGEgY2hhbm5lbC4uXG5jbGllbnQucHJvdG90eXBlLmlzTW9kID0gZnVuY3Rpb24gaXNNb2QoY2hhbm5lbCwgdXNlcm5hbWUpIHtcbiAgICB2YXIgY2hhbiA9IF8uY2hhbm5lbChjaGFubmVsKTtcbiAgICBpZiAoIXRoaXMubW9kZXJhdG9yc1tjaGFuXSkgeyB0aGlzLm1vZGVyYXRvcnNbY2hhbl0gPSBbXTsgfVxuICAgIHJldHVybiB0aGlzLm1vZGVyYXRvcnNbY2hhbl0uaW5jbHVkZXMoXy51c2VybmFtZSh1c2VybmFtZSkpO1xufTtcblxuLy8gR2V0IHJlYWR5U3RhdGUuLlxuY2xpZW50LnByb3RvdHlwZS5yZWFkeVN0YXRlID0gZnVuY3Rpb24gcmVhZHlTdGF0ZSgpIHtcbiAgICBpZiAoXy5pc051bGwodGhpcy53cykpIHsgcmV0dXJuIFwiQ0xPU0VEXCI7IH1cbiAgICByZXR1cm4gW1wiQ09OTkVDVElOR1wiLCBcIk9QRU5cIiwgXCJDTE9TSU5HXCIsIFwiQ0xPU0VEXCJdW3RoaXMud3MucmVhZHlTdGF0ZV07XG59O1xuXG4vLyBEaXNjb25uZWN0IGZyb20gc2VydmVyLi5cbmNsaWVudC5wcm90b3R5cGUuZGlzY29ubmVjdCA9IGZ1bmN0aW9uIGRpc2Nvbm5lY3QoKSB7XG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgICAgaWYgKCFfLmlzTnVsbCh0aGlzLndzKSAmJiB0aGlzLndzLnJlYWR5U3RhdGUgIT09IDMpIHtcbiAgICAgICAgICAgIHRoaXMud2FzQ2xvc2VDYWxsZWQgPSB0cnVlO1xuICAgICAgICAgICAgdGhpcy5sb2cuaW5mbyhcIkRpc2Nvbm5lY3RpbmcgZnJvbSBzZXJ2ZXIuLlwiKTtcbiAgICAgICAgICAgIHRoaXMud3MuY2xvc2UoKTtcbiAgICAgICAgICAgIHRoaXMub25jZShcIl9wcm9taXNlRGlzY29ubmVjdFwiLCAoKSA9PiB7IHJlc29sdmUoW3RoaXMuc2VydmVyLCB+fnRoaXMucG9ydF0pOyB9KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMubG9nLmVycm9yKFwiQ2Fubm90IGRpc2Nvbm5lY3QgZnJvbSBzZXJ2ZXIuIFNvY2tldCBpcyBub3Qgb3BlbmVkIG9yIGNvbm5lY3Rpb24gaXMgYWxyZWFkeSBjbG9zaW5nLlwiKTtcbiAgICAgICAgICAgIHJlamVjdChcIkNhbm5vdCBkaXNjb25uZWN0IGZyb20gc2VydmVyLiBTb2NrZXQgaXMgbm90IG9wZW5lZCBvciBjb25uZWN0aW9uIGlzIGFscmVhZHkgY2xvc2luZy5cIik7XG4gICAgICAgIH1cbiAgICB9KTtcbn07XG5cbi8vIEV4cG9zZSBldmVyeXRoaW5nLCBmb3IgYnJvd3NlciBhbmQgTm9kZS4uXG5pZiAodHlwZW9mIG1vZHVsZSAhPT0gXCJ1bmRlZmluZWRcIiAmJiBtb2R1bGUuZXhwb3J0cykge1xuICAgIG1vZHVsZS5leHBvcnRzID0gY2xpZW50O1xufVxuaWYgKHR5cGVvZiB3aW5kb3cgIT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICB3aW5kb3cudG1pID0ge307XG4gICAgd2luZG93LnRtaS5jbGllbnQgPSBjbGllbnQ7XG4gICAgd2luZG93LnRtaS5DbGllbnQgPSBjbGllbnQ7XG59XG4iLCJ2YXIgXyA9IHJlcXVpcmUoXCIuL3V0aWxzXCIpO1xuXG4vLyBFbmFibGUgZm9sbG93ZXJzLW9ubHkgbW9kZSBvbiBhIGNoYW5uZWwuLlxuZnVuY3Rpb24gZm9sbG93ZXJzb25seShjaGFubmVsLCBtaW51dGVzKSB7XG4gICAgY2hhbm5lbCA9IF8uY2hhbm5lbChjaGFubmVsKTtcbiAgICBtaW51dGVzID0gXy5nZXQobWludXRlcywgMzApO1xuXG4gICAgLy8gU2VuZCB0aGUgY29tbWFuZCB0byB0aGUgc2VydmVyIGFuZCByYWNlIHRoZSBQcm9taXNlIGFnYWluc3QgYSBkZWxheS4uXG4gICAgcmV0dXJuIHRoaXMuX3NlbmRDb21tYW5kKHRoaXMuX2dldFByb21pc2VEZWxheSgpLCBjaGFubmVsLCBgL2ZvbGxvd2VycyAke21pbnV0ZXN9YCwgKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgICAvLyBSZWNlaXZlZCBfcHJvbWlzZUZvbGxvd2VycyBldmVudCwgcmVzb2x2ZSBvciByZWplY3QuLlxuICAgICAgICB0aGlzLm9uY2UoXCJfcHJvbWlzZUZvbGxvd2Vyc1wiLCAoZXJyKSA9PiB7XG4gICAgICAgICAgICBpZiAoIWVycikgeyByZXNvbHZlKFtjaGFubmVsLCB+fm1pbnV0ZXNdKTsgfVxuICAgICAgICAgICAgZWxzZSB7IHJlamVjdChlcnIpOyB9XG4gICAgICAgIH0pO1xuICAgIH0pO1xufVxuXG4vLyBEaXNhYmxlIGZvbGxvd2Vycy1vbmx5IG1vZGUgb24gYSBjaGFubmVsLi5cbmZ1bmN0aW9uIGZvbGxvd2Vyc29ubHlvZmYoY2hhbm5lbCkge1xuICAgIGNoYW5uZWwgPSBfLmNoYW5uZWwoY2hhbm5lbCk7XG5cbiAgICAvLyBTZW5kIHRoZSBjb21tYW5kIHRvIHRoZSBzZXJ2ZXIgYW5kIHJhY2UgdGhlIFByb21pc2UgYWdhaW5zdCBhIGRlbGF5Li5cbiAgICByZXR1cm4gdGhpcy5fc2VuZENvbW1hbmQodGhpcy5fZ2V0UHJvbWlzZURlbGF5KCksIGNoYW5uZWwsIFwiL2ZvbGxvd2Vyc29mZlwiLCAocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICAgIC8vIFJlY2VpdmVkIF9wcm9taXNlRm9sbG93ZXJzb2ZmIGV2ZW50LCByZXNvbHZlIG9yIHJlamVjdC4uXG4gICAgICAgIHRoaXMub25jZShcIl9wcm9taXNlRm9sbG93ZXJzb2ZmXCIsIChlcnIpID0+IHtcbiAgICAgICAgICAgIGlmICghZXJyKSB7IHJlc29sdmUoW2NoYW5uZWxdKTsgfVxuICAgICAgICAgICAgZWxzZSB7IHJlamVjdChlcnIpOyB9XG4gICAgICAgIH0pO1xuICAgIH0pO1xufVxuXG4vLyBMZWF2ZSBhIGNoYW5uZWwuLlxuZnVuY3Rpb24gcGFydChjaGFubmVsKSB7XG4gICAgY2hhbm5lbCA9IF8uY2hhbm5lbChjaGFubmVsKTtcblxuICAgIC8vIFNlbmQgdGhlIGNvbW1hbmQgdG8gdGhlIHNlcnZlciBhbmQgcmFjZSB0aGUgUHJvbWlzZSBhZ2FpbnN0IGEgZGVsYXkuLlxuICAgIHJldHVybiB0aGlzLl9zZW5kQ29tbWFuZCh0aGlzLl9nZXRQcm9taXNlRGVsYXkoKSwgbnVsbCwgYFBBUlQgJHtjaGFubmVsfWAsIChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgICAgLy8gUmVjZWl2ZWQgX3Byb21pc2VQYXJ0IGV2ZW50LCByZXNvbHZlIG9yIHJlamVjdC4uXG4gICAgICAgIHRoaXMub25jZShcIl9wcm9taXNlUGFydFwiLCAoZXJyKSA9PiB7XG4gICAgICAgICAgICBpZiAoIWVycikgeyByZXNvbHZlKFtjaGFubmVsXSk7IH1cbiAgICAgICAgICAgIGVsc2UgeyByZWplY3QoZXJyKTsgfVxuICAgICAgICB9KTtcbiAgICB9KTtcbn1cblxuLy8gRW5hYmxlIFI5S0JldGEgbW9kZSBvbiBhIGNoYW5uZWwuLlxuZnVuY3Rpb24gcjlrYmV0YShjaGFubmVsKSB7XG4gICAgY2hhbm5lbCA9IF8uY2hhbm5lbChjaGFubmVsKTtcblxuICAgIC8vIFNlbmQgdGhlIGNvbW1hbmQgdG8gdGhlIHNlcnZlciBhbmQgcmFjZSB0aGUgUHJvbWlzZSBhZ2FpbnN0IGEgZGVsYXkuLlxuICAgIHJldHVybiB0aGlzLl9zZW5kQ29tbWFuZCh0aGlzLl9nZXRQcm9taXNlRGVsYXkoKSwgY2hhbm5lbCwgXCIvcjlrYmV0YVwiLCAocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICAgIC8vIFJlY2VpdmVkIF9wcm9taXNlUjlrYmV0YSBldmVudCwgcmVzb2x2ZSBvciByZWplY3QuLlxuICAgICAgICB0aGlzLm9uY2UoXCJfcHJvbWlzZVI5a2JldGFcIiwgKGVycikgPT4ge1xuICAgICAgICAgICAgaWYgKCFlcnIpIHsgcmVzb2x2ZShbY2hhbm5lbF0pOyB9XG4gICAgICAgICAgICBlbHNlIHsgcmVqZWN0KGVycik7IH1cbiAgICAgICAgfSk7XG4gICAgfSk7XG59XG5cbi8vIERpc2FibGUgUjlLQmV0YSBtb2RlIG9uIGEgY2hhbm5lbC4uXG5mdW5jdGlvbiByOWtiZXRhb2ZmKGNoYW5uZWwpIHtcbiAgICBjaGFubmVsID0gXy5jaGFubmVsKGNoYW5uZWwpO1xuXG4gICAgLy8gU2VuZCB0aGUgY29tbWFuZCB0byB0aGUgc2VydmVyIGFuZCByYWNlIHRoZSBQcm9taXNlIGFnYWluc3QgYSBkZWxheS4uXG4gICAgcmV0dXJuIHRoaXMuX3NlbmRDb21tYW5kKHRoaXMuX2dldFByb21pc2VEZWxheSgpLCBjaGFubmVsLCBcIi9yOWtiZXRhb2ZmXCIsIChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgICAgLy8gUmVjZWl2ZWQgX3Byb21pc2VSOWtiZXRhb2ZmIGV2ZW50LCByZXNvbHZlIG9yIHJlamVjdC4uXG4gICAgICAgIHRoaXMub25jZShcIl9wcm9taXNlUjlrYmV0YW9mZlwiLCAoZXJyKSA9PiB7XG4gICAgICAgICAgICBpZiAoIWVycikgeyByZXNvbHZlKFtjaGFubmVsXSk7IH1cbiAgICAgICAgICAgIGVsc2UgeyByZWplY3QoZXJyKTsgfVxuICAgICAgICB9KTtcbiAgICB9KTtcbn1cblxuLy8gRW5hYmxlIHNsb3cgbW9kZSBvbiBhIGNoYW5uZWwuLlxuZnVuY3Rpb24gc2xvdyhjaGFubmVsLCBzZWNvbmRzKSB7XG4gICAgY2hhbm5lbCA9IF8uY2hhbm5lbChjaGFubmVsKTtcbiAgICBzZWNvbmRzID0gXy5nZXQoc2Vjb25kcywgMzAwKTtcblxuICAgIC8vIFNlbmQgdGhlIGNvbW1hbmQgdG8gdGhlIHNlcnZlciBhbmQgcmFjZSB0aGUgUHJvbWlzZSBhZ2FpbnN0IGEgZGVsYXkuLlxuICAgIHJldHVybiB0aGlzLl9zZW5kQ29tbWFuZCh0aGlzLl9nZXRQcm9taXNlRGVsYXkoKSwgY2hhbm5lbCwgYC9zbG93ICR7c2Vjb25kc31gLCAocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICAgIC8vIFJlY2VpdmVkIF9wcm9taXNlU2xvdyBldmVudCwgcmVzb2x2ZSBvciByZWplY3QuLlxuICAgICAgICB0aGlzLm9uY2UoXCJfcHJvbWlzZVNsb3dcIiwgKGVycikgPT4ge1xuICAgICAgICAgICAgaWYgKCFlcnIpIHsgcmVzb2x2ZShbY2hhbm5lbCwgfn5zZWNvbmRzXSk7IH1cbiAgICAgICAgICAgIGVsc2UgeyByZWplY3QoZXJyKTsgfVxuICAgICAgICB9KTtcbiAgICB9KTtcbn1cblxuLy8gRGlzYWJsZSBzbG93IG1vZGUgb24gYSBjaGFubmVsLi5cbmZ1bmN0aW9uIHNsb3dvZmYoY2hhbm5lbCkge1xuICAgIGNoYW5uZWwgPSBfLmNoYW5uZWwoY2hhbm5lbCk7XG5cbiAgICAvLyBTZW5kIHRoZSBjb21tYW5kIHRvIHRoZSBzZXJ2ZXIgYW5kIHJhY2UgdGhlIFByb21pc2UgYWdhaW5zdCBhIGRlbGF5Li5cbiAgICByZXR1cm4gdGhpcy5fc2VuZENvbW1hbmQodGhpcy5fZ2V0UHJvbWlzZURlbGF5KCksIGNoYW5uZWwsIFwiL3Nsb3dvZmZcIiwgKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgICAvLyBSZWNlaXZlZCBfcHJvbWlzZVNsb3dvZmYgZXZlbnQsIHJlc29sdmUgb3IgcmVqZWN0Li5cbiAgICAgICAgdGhpcy5vbmNlKFwiX3Byb21pc2VTbG93b2ZmXCIsIChlcnIpID0+IHtcbiAgICAgICAgICAgIGlmICghZXJyKSB7IHJlc29sdmUoW2NoYW5uZWxdKTsgfVxuICAgICAgICAgICAgZWxzZSB7IHJlamVjdChlcnIpOyB9XG4gICAgICAgIH0pO1xuICAgIH0pO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgICAvLyBTZW5kIGFjdGlvbiBtZXNzYWdlICgvbWUgPG1lc3NhZ2U+KSBvbiBhIGNoYW5uZWwuLlxuICAgIGFjdGlvbjogZnVuY3Rpb24gYWN0aW9uKGNoYW5uZWwsIG1lc3NhZ2UpIHtcbiAgICAgICAgY2hhbm5lbCA9IF8uY2hhbm5lbChjaGFubmVsKTtcbiAgICAgICAgbWVzc2FnZSA9IGBcXHUwMDAxQUNUSU9OICR7bWVzc2FnZX1cXHUwMDAxYDtcblxuICAgICAgICAvLyBTZW5kIHRoZSBjb21tYW5kIHRvIHRoZSBzZXJ2ZXIgYW5kIHJhY2UgdGhlIFByb21pc2UgYWdhaW5zdCBhIGRlbGF5Li5cbiAgICAgICAgcmV0dXJuIHRoaXMuX3NlbmRNZXNzYWdlKHRoaXMuX2dldFByb21pc2VEZWxheSgpLCBjaGFubmVsLCBtZXNzYWdlLCAocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICAgICAgICAvLyBBdCB0aGlzIHRpbWUsIHRoZXJlIGlzIG5vIHBvc3NpYmxlIHdheSB0byBkZXRlY3QgaWYgYSBtZXNzYWdlIGhhcyBiZWVuIHNlbnQgaGFzIGJlZW4gZWF0ZW5cbiAgICAgICAgICAgIC8vIGJ5IHRoZSBzZXJ2ZXIsIHNvIHdlIGNhbiBvbmx5IHJlc29sdmUgdGhlIFByb21pc2UuXG4gICAgICAgICAgICByZXNvbHZlKFtjaGFubmVsLCBtZXNzYWdlXSk7XG4gICAgICAgIH0pO1xuICAgIH0sXG5cbiAgICAvLyBCYW4gdXNlcm5hbWUgb24gY2hhbm5lbC4uXG4gICAgYmFuOiBmdW5jdGlvbiBiYW4oY2hhbm5lbCwgdXNlcm5hbWUsIHJlYXNvbikge1xuICAgICAgICBjaGFubmVsID0gXy5jaGFubmVsKGNoYW5uZWwpO1xuICAgICAgICB1c2VybmFtZSA9IF8udXNlcm5hbWUodXNlcm5hbWUpO1xuICAgICAgICByZWFzb24gPSBfLmdldChyZWFzb24sIFwiXCIpO1xuXG4gICAgICAgIC8vIFNlbmQgdGhlIGNvbW1hbmQgdG8gdGhlIHNlcnZlciBhbmQgcmFjZSB0aGUgUHJvbWlzZSBhZ2FpbnN0IGEgZGVsYXkuLlxuICAgICAgICByZXR1cm4gdGhpcy5fc2VuZENvbW1hbmQodGhpcy5fZ2V0UHJvbWlzZURlbGF5KCksIGNoYW5uZWwsIGAvYmFuICR7dXNlcm5hbWV9ICR7cmVhc29ufWAsIChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgICAgICAgIC8vIFJlY2VpdmVkIF9wcm9taXNlQmFuIGV2ZW50LCByZXNvbHZlIG9yIHJlamVjdC4uXG4gICAgICAgICAgICB0aGlzLm9uY2UoXCJfcHJvbWlzZUJhblwiLCAoZXJyKSA9PiB7XG4gICAgICAgICAgICAgICAgaWYgKCFlcnIpIHsgcmVzb2x2ZShbY2hhbm5lbCwgdXNlcm5hbWUsIHJlYXNvbl0pOyB9XG4gICAgICAgICAgICAgICAgZWxzZSB7IHJlamVjdChlcnIpOyB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gICAgfSxcblxuICAgIC8vIENsZWFyIGFsbCBtZXNzYWdlcyBvbiBhIGNoYW5uZWwuLlxuICAgIGNsZWFyOiBmdW5jdGlvbiBjbGVhcihjaGFubmVsKSB7XG4gICAgICAgIGNoYW5uZWwgPSBfLmNoYW5uZWwoY2hhbm5lbCk7XG5cbiAgICAgICAgLy8gU2VuZCB0aGUgY29tbWFuZCB0byB0aGUgc2VydmVyIGFuZCByYWNlIHRoZSBQcm9taXNlIGFnYWluc3QgYSBkZWxheS4uXG4gICAgICAgIHJldHVybiB0aGlzLl9zZW5kQ29tbWFuZCh0aGlzLl9nZXRQcm9taXNlRGVsYXkoKSwgY2hhbm5lbCwgXCIvY2xlYXJcIiwgKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgICAgICAgLy8gUmVjZWl2ZWQgX3Byb21pc2VDbGVhciBldmVudCwgcmVzb2x2ZSBvciByZWplY3QuLlxuICAgICAgICAgICAgdGhpcy5vbmNlKFwiX3Byb21pc2VDbGVhclwiLCAoZXJyKSA9PiB7XG4gICAgICAgICAgICAgICAgaWYgKCFlcnIpIHsgcmVzb2x2ZShbY2hhbm5lbF0pOyB9XG4gICAgICAgICAgICAgICAgZWxzZSB7IHJlamVjdChlcnIpOyB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gICAgfSxcblxuICAgIC8vIENoYW5nZSB0aGUgY29sb3Igb2YgeW91ciB1c2VybmFtZS4uXG4gICAgY29sb3I6IGZ1bmN0aW9uIGNvbG9yKGNoYW5uZWwsIG5ld0NvbG9yKSB7XG4gICAgICAgIG5ld0NvbG9yID0gXy5nZXQobmV3Q29sb3IsIGNoYW5uZWwpO1xuXG4gICAgICAgIC8vIFNlbmQgdGhlIGNvbW1hbmQgdG8gdGhlIHNlcnZlciBhbmQgcmFjZSB0aGUgUHJvbWlzZSBhZ2FpbnN0IGEgZGVsYXkuLlxuICAgICAgICByZXR1cm4gdGhpcy5fc2VuZENvbW1hbmQodGhpcy5fZ2V0UHJvbWlzZURlbGF5KCksIFwiI3RtaWpzXCIsIGAvY29sb3IgJHtuZXdDb2xvcn1gLCAocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICAgICAgICAvLyBSZWNlaXZlZCBfcHJvbWlzZUNvbG9yIGV2ZW50LCByZXNvbHZlIG9yIHJlamVjdC4uXG4gICAgICAgICAgICB0aGlzLm9uY2UoXCJfcHJvbWlzZUNvbG9yXCIsIChlcnIpID0+IHtcbiAgICAgICAgICAgICAgICBpZiAoIWVycikgeyByZXNvbHZlKFtuZXdDb2xvcl0pOyB9XG4gICAgICAgICAgICAgICAgZWxzZSB7IHJlamVjdChlcnIpOyB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gICAgfSxcblxuICAgIC8vIFJ1biBjb21tZXJjaWFsIG9uIGEgY2hhbm5lbCBmb3IgWCBzZWNvbmRzLi5cbiAgICBjb21tZXJjaWFsOiBmdW5jdGlvbiBjb21tZXJjaWFsKGNoYW5uZWwsIHNlY29uZHMpIHtcbiAgICAgICAgY2hhbm5lbCA9IF8uY2hhbm5lbChjaGFubmVsKTtcbiAgICAgICAgc2Vjb25kcyA9IF8uZ2V0KHNlY29uZHMsIDMwKTtcblxuICAgICAgICAvLyBTZW5kIHRoZSBjb21tYW5kIHRvIHRoZSBzZXJ2ZXIgYW5kIHJhY2UgdGhlIFByb21pc2UgYWdhaW5zdCBhIGRlbGF5Li5cbiAgICAgICAgcmV0dXJuIHRoaXMuX3NlbmRDb21tYW5kKHRoaXMuX2dldFByb21pc2VEZWxheSgpLCBjaGFubmVsLCBgL2NvbW1lcmNpYWwgJHtzZWNvbmRzfWAsIChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgICAgICAgIC8vIFJlY2VpdmVkIF9wcm9taXNlQ29tbWVyY2lhbCBldmVudCwgcmVzb2x2ZSBvciByZWplY3QuLlxuICAgICAgICAgICAgdGhpcy5vbmNlKFwiX3Byb21pc2VDb21tZXJjaWFsXCIsIChlcnIpID0+IHtcbiAgICAgICAgICAgICAgICBpZiAoIWVycikgeyByZXNvbHZlKFtjaGFubmVsLCB+fnNlY29uZHNdKTsgfVxuICAgICAgICAgICAgICAgIGVsc2UgeyByZWplY3QoZXJyKTsgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgIH0sXG5cdFxuXHRcbiAgICAvLyBEZWxldGUgYSBzcGVjaWZpYyBtZXNzYWdlIG9uIGEgY2hhbm5lbFxuICAgIGRlbGV0ZW1lc3NhZ2U6IGZ1bmN0aW9uIGRlbGV0ZW1lc3NhZ2UoY2hhbm5lbCwgbWVzc2FnZVVVSUQpIHtcbiAgICAgICAgY2hhbm5lbCA9IF8uY2hhbm5lbChjaGFubmVsKTtcblxuICAgICAgICAvLyBTZW5kIHRoZSBjb21tYW5kIHRvIHRoZSBzZXJ2ZXIgYW5kIHJhY2UgdGhlIFByb21pc2UgYWdhaW5zdCBhIGRlbGF5Li5cbiAgICAgICAgcmV0dXJuIHRoaXMuX3NlbmRDb21tYW5kKHRoaXMuX2dldFByb21pc2VEZWxheSgpLCBjaGFubmVsLCBgL2RlbGV0ZSAke21lc3NhZ2VVVUlEfWAsIChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgICAgICAgIC8vIFJlY2VpdmVkIF9wcm9taXNlRGVsZXRlbWVzc2FnZSBldmVudCwgcmVzb2x2ZSBvciByZWplY3QuLlxuICAgICAgICAgICAgdGhpcy5vbmNlKFwiX3Byb21pc2VEZWxldGVtZXNzYWdlXCIsIChlcnIpID0+IHtcbiAgICAgICAgICAgICAgICBpZiAoIWVycikgeyByZXNvbHZlKFtjaGFubmVsXSk7IH1cbiAgICAgICAgICAgICAgICBlbHNlIHsgcmVqZWN0KGVycik7IH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICB9LFxuXG4gICAgLy8gRW5hYmxlIGVtb3RlLW9ubHkgbW9kZSBvbiBhIGNoYW5uZWwuLlxuICAgIGVtb3Rlb25seTogZnVuY3Rpb24gZW1vdGVvbmx5KGNoYW5uZWwpIHtcbiAgICAgICAgY2hhbm5lbCA9IF8uY2hhbm5lbChjaGFubmVsKTtcblxuICAgICAgICAvLyBTZW5kIHRoZSBjb21tYW5kIHRvIHRoZSBzZXJ2ZXIgYW5kIHJhY2UgdGhlIFByb21pc2UgYWdhaW5zdCBhIGRlbGF5Li5cbiAgICAgICAgcmV0dXJuIHRoaXMuX3NlbmRDb21tYW5kKHRoaXMuX2dldFByb21pc2VEZWxheSgpLCBjaGFubmVsLCBcIi9lbW90ZW9ubHlcIiwgKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgICAgICAgLy8gUmVjZWl2ZWQgX3Byb21pc2VFbW90ZW9ubHkgZXZlbnQsIHJlc29sdmUgb3IgcmVqZWN0Li5cbiAgICAgICAgICAgIHRoaXMub25jZShcIl9wcm9taXNlRW1vdGVvbmx5XCIsIChlcnIpID0+IHtcbiAgICAgICAgICAgICAgICBpZiAoIWVycikgeyByZXNvbHZlKFtjaGFubmVsXSk7IH1cbiAgICAgICAgICAgICAgICBlbHNlIHsgcmVqZWN0KGVycik7IH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICB9LFxuXG4gICAgLy8gRGlzYWJsZSBlbW90ZS1vbmx5IG1vZGUgb24gYSBjaGFubmVsLi5cbiAgICBlbW90ZW9ubHlvZmY6IGZ1bmN0aW9uIGVtb3Rlb25seW9mZihjaGFubmVsKSB7XG4gICAgICAgIGNoYW5uZWwgPSBfLmNoYW5uZWwoY2hhbm5lbCk7XG5cbiAgICAgICAgLy8gU2VuZCB0aGUgY29tbWFuZCB0byB0aGUgc2VydmVyIGFuZCByYWNlIHRoZSBQcm9taXNlIGFnYWluc3QgYSBkZWxheS4uXG4gICAgICAgIHJldHVybiB0aGlzLl9zZW5kQ29tbWFuZCh0aGlzLl9nZXRQcm9taXNlRGVsYXkoKSwgY2hhbm5lbCwgXCIvZW1vdGVvbmx5b2ZmXCIsIChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgICAgICAgIC8vIFJlY2VpdmVkIF9wcm9taXNlRW1vdGVvbmx5b2ZmIGV2ZW50LCByZXNvbHZlIG9yIHJlamVjdC4uXG4gICAgICAgICAgICB0aGlzLm9uY2UoXCJfcHJvbWlzZUVtb3Rlb25seW9mZlwiLCAoZXJyKSA9PiB7XG4gICAgICAgICAgICAgICAgaWYgKCFlcnIpIHsgcmVzb2x2ZShbY2hhbm5lbF0pOyB9XG4gICAgICAgICAgICAgICAgZWxzZSB7IHJlamVjdChlcnIpOyB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gICAgfSxcblxuICAgIC8vIEVuYWJsZSBmb2xsb3dlcnMtb25seSBtb2RlIG9uIGEgY2hhbm5lbC4uXG4gICAgZm9sbG93ZXJzb25seTogZm9sbG93ZXJzb25seSxcblxuICAgIC8vIEFsaWFzIGZvciBmb2xsb3dlcnNvbmx5KCkuLlxuICAgIGZvbGxvd2Vyc21vZGU6IGZvbGxvd2Vyc29ubHksXG5cbiAgICAvLyBEaXNhYmxlIGZvbGxvd2Vycy1vbmx5IG1vZGUgb24gYSBjaGFubmVsLi5cbiAgICBmb2xsb3dlcnNvbmx5b2ZmOiBmb2xsb3dlcnNvbmx5b2ZmLFxuXG4gICAgLy8gQWxpYXMgZm9yIGZvbGxvd2Vyc29ubHlvZmYoKS4uXG4gICAgZm9sbG93ZXJzbW9kZW9mZjogZm9sbG93ZXJzb25seW9mZixcblxuICAgIC8vIEhvc3QgYSBjaGFubmVsLi5cbiAgICBob3N0OiBmdW5jdGlvbiBob3N0KGNoYW5uZWwsIHRhcmdldCkge1xuICAgICAgICBjaGFubmVsID0gXy5jaGFubmVsKGNoYW5uZWwpO1xuICAgICAgICB0YXJnZXQgPSBfLnVzZXJuYW1lKHRhcmdldCk7XG5cbiAgICAgICAgLy8gU2VuZCB0aGUgY29tbWFuZCB0byB0aGUgc2VydmVyIGFuZCByYWNlIHRoZSBQcm9taXNlIGFnYWluc3QgYSBkZWxheS4uXG4gICAgICAgIHJldHVybiB0aGlzLl9zZW5kQ29tbWFuZCgyMDAwLCBjaGFubmVsLCBgL2hvc3QgJHt0YXJnZXR9YCwgKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgICAgICAgLy8gUmVjZWl2ZWQgX3Byb21pc2VIb3N0IGV2ZW50LCByZXNvbHZlIG9yIHJlamVjdC4uXG4gICAgICAgICAgICB0aGlzLm9uY2UoXCJfcHJvbWlzZUhvc3RcIiwgKGVyciwgcmVtYWluaW5nKSA9PiB7XG4gICAgICAgICAgICAgICAgaWYgKCFlcnIpIHsgcmVzb2x2ZShbY2hhbm5lbCwgdGFyZ2V0LCB+fnJlbWFpbmluZ10pOyB9XG4gICAgICAgICAgICAgICAgZWxzZSB7IHJlamVjdChlcnIpOyB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gICAgfSxcblxuICAgIC8vIEpvaW4gYSBjaGFubmVsLi5cbiAgICBqb2luOiBmdW5jdGlvbiBqb2luKGNoYW5uZWwpIHtcbiAgICAgICAgY2hhbm5lbCA9IF8uY2hhbm5lbChjaGFubmVsKTtcblxuICAgICAgICAvLyBTZW5kIHRoZSBjb21tYW5kIHRvIHRoZSBzZXJ2ZXIgLi5cbiAgICAgICAgcmV0dXJuIHRoaXMuX3NlbmRDb21tYW5kKG51bGwsIG51bGwsIGBKT0lOICR7Y2hhbm5lbH1gLCAocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICAgICAgICB2YXIgZXZlbnROYW1lID0gXCJfcHJvbWlzZUpvaW5cIjtcbiAgICAgICAgICAgIHZhciBoYXNGdWxmaWxsZWQgPSBmYWxzZTtcbiAgICAgICAgICAgIHZhciBsaXN0ZW5lciA9IChlcnIsIGpvaW5lZENoYW5uZWwpID0+IHtcbiAgICAgICAgICAgICAgICBpZiAoY2hhbm5lbCA9PT0gXy5jaGFubmVsKGpvaW5lZENoYW5uZWwpKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIFJlY2VpdmVkIF9wcm9taXNlSm9pbiBldmVudCBmb3IgdGhlIHRhcmdldCBjaGFubmVsLCByZXNvbHZlIG9yIHJlamVjdC4uXG4gICAgICAgICAgICAgICAgICAgIHRoaXMucmVtb3ZlTGlzdGVuZXIoZXZlbnROYW1lLCBsaXN0ZW5lcik7XG4gICAgICAgICAgICAgICAgICAgIGhhc0Z1bGZpbGxlZCA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgIGlmICghZXJyKSB7IHJlc29sdmUoW2NoYW5uZWxdKTsgfVxuICAgICAgICAgICAgICAgICAgICBlbHNlIHsgcmVqZWN0KGVycik7IH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgdGhpcy5vbihldmVudE5hbWUsIGxpc3RlbmVyKTtcbiAgICAgICAgICAgIC8vIFJhY2UgdGhlIFByb21pc2UgYWdhaW5zdCBhIGRlbGF5Li5cbiAgICAgICAgICAgIHZhciBkZWxheSA9IHRoaXMuX2dldFByb21pc2VEZWxheSgpO1xuICAgICAgICAgICAgXy5wcm9taXNlRGVsYXkoZGVsYXkpLnRoZW4oKCkgPT4ge1xuICAgICAgICAgICAgICAgIGlmICghaGFzRnVsZmlsbGVkKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZW1pdChldmVudE5hbWUsIFwiTm8gcmVzcG9uc2UgZnJvbSBUd2l0Y2guXCIsIGNoYW5uZWwpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICB9LFxuXG4gICAgLy8gTW9kIHVzZXJuYW1lIG9uIGNoYW5uZWwuLlxuICAgIG1vZDogZnVuY3Rpb24gbW9kKGNoYW5uZWwsIHVzZXJuYW1lKSB7XG4gICAgICAgIGNoYW5uZWwgPSBfLmNoYW5uZWwoY2hhbm5lbCk7XG4gICAgICAgIHVzZXJuYW1lID0gXy51c2VybmFtZSh1c2VybmFtZSk7XG5cbiAgICAgICAgLy8gU2VuZCB0aGUgY29tbWFuZCB0byB0aGUgc2VydmVyIGFuZCByYWNlIHRoZSBQcm9taXNlIGFnYWluc3QgYSBkZWxheS4uXG4gICAgICAgIHJldHVybiB0aGlzLl9zZW5kQ29tbWFuZCh0aGlzLl9nZXRQcm9taXNlRGVsYXkoKSwgY2hhbm5lbCwgYC9tb2QgJHt1c2VybmFtZX1gLCAocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICAgICAgICAvLyBSZWNlaXZlZCBfcHJvbWlzZU1vZCBldmVudCwgcmVzb2x2ZSBvciByZWplY3QuLlxuICAgICAgICAgICAgdGhpcy5vbmNlKFwiX3Byb21pc2VNb2RcIiwgKGVycikgPT4ge1xuICAgICAgICAgICAgICAgIGlmICghZXJyKSB7IHJlc29sdmUoW2NoYW5uZWwsIHVzZXJuYW1lXSk7IH1cbiAgICAgICAgICAgICAgICBlbHNlIHsgcmVqZWN0KGVycik7IH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICB9LFxuXG4gICAgLy8gR2V0IGxpc3Qgb2YgbW9kcyBvbiBhIGNoYW5uZWwuLlxuICAgIG1vZHM6IGZ1bmN0aW9uIG1vZHMoY2hhbm5lbCkge1xuICAgICAgICBjaGFubmVsID0gXy5jaGFubmVsKGNoYW5uZWwpO1xuXG4gICAgICAgIC8vIFNlbmQgdGhlIGNvbW1hbmQgdG8gdGhlIHNlcnZlciBhbmQgcmFjZSB0aGUgUHJvbWlzZSBhZ2FpbnN0IGEgZGVsYXkuLlxuICAgICAgICByZXR1cm4gdGhpcy5fc2VuZENvbW1hbmQodGhpcy5fZ2V0UHJvbWlzZURlbGF5KCksIGNoYW5uZWwsIFwiL21vZHNcIiwgKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgICAgICAgLy8gUmVjZWl2ZWQgX3Byb21pc2VNb2RzIGV2ZW50LCByZXNvbHZlIG9yIHJlamVjdC4uXG4gICAgICAgICAgICB0aGlzLm9uY2UoXCJfcHJvbWlzZU1vZHNcIiwgKGVyciwgbW9kcykgPT4ge1xuICAgICAgICAgICAgICAgIGlmICghZXJyKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIFVwZGF0ZSB0aGUgaW50ZXJuYWwgbGlzdCBvZiBtb2RlcmF0b3JzLi5cbiAgICAgICAgICAgICAgICAgICAgbW9kcy5mb3JFYWNoKCh1c2VybmFtZSkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCF0aGlzLm1vZGVyYXRvcnNbY2hhbm5lbF0pIHsgdGhpcy5tb2RlcmF0b3JzW2NoYW5uZWxdID0gW107IH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghdGhpcy5tb2RlcmF0b3JzW2NoYW5uZWxdLmluY2x1ZGVzKHVzZXJuYW1lKSkgeyB0aGlzLm1vZGVyYXRvcnNbY2hhbm5lbF0ucHVzaCh1c2VybmFtZSk7IH1cbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIHJlc29sdmUobW9kcyk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHsgcmVqZWN0KGVycik7IH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICB9LFxuXG4gICAgLy8gTGVhdmUgYSBjaGFubmVsLi5cbiAgICBwYXJ0OiBwYXJ0LFxuXG4gICAgLy8gQWxpYXMgZm9yIHBhcnQoKS4uXG4gICAgbGVhdmU6IHBhcnQsXG5cbiAgICAvLyBTZW5kIGEgcGluZyB0byB0aGUgc2VydmVyLi5cbiAgICBwaW5nOiBmdW5jdGlvbiBwaW5nKCkge1xuICAgICAgICAvLyBTZW5kIHRoZSBjb21tYW5kIHRvIHRoZSBzZXJ2ZXIgYW5kIHJhY2UgdGhlIFByb21pc2UgYWdhaW5zdCBhIGRlbGF5Li5cbiAgICAgICAgcmV0dXJuIHRoaXMuX3NlbmRDb21tYW5kKHRoaXMuX2dldFByb21pc2VEZWxheSgpLCBudWxsLCBcIlBJTkdcIiwgKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgICAgICAgLy8gVXBkYXRlIHRoZSBpbnRlcm5hbCBwaW5nIHRpbWVvdXQgY2hlY2sgaW50ZXJ2YWwuLlxuICAgICAgICAgICAgdGhpcy5sYXRlbmN5ID0gbmV3IERhdGUoKTtcbiAgICAgICAgICAgIHRoaXMucGluZ1RpbWVvdXQgPSBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgICAgICAgICBpZiAodGhpcy53cyAhPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLndhc0Nsb3NlQ2FsbGVkID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMubG9nLmVycm9yKFwiUGluZyB0aW1lb3V0LlwiKTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy53cy5jbG9zZSgpO1xuXG4gICAgICAgICAgICAgICAgICAgIGNsZWFySW50ZXJ2YWwodGhpcy5waW5nTG9vcCk7XG4gICAgICAgICAgICAgICAgICAgIGNsZWFyVGltZW91dCh0aGlzLnBpbmdUaW1lb3V0KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LCBfLmdldCh0aGlzLm9wdHMuY29ubmVjdGlvbi50aW1lb3V0LCA5OTk5KSk7XG5cbiAgICAgICAgICAgIC8vIFJlY2VpdmVkIF9wcm9taXNlUGluZyBldmVudCwgcmVzb2x2ZSBvciByZWplY3QuLlxuICAgICAgICAgICAgdGhpcy5vbmNlKFwiX3Byb21pc2VQaW5nXCIsIChsYXRlbmN5KSA9PiB7IHJlc29sdmUoW3BhcnNlRmxvYXQobGF0ZW5jeSldKTsgfSk7XG4gICAgICAgIH0pO1xuICAgIH0sXG5cbiAgICAvLyBFbmFibGUgUjlLQmV0YSBtb2RlIG9uIGEgY2hhbm5lbC4uXG4gICAgcjlrYmV0YTogcjlrYmV0YSxcblxuICAgIC8vIEFsaWFzIGZvciByOWtiZXRhKCkuLlxuICAgIHI5a21vZGU6IHI5a2JldGEsXG5cbiAgICAvLyBEaXNhYmxlIFI5S0JldGEgbW9kZSBvbiBhIGNoYW5uZWwuLlxuICAgIHI5a2JldGFvZmY6IHI5a2JldGFvZmYsXG5cbiAgICAvLyBBbGlhcyBmb3IgcjlrYmV0YW9mZigpLi5cbiAgICByOWttb2Rlb2ZmOiByOWtiZXRhb2ZmLFxuXG4gICAgLy8gU2VuZCBhIHJhdyBtZXNzYWdlIHRvIHRoZSBzZXJ2ZXIuLlxuICAgIHJhdzogZnVuY3Rpb24gcmF3KG1lc3NhZ2UpIHtcbiAgICAgICAgLy8gU2VuZCB0aGUgY29tbWFuZCB0byB0aGUgc2VydmVyIGFuZCByYWNlIHRoZSBQcm9taXNlIGFnYWluc3QgYSBkZWxheS4uXG4gICAgICAgIHJldHVybiB0aGlzLl9zZW5kQ29tbWFuZCh0aGlzLl9nZXRQcm9taXNlRGVsYXkoKSwgbnVsbCwgbWVzc2FnZSwgKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgICAgICAgcmVzb2x2ZShbbWVzc2FnZV0pO1xuICAgICAgICB9KTtcbiAgICB9LFxuXG4gICAgLy8gU2VuZCBhIG1lc3NhZ2Ugb24gYSBjaGFubmVsLi5cbiAgICBzYXk6IGZ1bmN0aW9uIHNheShjaGFubmVsLCBtZXNzYWdlKSB7XG4gICAgICAgIGNoYW5uZWwgPSBfLmNoYW5uZWwoY2hhbm5lbCk7XG5cbiAgICAgICAgaWYgKChtZXNzYWdlLnN0YXJ0c1dpdGgoXCIuXCIpICYmICFtZXNzYWdlLnN0YXJ0c1dpdGgoXCIuLlwiKSkgfHwgbWVzc2FnZS5zdGFydHNXaXRoKFwiL1wiKSB8fCBtZXNzYWdlLnN0YXJ0c1dpdGgoXCJcXFxcXCIpKSB7XG4gICAgICAgICAgICAvLyBDaGVjayBpZiB0aGUgbWVzc2FnZSBpcyBhbiBhY3Rpb24gbWVzc2FnZS4uXG4gICAgICAgICAgICBpZiAobWVzc2FnZS5zdWJzdHIoMSwgMykgPT09IFwibWUgXCIpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5hY3Rpb24oY2hhbm5lbCwgbWVzc2FnZS5zdWJzdHIoNCkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgLy8gU2VuZCB0aGUgY29tbWFuZCB0byB0aGUgc2VydmVyIGFuZCByYWNlIHRoZSBQcm9taXNlIGFnYWluc3QgYSBkZWxheS4uXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3NlbmRDb21tYW5kKHRoaXMuX2dldFByb21pc2VEZWxheSgpLCBjaGFubmVsLCBtZXNzYWdlLCAocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIC8vIEF0IHRoaXMgdGltZSwgdGhlcmUgaXMgbm8gcG9zc2libGUgd2F5IHRvIGRldGVjdCBpZiBhIG1lc3NhZ2UgaGFzIGJlZW4gc2VudCBoYXMgYmVlbiBlYXRlblxuICAgICAgICAgICAgICAgICAgICAvLyBieSB0aGUgc2VydmVyLCBzbyB3ZSBjYW4gb25seSByZXNvbHZlIHRoZSBQcm9taXNlLlxuICAgICAgICAgICAgICAgICAgICByZXNvbHZlKFtjaGFubmVsLCBtZXNzYWdlXSk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICAvLyBTZW5kIHRoZSBjb21tYW5kIHRvIHRoZSBzZXJ2ZXIgYW5kIHJhY2UgdGhlIFByb21pc2UgYWdhaW5zdCBhIGRlbGF5Li5cbiAgICAgICAgcmV0dXJuIHRoaXMuX3NlbmRNZXNzYWdlKHRoaXMuX2dldFByb21pc2VEZWxheSgpLCBjaGFubmVsLCBtZXNzYWdlLCAocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICAgICAgICAvLyBBdCB0aGlzIHRpbWUsIHRoZXJlIGlzIG5vIHBvc3NpYmxlIHdheSB0byBkZXRlY3QgaWYgYSBtZXNzYWdlIGhhcyBiZWVuIHNlbnQgaGFzIGJlZW4gZWF0ZW5cbiAgICAgICAgICAgIC8vIGJ5IHRoZSBzZXJ2ZXIsIHNvIHdlIGNhbiBvbmx5IHJlc29sdmUgdGhlIFByb21pc2UuXG4gICAgICAgICAgICByZXNvbHZlKFtjaGFubmVsLCBtZXNzYWdlXSk7XG4gICAgICAgIH0pO1xuICAgIH0sXG5cbiAgICAvLyBFbmFibGUgc2xvdyBtb2RlIG9uIGEgY2hhbm5lbC4uXG4gICAgc2xvdzogc2xvdyxcblxuICAgIC8vIEFsaWFzIGZvciBzbG93KCkuLlxuICAgIHNsb3dtb2RlOiBzbG93LFxuXG4gICAgLy8gRGlzYWJsZSBzbG93IG1vZGUgb24gYSBjaGFubmVsLi5cbiAgICBzbG93b2ZmOiBzbG93b2ZmLFxuXG4gICAgLy8gQWxpYXMgZm9yIHNsb3dvZmYoKS4uXG4gICAgc2xvd21vZGVvZmY6IHNsb3dvZmYsXG5cbiAgICAvLyBFbmFibGUgc3Vic2NyaWJlcnMgbW9kZSBvbiBhIGNoYW5uZWwuLlxuICAgIHN1YnNjcmliZXJzOiBmdW5jdGlvbiBzdWJzY3JpYmVycyhjaGFubmVsKSB7XG4gICAgICAgIGNoYW5uZWwgPSBfLmNoYW5uZWwoY2hhbm5lbCk7XG5cbiAgICAgICAgLy8gU2VuZCB0aGUgY29tbWFuZCB0byB0aGUgc2VydmVyIGFuZCByYWNlIHRoZSBQcm9taXNlIGFnYWluc3QgYSBkZWxheS4uXG4gICAgICAgIHJldHVybiB0aGlzLl9zZW5kQ29tbWFuZCh0aGlzLl9nZXRQcm9taXNlRGVsYXkoKSwgY2hhbm5lbCwgXCIvc3Vic2NyaWJlcnNcIiwgKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgICAgICAgLy8gUmVjZWl2ZWQgX3Byb21pc2VTdWJzY3JpYmVycyBldmVudCwgcmVzb2x2ZSBvciByZWplY3QuLlxuICAgICAgICAgICAgdGhpcy5vbmNlKFwiX3Byb21pc2VTdWJzY3JpYmVyc1wiLCAoZXJyKSA9PiB7XG4gICAgICAgICAgICAgICAgaWYgKCFlcnIpIHsgcmVzb2x2ZShbY2hhbm5lbF0pOyB9XG4gICAgICAgICAgICAgICAgZWxzZSB7IHJlamVjdChlcnIpOyB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gICAgfSxcblxuICAgIC8vIERpc2FibGUgc3Vic2NyaWJlcnMgbW9kZSBvbiBhIGNoYW5uZWwuLlxuICAgIHN1YnNjcmliZXJzb2ZmOiBmdW5jdGlvbiBzdWJzY3JpYmVyc29mZihjaGFubmVsKSB7XG4gICAgICAgIGNoYW5uZWwgPSBfLmNoYW5uZWwoY2hhbm5lbCk7XG5cbiAgICAgICAgLy8gU2VuZCB0aGUgY29tbWFuZCB0byB0aGUgc2VydmVyIGFuZCByYWNlIHRoZSBQcm9taXNlIGFnYWluc3QgYSBkZWxheS4uXG4gICAgICAgIHJldHVybiB0aGlzLl9zZW5kQ29tbWFuZCh0aGlzLl9nZXRQcm9taXNlRGVsYXkoKSwgY2hhbm5lbCwgXCIvc3Vic2NyaWJlcnNvZmZcIiwgKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgICAgICAgLy8gUmVjZWl2ZWQgX3Byb21pc2VTdWJzY3JpYmVyc29mZiBldmVudCwgcmVzb2x2ZSBvciByZWplY3QuLlxuICAgICAgICAgICAgdGhpcy5vbmNlKFwiX3Byb21pc2VTdWJzY3JpYmVyc29mZlwiLCAoZXJyKSA9PiB7XG4gICAgICAgICAgICAgICAgaWYgKCFlcnIpIHsgcmVzb2x2ZShbY2hhbm5lbF0pOyB9XG4gICAgICAgICAgICAgICAgZWxzZSB7IHJlamVjdChlcnIpOyB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gICAgfSxcblxuICAgIC8vIFRpbWVvdXQgdXNlcm5hbWUgb24gY2hhbm5lbCBmb3IgWCBzZWNvbmRzLi5cbiAgICB0aW1lb3V0OiBmdW5jdGlvbiB0aW1lb3V0KGNoYW5uZWwsIHVzZXJuYW1lLCBzZWNvbmRzLCByZWFzb24pIHtcbiAgICAgICAgY2hhbm5lbCA9IF8uY2hhbm5lbChjaGFubmVsKTtcbiAgICAgICAgdXNlcm5hbWUgPSBfLnVzZXJuYW1lKHVzZXJuYW1lKTtcblxuICAgICAgICBpZiAoIV8uaXNOdWxsKHNlY29uZHMpICYmICFfLmlzSW50ZWdlcihzZWNvbmRzKSkge1xuICAgICAgICAgICAgcmVhc29uID0gc2Vjb25kcztcbiAgICAgICAgICAgIHNlY29uZHMgPSAzMDA7XG4gICAgICAgIH1cblxuICAgICAgICBzZWNvbmRzID0gXy5nZXQoc2Vjb25kcywgMzAwKTtcbiAgICAgICAgcmVhc29uID0gXy5nZXQocmVhc29uLCBcIlwiKTtcblxuICAgICAgICAvLyBTZW5kIHRoZSBjb21tYW5kIHRvIHRoZSBzZXJ2ZXIgYW5kIHJhY2UgdGhlIFByb21pc2UgYWdhaW5zdCBhIGRlbGF5Li5cbiAgICAgICAgcmV0dXJuIHRoaXMuX3NlbmRDb21tYW5kKHRoaXMuX2dldFByb21pc2VEZWxheSgpLCBjaGFubmVsLCBgL3RpbWVvdXQgJHt1c2VybmFtZX0gJHtzZWNvbmRzfSAke3JlYXNvbn1gLCAocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICAgICAgICAvLyBSZWNlaXZlZCBfcHJvbWlzZVRpbWVvdXQgZXZlbnQsIHJlc29sdmUgb3IgcmVqZWN0Li5cbiAgICAgICAgICAgIHRoaXMub25jZShcIl9wcm9taXNlVGltZW91dFwiLCAoZXJyKSA9PiB7XG4gICAgICAgICAgICAgICAgaWYgKCFlcnIpIHsgcmVzb2x2ZShbY2hhbm5lbCwgdXNlcm5hbWUsIH5+c2Vjb25kcywgcmVhc29uXSk7IH1cbiAgICAgICAgICAgICAgICBlbHNlIHsgcmVqZWN0KGVycik7IH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICB9LFxuXG4gICAgLy8gVW5iYW4gdXNlcm5hbWUgb24gY2hhbm5lbC4uXG4gICAgdW5iYW46IGZ1bmN0aW9uIHVuYmFuKGNoYW5uZWwsIHVzZXJuYW1lKSB7XG4gICAgICAgIGNoYW5uZWwgPSBfLmNoYW5uZWwoY2hhbm5lbCk7XG4gICAgICAgIHVzZXJuYW1lID0gXy51c2VybmFtZSh1c2VybmFtZSk7XG5cbiAgICAgICAgLy8gU2VuZCB0aGUgY29tbWFuZCB0byB0aGUgc2VydmVyIGFuZCByYWNlIHRoZSBQcm9taXNlIGFnYWluc3QgYSBkZWxheS4uXG4gICAgICAgIHJldHVybiB0aGlzLl9zZW5kQ29tbWFuZCh0aGlzLl9nZXRQcm9taXNlRGVsYXkoKSwgY2hhbm5lbCwgYC91bmJhbiAke3VzZXJuYW1lfWAsIChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgICAgICAgIC8vIFJlY2VpdmVkIF9wcm9taXNlVW5iYW4gZXZlbnQsIHJlc29sdmUgb3IgcmVqZWN0Li5cbiAgICAgICAgICAgIHRoaXMub25jZShcIl9wcm9taXNlVW5iYW5cIiwgKGVycikgPT4ge1xuICAgICAgICAgICAgICAgIGlmICghZXJyKSB7IHJlc29sdmUoW2NoYW5uZWwsIHVzZXJuYW1lXSk7IH1cbiAgICAgICAgICAgICAgICBlbHNlIHsgcmVqZWN0KGVycik7IH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICB9LFxuXG4gICAgLy8gRW5kIHRoZSBjdXJyZW50IGhvc3RpbmcuLlxuICAgIHVuaG9zdDogZnVuY3Rpb24gdW5ob3N0KGNoYW5uZWwpIHtcbiAgICAgICAgY2hhbm5lbCA9IF8uY2hhbm5lbChjaGFubmVsKTtcblxuICAgICAgICAvLyBTZW5kIHRoZSBjb21tYW5kIHRvIHRoZSBzZXJ2ZXIgYW5kIHJhY2UgdGhlIFByb21pc2UgYWdhaW5zdCBhIGRlbGF5Li5cbiAgICAgICAgcmV0dXJuIHRoaXMuX3NlbmRDb21tYW5kKDIwMDAsIGNoYW5uZWwsIFwiL3VuaG9zdFwiLCAocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICAgICAgICAvLyBSZWNlaXZlZCBfcHJvbWlzZVVuaG9zdCBldmVudCwgcmVzb2x2ZSBvciByZWplY3QuLlxuICAgICAgICAgICAgdGhpcy5vbmNlKFwiX3Byb21pc2VVbmhvc3RcIiwgKGVycikgPT4ge1xuICAgICAgICAgICAgICAgIGlmICghZXJyKSB7IHJlc29sdmUoW2NoYW5uZWxdKTsgfVxuICAgICAgICAgICAgICAgIGVsc2UgeyByZWplY3QoZXJyKTsgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgIH0sXG5cbiAgICAvLyBVbm1vZCB1c2VybmFtZSBvbiBjaGFubmVsLi5cbiAgICB1bm1vZDogZnVuY3Rpb24gdW5tb2QoY2hhbm5lbCwgdXNlcm5hbWUpIHtcbiAgICAgICAgY2hhbm5lbCA9IF8uY2hhbm5lbChjaGFubmVsKTtcbiAgICAgICAgdXNlcm5hbWUgPSBfLnVzZXJuYW1lKHVzZXJuYW1lKTtcblxuICAgICAgICAvLyBTZW5kIHRoZSBjb21tYW5kIHRvIHRoZSBzZXJ2ZXIgYW5kIHJhY2UgdGhlIFByb21pc2UgYWdhaW5zdCBhIGRlbGF5Li5cbiAgICAgICAgcmV0dXJuIHRoaXMuX3NlbmRDb21tYW5kKHRoaXMuX2dldFByb21pc2VEZWxheSgpLCBjaGFubmVsLCBgL3VubW9kICR7dXNlcm5hbWV9YCwgKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgICAgICAgLy8gUmVjZWl2ZWQgX3Byb21pc2VVbm1vZCBldmVudCwgcmVzb2x2ZSBvciByZWplY3QuLlxuICAgICAgICAgICAgdGhpcy5vbmNlKFwiX3Byb21pc2VVbm1vZFwiLCAoZXJyKSA9PiB7XG4gICAgICAgICAgICAgICAgaWYgKCFlcnIpIHsgcmVzb2x2ZShbY2hhbm5lbCwgdXNlcm5hbWVdKTsgfVxuICAgICAgICAgICAgICAgIGVsc2UgeyByZWplY3QoZXJyKTsgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgIH0sXG5cbiAgICAvLyBVbnZpcCB1c2VybmFtZSBvbiBjaGFubmVsLi5cbiAgICB1bnZpcDogZnVuY3Rpb24gdW52aXAoY2hhbm5lbCwgdXNlcm5hbWUpIHtcbiAgICAgICAgY2hhbm5lbCA9IF8uY2hhbm5lbChjaGFubmVsKTtcbiAgICAgICAgdXNlcm5hbWUgPSBfLnVzZXJuYW1lKHVzZXJuYW1lKTtcblxuICAgICAgICAvLyBTZW5kIHRoZSBjb21tYW5kIHRvIHRoZSBzZXJ2ZXIgYW5kIHJhY2UgdGhlIFByb21pc2UgYWdhaW5zdCBhIGRlbGF5Li5cbiAgICAgICAgcmV0dXJuIHRoaXMuX3NlbmRDb21tYW5kKHRoaXMuX2dldFByb21pc2VEZWxheSgpLCBjaGFubmVsLCBgL3VudmlwICR7dXNlcm5hbWV9YCwgKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgICAgICAgLy8gUmVjZWl2ZWQgX3Byb21pc2VVbnZpcCBldmVudCwgcmVzb2x2ZSBvciByZWplY3QuLlxuICAgICAgICAgICAgdGhpcy5vbmNlKFwiX3Byb21pc2VVbnZpcFwiLCAoZXJyKSA9PiB7XG4gICAgICAgICAgICAgICAgaWYgKCFlcnIpIHsgcmVzb2x2ZShbY2hhbm5lbCwgdXNlcm5hbWVdKTsgfVxuICAgICAgICAgICAgICAgIGVsc2UgeyByZWplY3QoZXJyKTsgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgIH0sXG5cbiAgICAvLyBBZGQgdXNlcm5hbWUgdG8gVklQIGxpc3Qgb24gY2hhbm5lbC4uXG4gICAgdmlwOiBmdW5jdGlvbiB2aXAoY2hhbm5lbCwgdXNlcm5hbWUpIHtcbiAgICAgICAgY2hhbm5lbCA9IF8uY2hhbm5lbChjaGFubmVsKTtcbiAgICAgICAgdXNlcm5hbWUgPSBfLnVzZXJuYW1lKHVzZXJuYW1lKTtcblxuICAgICAgICAvLyBTZW5kIHRoZSBjb21tYW5kIHRvIHRoZSBzZXJ2ZXIgYW5kIHJhY2UgdGhlIFByb21pc2UgYWdhaW5zdCBhIGRlbGF5Li5cbiAgICAgICAgcmV0dXJuIHRoaXMuX3NlbmRDb21tYW5kKHRoaXMuX2dldFByb21pc2VEZWxheSgpLCBjaGFubmVsLCBgL3ZpcCAke3VzZXJuYW1lfWAsIChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgICAgICAgIC8vIFJlY2VpdmVkIF9wcm9taXNlVmlwIGV2ZW50LCByZXNvbHZlIG9yIHJlamVjdC4uXG4gICAgICAgICAgICB0aGlzLm9uY2UoXCJfcHJvbWlzZVZpcFwiLCAoZXJyKSA9PiB7XG4gICAgICAgICAgICAgICAgaWYgKCFlcnIpIHsgcmVzb2x2ZShbY2hhbm5lbCwgdXNlcm5hbWVdKTsgfVxuICAgICAgICAgICAgICAgIGVsc2UgeyByZWplY3QoZXJyKTsgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgIH0sXG5cbiAgICAvLyBHZXQgbGlzdCBvZiBWSVBzIG9uIGEgY2hhbm5lbC4uXG4gICAgdmlwczogZnVuY3Rpb24gdmlwcyhjaGFubmVsKSB7XG4gICAgICAgIGNoYW5uZWwgPSBfLmNoYW5uZWwoY2hhbm5lbCk7XG5cbiAgICAgICAgLy8gU2VuZCB0aGUgY29tbWFuZCB0byB0aGUgc2VydmVyIGFuZCByYWNlIHRoZSBQcm9taXNlIGFnYWluc3QgYSBkZWxheS4uXG4gICAgICAgIHJldHVybiB0aGlzLl9zZW5kQ29tbWFuZCh0aGlzLl9nZXRQcm9taXNlRGVsYXkoKSwgY2hhbm5lbCwgXCIvdmlwc1wiLCAocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICAgICAgICAvLyBSZWNlaXZlZCBfcHJvbWlzZVZpcHMgZXZlbnQsIHJlc29sdmUgb3IgcmVqZWN0Li5cbiAgICAgICAgICAgIHRoaXMub25jZShcIl9wcm9taXNlVmlwc1wiLCAoZXJyLCB2aXBzKSA9PiB7XG4gICAgICAgICAgICAgICAgaWYgKCFlcnIpIHsgcmVzb2x2ZSh2aXBzKTsgfVxuICAgICAgICAgICAgICAgIGVsc2UgeyByZWplY3QoZXJyKTsgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgIH0sXG5cbiAgICAvLyBTZW5kIGFuIHdoaXNwZXIgbWVzc2FnZSB0byBhIHVzZXIuLlxuICAgIHdoaXNwZXI6IGZ1bmN0aW9uIHdoaXNwZXIodXNlcm5hbWUsIG1lc3NhZ2UpIHtcbiAgICAgICAgdXNlcm5hbWUgPSBfLnVzZXJuYW1lKHVzZXJuYW1lKTtcblxuICAgICAgICAvLyBUaGUgc2VydmVyIHdpbGwgbm90IHNlbmQgYSB3aGlzcGVyIHRvIHRoZSBhY2NvdW50IHRoYXQgc2VudCBpdC5cbiAgICAgICAgaWYgKHVzZXJuYW1lID09PSB0aGlzLmdldFVzZXJuYW1lKCkpIHtcbiAgICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlamVjdChcIkNhbm5vdCBzZW5kIGEgd2hpc3BlciB0byB0aGUgc2FtZSBhY2NvdW50LlwiKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIFNlbmQgdGhlIGNvbW1hbmQgdG8gdGhlIHNlcnZlciBhbmQgcmFjZSB0aGUgUHJvbWlzZSBhZ2FpbnN0IGEgZGVsYXkuLlxuICAgICAgICByZXR1cm4gdGhpcy5fc2VuZENvbW1hbmQodGhpcy5fZ2V0UHJvbWlzZURlbGF5KCksIFwiI3RtaWpzXCIsIGAvdyAke3VzZXJuYW1lfSAke21lc3NhZ2V9YCwgKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgICAgICAgdmFyIGZyb20gPSBfLmNoYW5uZWwodXNlcm5hbWUpLFxuICAgICAgICAgICAgICAgIHVzZXJzdGF0ZSA9IF8ubWVyZ2Uoe1xuICAgICAgICAgICAgICAgICAgICAgICAgXCJtZXNzYWdlLXR5cGVcIjogXCJ3aGlzcGVyXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICBcIm1lc3NhZ2UtaWRcIjogbnVsbCxcbiAgICAgICAgICAgICAgICAgICAgICAgIFwidGhyZWFkLWlkXCI6IG51bGwsXG4gICAgICAgICAgICAgICAgICAgICAgICB1c2VybmFtZTogdGhpcy5nZXRVc2VybmFtZSgpXG4gICAgICAgICAgICAgICAgICAgIH0sIHRoaXMuZ2xvYmFsdXNlcnN0YXRlKTtcblxuICAgICAgICAgICAgLy8gRW1pdCBmb3IgYm90aCwgd2hpc3BlciBhbmQgbWVzc2FnZS4uXG4gICAgICAgICAgICB0aGlzLmVtaXRzKFtcIndoaXNwZXJcIiwgXCJtZXNzYWdlXCJdLCBbXG4gICAgICAgICAgICAgICAgW2Zyb20sIHVzZXJzdGF0ZSwgbWVzc2FnZSwgdHJ1ZV0sXG4gICAgICAgICAgICAgICAgW2Zyb20sIHVzZXJzdGF0ZSwgbWVzc2FnZSwgdHJ1ZV1cbiAgICAgICAgICAgIF0pO1xuXG4gICAgICAgICAgICAvLyBBdCB0aGlzIHRpbWUsIHRoZXJlIGlzIG5vIHBvc3NpYmxlIHdheSB0byBkZXRlY3QgaWYgYSBtZXNzYWdlIGhhcyBiZWVuIHNlbnQgaGFzIGJlZW4gZWF0ZW5cbiAgICAgICAgICAgIC8vIGJ5IHRoZSBzZXJ2ZXIsIHNvIHdlIGNhbiBvbmx5IHJlc29sdmUgdGhlIFByb21pc2UuXG4gICAgICAgICAgICByZXNvbHZlKFt1c2VybmFtZSwgbWVzc2FnZV0pO1xuICAgICAgICB9KTtcbiAgICB9XG59XG4iLCIvKlxuICogQ29weXJpZ2h0IEpveWVudCwgSW5jLiBhbmQgb3RoZXIgTm9kZSBjb250cmlidXRvcnMuXG4gKlxuICogUGVybWlzc2lvbiBpcyBoZXJlYnkgZ3JhbnRlZCwgZnJlZSBvZiBjaGFyZ2UsIHRvIGFueSBwZXJzb24gb2J0YWluaW5nIGFcbiAqIGNvcHkgb2YgdGhpcyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBkb2N1bWVudGF0aW9uIGZpbGVzICh0aGVcbiAqIFwiU29mdHdhcmVcIiksIHRvIGRlYWwgaW4gdGhlIFNvZnR3YXJlIHdpdGhvdXQgcmVzdHJpY3Rpb24sIGluY2x1ZGluZ1xuICogd2l0aG91dCBsaW1pdGF0aW9uIHRoZSByaWdodHMgdG8gdXNlLCBjb3B5LCBtb2RpZnksIG1lcmdlLCBwdWJsaXNoLFxuICogZGlzdHJpYnV0ZSwgc3VibGljZW5zZSwgYW5kL29yIHNlbGwgY29waWVzIG9mIHRoZSBTb2Z0d2FyZSwgYW5kIHRvIHBlcm1pdFxuICogcGVyc29ucyB0byB3aG9tIHRoZSBTb2Z0d2FyZSBpcyBmdXJuaXNoZWQgdG8gZG8gc28sIHN1YmplY3QgdG8gdGhlXG4gKiBmb2xsb3dpbmcgY29uZGl0aW9uczpcbiAqXG4gKiBUaGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSBhbmQgdGhpcyBwZXJtaXNzaW9uIG5vdGljZSBzaGFsbCBiZSBpbmNsdWRlZFxuICogaW4gYWxsIGNvcGllcyBvciBzdWJzdGFudGlhbCBwb3J0aW9ucyBvZiB0aGUgU29mdHdhcmUuXG4gKlxuICogVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTU1xuICogT1IgSU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRlxuICogTUVSQ0hBTlRBQklMSVRZLCBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULiBJTlxuICogTk8gRVZFTlQgU0hBTEwgVEhFIEFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sXG4gKiBEQU1BR0VTIE9SIE9USEVSIExJQUJJTElUWSwgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIFRPUlQgT1JcbiAqIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLCBPVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBTT0ZUV0FSRSBPUiBUSEVcbiAqIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTiBUSEUgU09GVFdBUkUuXG4qL1xuXG5pZiAoIVN0cmluZy5wcm90b3R5cGUuc3RhcnRzV2l0aCkge1xuICAgIFN0cmluZy5wcm90b3R5cGUuc3RhcnRzV2l0aCA9IGZ1bmN0aW9uKHNlYXJjaFN0cmluZywgcG9zaXRpb24pIHtcbiAgICAgICAgcG9zaXRpb24gPSBwb3NpdGlvbiB8fCAwO1xuICAgICAgICByZXR1cm4gdGhpcy5pbmRleE9mKHNlYXJjaFN0cmluZywgcG9zaXRpb24pID09PSBwb3NpdGlvbjtcbiAgICB9O1xufVxuXG5mdW5jdGlvbiBFdmVudEVtaXR0ZXIoKSB7XG4gICAgdGhpcy5fZXZlbnRzID0gdGhpcy5fZXZlbnRzIHx8IHt9O1xuICAgIHRoaXMuX21heExpc3RlbmVycyA9IHRoaXMuX21heExpc3RlbmVycyB8fCB1bmRlZmluZWQ7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gRXZlbnRFbWl0dGVyO1xuXG4vLyBCYWNrd2FyZHMtY29tcGF0IHdpdGggbm9kZSAwLjEwLnhcbkV2ZW50RW1pdHRlci5FdmVudEVtaXR0ZXIgPSBFdmVudEVtaXR0ZXI7XG5cbkV2ZW50RW1pdHRlci5wcm90b3R5cGUuX2V2ZW50cyA9IHVuZGVmaW5lZDtcbkV2ZW50RW1pdHRlci5wcm90b3R5cGUuX21heExpc3RlbmVycyA9IHVuZGVmaW5lZDtcblxuLy8gQnkgZGVmYXVsdCBFdmVudEVtaXR0ZXJzIHdpbGwgcHJpbnQgYSB3YXJuaW5nIGlmIG1vcmUgdGhhbiAxMCBsaXN0ZW5lcnMgYXJlXG4vLyBhZGRlZCB0byBpdC4gVGhpcyBpcyBhIHVzZWZ1bCBkZWZhdWx0IHdoaWNoIGhlbHBzIGZpbmRpbmcgbWVtb3J5IGxlYWtzLlxuRXZlbnRFbWl0dGVyLmRlZmF1bHRNYXhMaXN0ZW5lcnMgPSAxMDtcblxuLy8gT2J2aW91c2x5IG5vdCBhbGwgRW1pdHRlcnMgc2hvdWxkIGJlIGxpbWl0ZWQgdG8gMTAuIFRoaXMgZnVuY3Rpb24gYWxsb3dzXG4vLyB0aGF0IHRvIGJlIGluY3JlYXNlZC4gU2V0IHRvIHplcm8gZm9yIHVubGltaXRlZC5cbkV2ZW50RW1pdHRlci5wcm90b3R5cGUuc2V0TWF4TGlzdGVuZXJzID0gZnVuY3Rpb24obikge1xuICAgIGlmICghaXNOdW1iZXIobikgfHwgbiA8IDAgfHwgaXNOYU4obikpIHtcbiAgICAgICAgdGhyb3cgVHlwZUVycm9yKFwibiBtdXN0IGJlIGEgcG9zaXRpdmUgbnVtYmVyXCIpO1xuICAgIH1cblxuICAgIHRoaXMuX21heExpc3RlbmVycyA9IG47XG5cbiAgICByZXR1cm4gdGhpcztcbn07XG5cbi8vIEVtaXQgbXVsdGlwbGUgZXZlbnRzLi5cbkV2ZW50RW1pdHRlci5wcm90b3R5cGUuZW1pdHMgPSBmdW5jdGlvbih0eXBlcywgdmFsdWVzKSB7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0eXBlcy5sZW5ndGg7IGkrKykge1xuICAgICAgICB2YXIgdmFsID0gaSA8IHZhbHVlcy5sZW5ndGggPyB2YWx1ZXNbaV0gOiB2YWx1ZXNbdmFsdWVzLmxlbmd0aCAtIDFdO1xuICAgICAgICB0aGlzLmVtaXQuYXBwbHkodGhpcywgW3R5cGVzW2ldXS5jb25jYXQodmFsKSk7XG4gICAgfVxufVxuXG5FdmVudEVtaXR0ZXIucHJvdG90eXBlLmVtaXQgPSBmdW5jdGlvbih0eXBlKSB7XG4gICAgdmFyIGVyLCBoYW5kbGVyLCBsZW4sIGFyZ3MsIGksIGxpc3RlbmVycztcblxuICAgIGlmICghdGhpcy5fZXZlbnRzKSB7IHRoaXMuX2V2ZW50cyA9IHt9OyB9XG5cbiAgICAvLyBJZiB0aGVyZSBpcyBubyAnZXJyb3InIGV2ZW50IGxpc3RlbmVyIHRoZW4gdGhyb3cuXG4gICAgaWYgKHR5cGUgPT09IFwiZXJyb3JcIikge1xuICAgICAgICBpZiAoIXRoaXMuX2V2ZW50cy5lcnJvciB8fCAoaXNPYmplY3QodGhpcy5fZXZlbnRzLmVycm9yKSAmJiAhdGhpcy5fZXZlbnRzLmVycm9yLmxlbmd0aCkpIHtcbiAgICAgICAgICAgIGVyID0gYXJndW1lbnRzWzFdO1xuICAgICAgICAgICAgaWYgKGVyIGluc3RhbmNlb2YgRXJyb3IpIHsgdGhyb3cgZXI7IH1cbiAgICAgICAgICAgIHRocm93IFR5cGVFcnJvcihcIlVuY2F1Z2h0LCB1bnNwZWNpZmllZCBcXFwiZXJyb3JcXFwiIGV2ZW50LlwiKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGhhbmRsZXIgPSB0aGlzLl9ldmVudHNbdHlwZV07XG5cbiAgICBpZiAoaXNVbmRlZmluZWQoaGFuZGxlcikpIHsgcmV0dXJuIGZhbHNlOyB9XG5cbiAgICBpZiAoaXNGdW5jdGlvbihoYW5kbGVyKSkge1xuICAgICAgICBzd2l0Y2ggKGFyZ3VtZW50cy5sZW5ndGgpIHtcbiAgICAgICAgICAgIC8vIGZhc3QgY2FzZXNcbiAgICAgICAgICAgIGNhc2UgMTpcbiAgICAgICAgICAgICAgICBoYW5kbGVyLmNhbGwodGhpcyk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIDI6XG4gICAgICAgICAgICAgICAgaGFuZGxlci5jYWxsKHRoaXMsIGFyZ3VtZW50c1sxXSk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIDM6XG4gICAgICAgICAgICAgICAgaGFuZGxlci5jYWxsKHRoaXMsIGFyZ3VtZW50c1sxXSwgYXJndW1lbnRzWzJdKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAvLyBzbG93ZXJcbiAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgYXJncyA9IEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3VtZW50cywgMSk7XG4gICAgICAgICAgICAgICAgaGFuZGxlci5hcHBseSh0aGlzLCBhcmdzKTtcbiAgICAgICAgfVxuICAgIH0gZWxzZSBpZiAoaXNPYmplY3QoaGFuZGxlcikpIHtcbiAgICAgICAgYXJncyA9IEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3VtZW50cywgMSk7XG4gICAgICAgIGxpc3RlbmVycyA9IGhhbmRsZXIuc2xpY2UoKTtcbiAgICAgICAgbGVuID0gbGlzdGVuZXJzLmxlbmd0aDtcbiAgICAgICAgZm9yIChpID0gMDsgaSA8IGxlbjsgaSsrKSB7IGxpc3RlbmVyc1tpXS5hcHBseSh0aGlzLCBhcmdzKTsgfVxuICAgIH1cblxuICAgIHJldHVybiB0cnVlO1xufTtcblxuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5hZGRMaXN0ZW5lciA9IGZ1bmN0aW9uKHR5cGUsIGxpc3RlbmVyKSB7XG4gICAgdmFyIG07XG5cbiAgICBpZiAoIWlzRnVuY3Rpb24obGlzdGVuZXIpKSB7IHRocm93IFR5cGVFcnJvcihcImxpc3RlbmVyIG11c3QgYmUgYSBmdW5jdGlvblwiKTsgfVxuXG4gICAgaWYgKCF0aGlzLl9ldmVudHMpIHsgdGhpcy5fZXZlbnRzID0ge307IH1cblxuICAgIC8vIFRvIGF2b2lkIHJlY3Vyc2lvbiBpbiB0aGUgY2FzZSB0aGF0IHR5cGUgPT09IFwibmV3TGlzdGVuZXJcIiEgQmVmb3JlXG4gICAgLy8gYWRkaW5nIGl0IHRvIHRoZSBsaXN0ZW5lcnMsIGZpcnN0IGVtaXQgXCJuZXdMaXN0ZW5lclwiLlxuICAgIGlmICh0aGlzLl9ldmVudHMubmV3TGlzdGVuZXIpIHtcbiAgICAgICAgdGhpcy5lbWl0KFwibmV3TGlzdGVuZXJcIiwgdHlwZSwgaXNGdW5jdGlvbihsaXN0ZW5lci5saXN0ZW5lcikgPyBsaXN0ZW5lci5saXN0ZW5lciA6IGxpc3RlbmVyKTtcbiAgICB9XG5cbiAgICAvLyBPcHRpbWl6ZSB0aGUgY2FzZSBvZiBvbmUgbGlzdGVuZXIuIERvbid0IG5lZWQgdGhlIGV4dHJhIGFycmF5IG9iamVjdC5cbiAgICBpZiAoIXRoaXMuX2V2ZW50c1t0eXBlXSkgeyB0aGlzLl9ldmVudHNbdHlwZV0gPSBsaXN0ZW5lcjsgfVxuICAgIC8vIElmIHdlJ3ZlIGFscmVhZHkgZ290IGFuIGFycmF5LCBqdXN0IGFwcGVuZC5cbiAgICBlbHNlIGlmIChpc09iamVjdCh0aGlzLl9ldmVudHNbdHlwZV0pKSB7IHRoaXMuX2V2ZW50c1t0eXBlXS5wdXNoKGxpc3RlbmVyKTsgfVxuICAgIC8vIEFkZGluZyB0aGUgc2Vjb25kIGVsZW1lbnQsIG5lZWQgdG8gY2hhbmdlIHRvIGFycmF5LlxuICAgIGVsc2UgeyB0aGlzLl9ldmVudHNbdHlwZV0gPSBbdGhpcy5fZXZlbnRzW3R5cGVdLCBsaXN0ZW5lcl07IH1cblxuICAgIC8vIENoZWNrIGZvciBsaXN0ZW5lciBsZWFrXG4gICAgaWYgKGlzT2JqZWN0KHRoaXMuX2V2ZW50c1t0eXBlXSkgJiYgIXRoaXMuX2V2ZW50c1t0eXBlXS53YXJuZWQpIHtcbiAgICAgICAgaWYgKCFpc1VuZGVmaW5lZCh0aGlzLl9tYXhMaXN0ZW5lcnMpKSB7XG4gICAgICAgICAgICBtID0gdGhpcy5fbWF4TGlzdGVuZXJzO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgbSA9IEV2ZW50RW1pdHRlci5kZWZhdWx0TWF4TGlzdGVuZXJzO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKG0gJiYgbSA+IDAgJiYgdGhpcy5fZXZlbnRzW3R5cGVdLmxlbmd0aCA+IG0pIHtcbiAgICAgICAgICAgIHRoaXMuX2V2ZW50c1t0eXBlXS53YXJuZWQgPSB0cnVlO1xuICAgICAgICAgICAgY29uc29sZS5lcnJvcihcIihub2RlKSB3YXJuaW5nOiBwb3NzaWJsZSBFdmVudEVtaXR0ZXIgbWVtb3J5IGxlYWsgZGV0ZWN0ZWQuICVkIGxpc3RlbmVycyBhZGRlZC4gVXNlIGVtaXR0ZXIuc2V0TWF4TGlzdGVuZXJzKCkgdG8gaW5jcmVhc2UgbGltaXQuXCIsIHRoaXMuX2V2ZW50c1t0eXBlXS5sZW5ndGgpO1xuICAgICAgICAgICAgLy8gTm90IHN1cHBvcnRlZCBpbiBJRSAxMFxuICAgICAgICAgICAgaWYgKHR5cGVvZiBjb25zb2xlLnRyYWNlID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgICAgICAgICAgICBjb25zb2xlLnRyYWNlKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcztcbn07XG5cbkV2ZW50RW1pdHRlci5wcm90b3R5cGUub24gPSBFdmVudEVtaXR0ZXIucHJvdG90eXBlLmFkZExpc3RlbmVyO1xuXG4vLyBNb2RpZmllZCB0byBzdXBwb3J0IG11bHRpcGxlIGNhbGxzLi5cbkV2ZW50RW1pdHRlci5wcm90b3R5cGUub25jZSA9IGZ1bmN0aW9uKHR5cGUsIGxpc3RlbmVyKSB7XG4gICAgaWYgKCFpc0Z1bmN0aW9uKGxpc3RlbmVyKSkgeyB0aHJvdyBUeXBlRXJyb3IoXCJsaXN0ZW5lciBtdXN0IGJlIGEgZnVuY3Rpb25cIik7IH1cblxuICAgIHZhciBmaXJlZCA9IGZhbHNlO1xuXG4gICAgaWYgKHRoaXMuX2V2ZW50cy5oYXNPd25Qcm9wZXJ0eSh0eXBlKSAmJiB0eXBlLmNoYXJBdCgwKSA9PT0gXCJfXCIpIHtcbiAgICAgICAgdmFyIGNvdW50ID0gMTtcbiAgICAgICAgdmFyIHNlYXJjaEZvciA9IHR5cGU7XG5cbiAgICAgICAgZm9yICh2YXIgayBpbiB0aGlzLl9ldmVudHMpe1xuICAgICAgICAgICAgaWYgKHRoaXMuX2V2ZW50cy5oYXNPd25Qcm9wZXJ0eShrKSAmJiBrLnN0YXJ0c1dpdGgoc2VhcmNoRm9yKSkge1xuICAgICAgICAgICAgICAgIGNvdW50Kys7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgdHlwZSA9IHR5cGUgKyBjb3VudDtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBnKCkge1xuICAgICAgICBpZiAodHlwZS5jaGFyQXQoMCkgPT09IFwiX1wiICYmICFpc05hTih0eXBlLnN1YnN0cih0eXBlLmxlbmd0aCAtIDEpKSkge1xuICAgICAgICAgICAgdHlwZSA9IHR5cGUuc3Vic3RyaW5nKDAsIHR5cGUubGVuZ3RoIC0gMSk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5yZW1vdmVMaXN0ZW5lcih0eXBlLCBnKTtcblxuICAgICAgICBpZiAoIWZpcmVkKSB7XG4gICAgICAgICAgICBmaXJlZCA9IHRydWU7XG4gICAgICAgICAgICBsaXN0ZW5lci5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZy5saXN0ZW5lciA9IGxpc3RlbmVyO1xuICAgIHRoaXMub24odHlwZSwgZyk7XG5cbiAgICByZXR1cm4gdGhpcztcbn07XG5cbi8vIEVtaXRzIGEgXCJyZW1vdmVMaXN0ZW5lclwiIGV2ZW50IGlmIHRoZSBsaXN0ZW5lciB3YXMgcmVtb3ZlZC4uXG4vLyBNb2RpZmllZCB0byBzdXBwb3J0IG11bHRpcGxlIGNhbGxzIGZyb20gLm9uY2UoKS4uXG5FdmVudEVtaXR0ZXIucHJvdG90eXBlLnJlbW92ZUxpc3RlbmVyID0gZnVuY3Rpb24odHlwZSwgbGlzdGVuZXIpIHtcbiAgICB2YXIgbGlzdCwgcG9zaXRpb24sIGxlbmd0aCwgaTtcblxuICAgIGlmICghaXNGdW5jdGlvbihsaXN0ZW5lcikpIHsgdGhyb3cgVHlwZUVycm9yKFwibGlzdGVuZXIgbXVzdCBiZSBhIGZ1bmN0aW9uXCIpOyB9XG5cbiAgICBpZiAoIXRoaXMuX2V2ZW50cyB8fCAhdGhpcy5fZXZlbnRzW3R5cGVdKSB7IHJldHVybiB0aGlzOyB9XG5cbiAgICBsaXN0ID0gdGhpcy5fZXZlbnRzW3R5cGVdO1xuICAgIGxlbmd0aCA9IGxpc3QubGVuZ3RoO1xuICAgIHBvc2l0aW9uID0gLTE7XG4gICAgaWYgKGxpc3QgPT09IGxpc3RlbmVyIHx8IChpc0Z1bmN0aW9uKGxpc3QubGlzdGVuZXIpICYmIGxpc3QubGlzdGVuZXIgPT09IGxpc3RlbmVyKSkge1xuICAgICAgICBkZWxldGUgdGhpcy5fZXZlbnRzW3R5cGVdO1xuXG4gICAgICAgIGlmICh0aGlzLl9ldmVudHMuaGFzT3duUHJvcGVydHkodHlwZSArIFwiMlwiKSAmJiB0eXBlLmNoYXJBdCgwKSA9PT0gXCJfXCIpIHtcbiAgICAgICAgICAgIHZhciBzZWFyY2hGb3IgPSB0eXBlO1xuICAgICAgICAgICAgZm9yICh2YXIgayBpbiB0aGlzLl9ldmVudHMpe1xuICAgICAgICAgICAgICAgIGlmICh0aGlzLl9ldmVudHMuaGFzT3duUHJvcGVydHkoaykgJiYgay5zdGFydHNXaXRoKHNlYXJjaEZvcikpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFpc05hTihwYXJzZUludChrLnN1YnN0cihrLmxlbmd0aCAtIDEpKSkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX2V2ZW50c1t0eXBlICsgcGFyc2VJbnQoay5zdWJzdHIoay5sZW5ndGggLSAxKSAtIDEpXSA9IHRoaXMuX2V2ZW50c1trXTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGRlbGV0ZSB0aGlzLl9ldmVudHNba107XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHRoaXMuX2V2ZW50c1t0eXBlXSA9IHRoaXMuX2V2ZW50c1t0eXBlICsgXCIxXCJdO1xuICAgICAgICAgICAgZGVsZXRlIHRoaXMuX2V2ZW50c1t0eXBlICsgXCIxXCJdO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLl9ldmVudHMucmVtb3ZlTGlzdGVuZXIpIHsgdGhpcy5lbWl0KFwicmVtb3ZlTGlzdGVuZXJcIiwgdHlwZSwgbGlzdGVuZXIpOyB9XG4gICAgfVxuICAgIGVsc2UgaWYgKGlzT2JqZWN0KGxpc3QpKSB7XG4gICAgICAgIGZvciAoaSA9IGxlbmd0aDsgaS0tID4gMDspIHtcbiAgICAgICAgICAgIGlmIChsaXN0W2ldID09PSBsaXN0ZW5lciB8fFxuICAgICAgICAgICAgICAgIChsaXN0W2ldLmxpc3RlbmVyICYmIGxpc3RbaV0ubGlzdGVuZXIgPT09IGxpc3RlbmVyKSkge1xuICAgICAgICAgICAgICAgIHBvc2l0aW9uID0gaTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChwb3NpdGlvbiA8IDApIHsgcmV0dXJuIHRoaXM7IH1cblxuICAgICAgICBpZiAobGlzdC5sZW5ndGggPT09IDEpIHtcbiAgICAgICAgICAgIGxpc3QubGVuZ3RoID0gMDtcbiAgICAgICAgICAgIGRlbGV0ZSB0aGlzLl9ldmVudHNbdHlwZV07XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7IGxpc3Quc3BsaWNlKHBvc2l0aW9uLCAxKTsgfVxuXG4gICAgICAgIGlmICh0aGlzLl9ldmVudHMucmVtb3ZlTGlzdGVuZXIpIHsgdGhpcy5lbWl0KFwicmVtb3ZlTGlzdGVuZXJcIiwgdHlwZSwgbGlzdGVuZXIpOyB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXM7XG59O1xuXG5FdmVudEVtaXR0ZXIucHJvdG90eXBlLnJlbW92ZUFsbExpc3RlbmVycyA9IGZ1bmN0aW9uKHR5cGUpIHtcbiAgICB2YXIga2V5LCBsaXN0ZW5lcnM7XG5cbiAgICBpZiAoIXRoaXMuX2V2ZW50cykgeyByZXR1cm4gdGhpczsgfVxuXG4gICAgLy8gbm90IGxpc3RlbmluZyBmb3IgcmVtb3ZlTGlzdGVuZXIsIG5vIG5lZWQgdG8gZW1pdFxuICAgIGlmICghdGhpcy5fZXZlbnRzLnJlbW92ZUxpc3RlbmVyKSB7XG4gICAgICAgIGlmIChhcmd1bWVudHMubGVuZ3RoID09PSAwKSB7IHRoaXMuX2V2ZW50cyA9IHt9OyB9XG4gICAgICAgIGVsc2UgaWYgKHRoaXMuX2V2ZW50c1t0eXBlXSkgeyBkZWxldGUgdGhpcy5fZXZlbnRzW3R5cGVdOyB9XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIC8vIGVtaXQgcmVtb3ZlTGlzdGVuZXIgZm9yIGFsbCBsaXN0ZW5lcnMgb24gYWxsIGV2ZW50c1xuICAgIGlmIChhcmd1bWVudHMubGVuZ3RoID09PSAwKSB7XG4gICAgICAgIGZvciAoa2V5IGluIHRoaXMuX2V2ZW50cykge1xuICAgICAgICAgICAgaWYgKGtleSA9PT0gXCJyZW1vdmVMaXN0ZW5lclwiKSB7IGNvbnRpbnVlOyB9XG4gICAgICAgICAgICB0aGlzLnJlbW92ZUFsbExpc3RlbmVycyhrZXkpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMucmVtb3ZlQWxsTGlzdGVuZXJzKFwicmVtb3ZlTGlzdGVuZXJcIik7XG4gICAgICAgIHRoaXMuX2V2ZW50cyA9IHt9O1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICBsaXN0ZW5lcnMgPSB0aGlzLl9ldmVudHNbdHlwZV07XG5cbiAgICBpZiAoaXNGdW5jdGlvbihsaXN0ZW5lcnMpKSB7IHRoaXMucmVtb3ZlTGlzdGVuZXIodHlwZSwgbGlzdGVuZXJzKTsgfVxuICAgIGVsc2UgaWYgKGxpc3RlbmVycykgeyB3aGlsZSAobGlzdGVuZXJzLmxlbmd0aCkgeyB0aGlzLnJlbW92ZUxpc3RlbmVyKHR5cGUsIGxpc3RlbmVyc1tsaXN0ZW5lcnMubGVuZ3RoIC0gMV0pOyB9IH1cbiAgICBkZWxldGUgdGhpcy5fZXZlbnRzW3R5cGVdO1xuXG4gICAgcmV0dXJuIHRoaXM7XG59O1xuXG5FdmVudEVtaXR0ZXIucHJvdG90eXBlLmxpc3RlbmVycyA9IGZ1bmN0aW9uKHR5cGUpIHtcbiAgICB2YXIgcmV0O1xuICAgIGlmICghdGhpcy5fZXZlbnRzIHx8ICF0aGlzLl9ldmVudHNbdHlwZV0pIHsgcmV0ID0gW107IH1cbiAgICBlbHNlIGlmIChpc0Z1bmN0aW9uKHRoaXMuX2V2ZW50c1t0eXBlXSkpIHsgcmV0ID0gW3RoaXMuX2V2ZW50c1t0eXBlXV07IH1cbiAgICBlbHNlIHsgcmV0ID0gdGhpcy5fZXZlbnRzW3R5cGVdLnNsaWNlKCk7IH1cbiAgICByZXR1cm4gcmV0O1xufTtcblxuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5saXN0ZW5lckNvdW50ID0gZnVuY3Rpb24odHlwZSkge1xuICAgIGlmICh0aGlzLl9ldmVudHMpIHtcbiAgICAgICAgdmFyIGV2bGlzdGVuZXIgPSB0aGlzLl9ldmVudHNbdHlwZV07XG5cbiAgICAgICAgaWYgKGlzRnVuY3Rpb24oZXZsaXN0ZW5lcikpIHsgcmV0dXJuIDE7IH1cbiAgICAgICAgZWxzZSBpZiAoZXZsaXN0ZW5lcikgeyByZXR1cm4gZXZsaXN0ZW5lci5sZW5ndGg7IH1cbiAgICB9XG4gICAgcmV0dXJuIDA7XG59O1xuXG5FdmVudEVtaXR0ZXIubGlzdGVuZXJDb3VudCA9IGZ1bmN0aW9uKGVtaXR0ZXIsIHR5cGUpIHtcbiAgICByZXR1cm4gZW1pdHRlci5saXN0ZW5lckNvdW50KHR5cGUpO1xufTtcblxuZnVuY3Rpb24gaXNGdW5jdGlvbihhcmcpIHtcbiAgICByZXR1cm4gdHlwZW9mIGFyZyA9PT0gXCJmdW5jdGlvblwiO1xufVxuXG5mdW5jdGlvbiBpc051bWJlcihhcmcpIHtcbiAgICByZXR1cm4gdHlwZW9mIGFyZyA9PT0gXCJudW1iZXJcIjtcbn1cblxuZnVuY3Rpb24gaXNPYmplY3QoYXJnKSB7XG4gICAgcmV0dXJuIHR5cGVvZiBhcmcgPT09IFwib2JqZWN0XCIgJiYgYXJnICE9PSBudWxsO1xufVxuXG5mdW5jdGlvbiBpc1VuZGVmaW5lZChhcmcpIHtcbiAgICByZXR1cm4gYXJnID09PSB2b2lkIDA7XG59XG4iLCJ2YXIgXyA9IHJlcXVpcmUoXCIuL3V0aWxzXCIpO1xuXG52YXIgY3VycmVudExldmVsID0gXCJpbmZvXCI7XG52YXIgbGV2ZWxzID0geyBcInRyYWNlXCI6IDAsIFwiZGVidWdcIjogMSwgXCJpbmZvXCI6IDIsIFwid2FyblwiOiAzLCBcImVycm9yXCI6IDQsIFwiZmF0YWxcIjogNSB9XG5cbi8vIExvZ2dlciBpbXBsZW1lbnRhdGlvbi4uXG5mdW5jdGlvbiBsb2cobGV2ZWwpIHtcbiAgICAvLyBSZXR1cm4gYSBjb25zb2xlIG1lc3NhZ2UgZGVwZW5kaW5nIG9uIHRoZSBsb2dnaW5nIGxldmVsLi5cbiAgICByZXR1cm4gZnVuY3Rpb24gKG1lc3NhZ2UpIHtcbiAgICAgICAgaWYgKGxldmVsc1tsZXZlbF0gPj0gbGV2ZWxzW2N1cnJlbnRMZXZlbF0pIHtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKGBbJHtfLmZvcm1hdERhdGUobmV3IERhdGUoKSl9XSAke2xldmVsfTogJHttZXNzYWdlfWApO1xuICAgICAgICB9XG4gICAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgICAvLyBDaGFuZ2UgdGhlIGN1cnJlbnQgbG9nZ2luZyBsZXZlbC4uXG4gICAgc2V0TGV2ZWw6IGZ1bmN0aW9uKGxldmVsKSB7XG4gICAgICAgIGN1cnJlbnRMZXZlbCA9IGxldmVsO1xuICAgIH0sXG4gICAgdHJhY2U6IGxvZyhcInRyYWNlXCIpLFxuICAgIGRlYnVnOiBsb2coXCJkZWJ1Z1wiKSxcbiAgICBpbmZvOiBsb2coXCJpbmZvXCIpLFxuICAgIHdhcm46IGxvZyhcIndhcm5cIiksXG4gICAgZXJyb3I6IGxvZyhcImVycm9yXCIpLFxuICAgIGZhdGFsOiBsb2coXCJmYXRhbFwiKVxufTtcbiIsIi8qXG4gICAgQ29weXJpZ2h0IChjKSAyMDEzLTIwMTUsIEZpb25uIEtlbGxlaGVyIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG5cbiAgICBSZWRpc3RyaWJ1dGlvbiBhbmQgdXNlIGluIHNvdXJjZSBhbmQgYmluYXJ5IGZvcm1zLCB3aXRoIG9yIHdpdGhvdXQgbW9kaWZpY2F0aW9uLFxuICAgIGFyZSBwZXJtaXR0ZWQgcHJvdmlkZWQgdGhhdCB0aGUgZm9sbG93aW5nIGNvbmRpdGlvbnMgYXJlIG1ldDpcblxuICAgICAgICBSZWRpc3RyaWJ1dGlvbnMgb2Ygc291cmNlIGNvZGUgbXVzdCByZXRhaW4gdGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UsXG4gICAgICAgIHRoaXMgbGlzdCBvZiBjb25kaXRpb25zIGFuZCB0aGUgZm9sbG93aW5nIGRpc2NsYWltZXIuXG5cbiAgICAgICAgUmVkaXN0cmlidXRpb25zIGluIGJpbmFyeSBmb3JtIG11c3QgcmVwcm9kdWNlIHRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlLFxuICAgICAgICB0aGlzIGxpc3Qgb2YgY29uZGl0aW9ucyBhbmQgdGhlIGZvbGxvd2luZyBkaXNjbGFpbWVyIGluIHRoZSBkb2N1bWVudGF0aW9uIGFuZC9vciBvdGhlciBtYXRlcmlhbHNcbiAgICAgICAgcHJvdmlkZWQgd2l0aCB0aGUgZGlzdHJpYnV0aW9uLlxuXG4gICAgVEhJUyBTT0ZUV0FSRSBJUyBQUk9WSURFRCBCWSBUSEUgQ09QWVJJR0hUIEhPTERFUlMgQU5EIENPTlRSSUJVVE9SUyBcIkFTIElTXCIgQU5EXG4gICAgQU5ZIEVYUFJFU1MgT1IgSU1QTElFRCBXQVJSQU5USUVTLCBJTkNMVURJTkcsIEJVVCBOT1QgTElNSVRFRCBUTywgVEhFIElNUExJRURcbiAgICBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWSBBTkQgRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQVJFIERJU0NMQUlNRUQuXG4gICAgSU4gTk8gRVZFTlQgU0hBTEwgVEhFIENPUFlSSUdIVCBIT0xERVIgT1IgQ09OVFJJQlVUT1JTIEJFIExJQUJMRSBGT1IgQU5ZIERJUkVDVCxcbiAgICBJTkRJUkVDVCwgSU5DSURFTlRBTCwgU1BFQ0lBTCwgRVhFTVBMQVJZLCBPUiBDT05TRVFVRU5USUFMIERBTUFHRVNcbiAgICAoSU5DTFVESU5HLCBCVVQgTk9UIExJTUlURUQgVE8sIFBST0NVUkVNRU5UIE9GIFNVQlNUSVRVVEUgR09PRFMgT1IgU0VSVklDRVM7IExPU1MgT0YgVVNFLCBEQVRBLFxuICAgIE9SIFBST0ZJVFM7IE9SIEJVU0lORVNTIElOVEVSUlVQVElPTikgSE9XRVZFUiBDQVVTRUQgQU5EIE9OIEFOWSBUSEVPUlkgT0YgTElBQklMSVRZLFxuICAgIFdIRVRIRVIgSU4gQ09OVFJBQ1QsIFNUUklDVCBMSUFCSUxJVFksIE9SIFRPUlQgKElOQ0xVRElORyBORUdMSUdFTkNFIE9SIE9USEVSV0lTRSlcbiAgICBBUklTSU5HIElOIEFOWSBXQVkgT1VUIE9GIFRIRSBVU0UgT0YgVEhJUyBTT0ZUV0FSRSwgRVZFTiBJRiBBRFZJU0VEIE9GIFRIRSBQT1NTSUJJTElUWVxuICAgIE9GIFNVQ0ggREFNQUdFLlxuKi9cbnZhciBfID0gcmVxdWlyZShcIi4vdXRpbHNcIik7XG52YXIgbm9uc3BhY2VSZWdleCA9IC9cXFMrL2c7XG5cbmZ1bmN0aW9uIHBhcnNlQ29tcGxleFRhZyh0YWdzLCB0YWdLZXksIHNwbEEgPSBcIixcIiwgc3BsQiA9IFwiL1wiLCBzcGxDKSB7XG4gICAgdmFyIHJhdyA9IHRhZ3NbdGFnS2V5XTtcbiAgICBcbiAgICBpZihyYXcgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICByZXR1cm4gdGFncztcbiAgICB9XG5cbiAgICB2YXIgdGFnSXNTdHJpbmcgPSBfLmlzU3RyaW5nKHJhdyk7XG4gICAgdGFnc1t0YWdLZXkgKyBcIi1yYXdcIl0gPSB0YWdJc1N0cmluZyA/IHJhdyA6IG51bGw7XG5cbiAgICBpZihyYXcgPT09IHRydWUpIHtcbiAgICAgICAgdGFnc1t0YWdLZXldID0gbnVsbDtcbiAgICAgICAgcmV0dXJuIHRhZ3M7XG4gICAgfVxuXG4gICAgdGFnc1t0YWdLZXldID0ge307XG5cbiAgICBpZiAodGFnSXNTdHJpbmcpIHtcbiAgICAgICAgdmFyIHNwbCA9IHJhdy5zcGxpdChzcGxBKTtcblxuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHNwbC5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgdmFyIHBhcnRzID0gc3BsW2ldLnNwbGl0KHNwbEIpO1xuICAgICAgICAgICAgdmFyIHZhbCA9IHBhcnRzWzFdO1xuICAgICAgICAgICAgaWYgKHNwbEMgIT09IHVuZGVmaW5lZCAmJiB2YWwpIHtcbiAgICAgICAgICAgICAgICB2YWwgPSB2YWwuc3BsaXQoc3BsQyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0YWdzW3RhZ0tleV1bcGFydHNbMF1dID0gdmFsIHx8IG51bGw7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHRhZ3M7XG59XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICAgIC8vIFBhcnNlIFR3aXRjaCBiYWRnZXMuLlxuICAgIGJhZGdlczogZnVuY3Rpb24gYmFkZ2VzKHRhZ3MpIHtcbiAgICAgICAgcmV0dXJuIHBhcnNlQ29tcGxleFRhZyh0YWdzLCBcImJhZGdlc1wiKTtcbiAgICB9LFxuXG4gICAgLy8gUGFyc2UgVHdpdGNoIGJhZGdlLWluZm8uLlxuICAgIGJhZGdlSW5mbzogZnVuY3Rpb24gYmFkZ2VJbmZvKHRhZ3MpIHtcbiAgICAgICAgcmV0dXJuIHBhcnNlQ29tcGxleFRhZyh0YWdzLCBcImJhZGdlLWluZm9cIik7XG4gICAgfSxcblxuICAgIC8vIFBhcnNlIFR3aXRjaCBlbW90ZXMuLlxuICAgIGVtb3RlczogZnVuY3Rpb24gZW1vdGVzKHRhZ3MpIHtcbiAgICAgICAgcmV0dXJuIHBhcnNlQ29tcGxleFRhZyh0YWdzLCBcImVtb3Rlc1wiLCBcIi9cIiwgXCI6XCIsIFwiLFwiKTtcbiAgICB9LFxuXG4gICAgLy8gUGFyc2UgcmVnZXggZW1vdGVzLi5cbiAgICBlbW90ZVJlZ2V4OiBmdW5jdGlvbiBlbW90ZVJlZ2V4KG1zZywgY29kZSwgaWQsIG9iaikge1xuICAgICAgICBub25zcGFjZVJlZ2V4Lmxhc3RJbmRleCA9IDA7XG4gICAgICAgIHZhciByZWdleCA9IG5ldyBSZWdFeHAoXCIoXFxcXGJ8XnxcXHMpXCIgKyBfLnVuZXNjYXBlSHRtbChjb2RlKSArIFwiKFxcXFxifCR8XFxzKVwiKTtcbiAgICAgICAgdmFyIG1hdGNoO1xuXG4gICAgICAgIC8vIENoZWNrIGlmIGVtb3RlIGNvZGUgbWF0Y2hlcyB1c2luZyBSZWdFeHAgYW5kIHB1c2ggaXQgdG8gdGhlIG9iamVjdC4uXG4gICAgICAgIHdoaWxlICgobWF0Y2ggPSBub25zcGFjZVJlZ2V4LmV4ZWMobXNnKSkgIT09IG51bGwpIHtcbiAgICAgICAgICAgIGlmIChyZWdleC50ZXN0KG1hdGNoWzBdKSkge1xuICAgICAgICAgICAgICAgIG9ialtpZF0gPSBvYmpbaWRdIHx8IFtdO1xuICAgICAgICAgICAgICAgIG9ialtpZF0ucHVzaChbbWF0Y2guaW5kZXgsIG5vbnNwYWNlUmVnZXgubGFzdEluZGV4IC0gMV0pXG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9LFxuXG4gICAgLy8gUGFyc2Ugc3RyaW5nIGVtb3Rlcy4uXG4gICAgZW1vdGVTdHJpbmc6IGZ1bmN0aW9uIGVtb3RlU3RyaW5nKG1zZywgY29kZSwgaWQsIG9iaikge1xuICAgICAgICBub25zcGFjZVJlZ2V4Lmxhc3RJbmRleCA9IDA7XG4gICAgICAgIHZhciBtYXRjaDtcblxuICAgICAgICAvLyBDaGVjayBpZiBlbW90ZSBjb2RlIG1hdGNoZXMgYW5kIHB1c2ggaXQgdG8gdGhlIG9iamVjdC4uXG4gICAgICAgIHdoaWxlICgobWF0Y2ggPSBub25zcGFjZVJlZ2V4LmV4ZWMobXNnKSkgIT09IG51bGwpIHtcbiAgICAgICAgICAgIGlmIChtYXRjaFswXSA9PT0gXy51bmVzY2FwZUh0bWwoY29kZSkpIHtcbiAgICAgICAgICAgICAgICBvYmpbaWRdID0gb2JqW2lkXSB8fCBbXTtcbiAgICAgICAgICAgICAgICBvYmpbaWRdLnB1c2goW21hdGNoLmluZGV4LCBub25zcGFjZVJlZ2V4Lmxhc3RJbmRleCAtIDFdKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH0sXG5cbiAgICAvLyBUcmFuc2Zvcm0gdGhlIGVtb3RlcyBvYmplY3QgdG8gYSBzdHJpbmcgd2l0aCB0aGUgZm9sbG93aW5nIGZvcm1hdC4uXG4gICAgLy8gZW1vdGVfaWQ6Zmlyc3RfaW5kZXgtbGFzdF9pbmRleCxhbm90aGVyX2ZpcnN0LWFub3RoZXJfbGFzdC9hbm90aGVyX2Vtb3RlX2lkOmZpcnN0X2luZGV4LWxhc3RfaW5kZXhcbiAgICB0cmFuc2Zvcm1FbW90ZXM6IGZ1bmN0aW9uIHRyYW5zZm9ybUVtb3RlcyhlbW90ZXMpIHtcbiAgICAgICAgdmFyIHRyYW5zZm9ybWVkID0gXCJcIjtcblxuICAgICAgICBPYmplY3Qua2V5cyhlbW90ZXMpLmZvckVhY2goKGlkKSA9PiB7XG4gICAgICAgICAgICB0cmFuc2Zvcm1lZCA9IGAke3RyYW5zZm9ybWVkK2lkfTpgO1xuICAgICAgICAgICAgZW1vdGVzW2lkXS5mb3JFYWNoKChpbmRleCkgPT4ge1xuICAgICAgICAgICAgICAgIHRyYW5zZm9ybWVkID0gYCR7dHJhbnNmb3JtZWQraW5kZXguam9pbihcIi1cIil9LGA7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHRyYW5zZm9ybWVkID0gYCR7dHJhbnNmb3JtZWQuc2xpY2UoMCwtMSl9L2A7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIHJldHVybiB0cmFuc2Zvcm1lZC5zbGljZSgwLC0xKTtcbiAgICB9LFxuXG4gICAgLy8gUGFyc2UgVHdpdGNoIG1lc3NhZ2VzLi5cbiAgICBtc2c6IGZ1bmN0aW9uIG1zZyhkYXRhKSB7XG4gICAgICAgIHZhciBtZXNzYWdlID0ge1xuICAgICAgICAgICAgcmF3OiBkYXRhLFxuICAgICAgICAgICAgdGFnczoge30sXG4gICAgICAgICAgICBwcmVmaXg6IG51bGwsXG4gICAgICAgICAgICBjb21tYW5kOiBudWxsLFxuICAgICAgICAgICAgcGFyYW1zOiBbXVxuICAgICAgICB9XG5cbiAgICAgICAgLy8gUG9zaXRpb24gYW5kIG5leHRzcGFjZSBhcmUgdXNlZCBieSB0aGUgcGFyc2VyIGFzIGEgcmVmZXJlbmNlLi5cbiAgICAgICAgdmFyIHBvc2l0aW9uID0gMDtcbiAgICAgICAgdmFyIG5leHRzcGFjZSA9IDA7XG5cbiAgICAgICAgLy8gVGhlIGZpcnN0IHRoaW5nIHdlIGNoZWNrIGZvciBpcyBJUkN2My4yIG1lc3NhZ2UgdGFncy5cbiAgICAgICAgLy8gaHR0cDovL2lyY3YzLmF0aGVtZS5vcmcvc3BlY2lmaWNhdGlvbi9tZXNzYWdlLXRhZ3MtMy4yXG4gICAgICAgIGlmIChkYXRhLmNoYXJDb2RlQXQoMCkgPT09IDY0KSB7XG4gICAgICAgICAgICB2YXIgbmV4dHNwYWNlID0gZGF0YS5pbmRleE9mKFwiIFwiKTtcblxuICAgICAgICAgICAgLy8gTWFsZm9ybWVkIElSQyBtZXNzYWdlLi5cbiAgICAgICAgICAgIGlmIChuZXh0c3BhY2UgPT09IC0xKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIFRhZ3MgYXJlIHNwbGl0IGJ5IGEgc2VtaSBjb2xvbi4uXG4gICAgICAgICAgICB2YXIgcmF3VGFncyA9IGRhdGEuc2xpY2UoMSwgbmV4dHNwYWNlKS5zcGxpdChcIjtcIik7XG5cbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcmF3VGFncy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgIC8vIFRhZ3MgZGVsaW1pdGVkIGJ5IGFuIGVxdWFscyBzaWduIGFyZSBrZXk9dmFsdWUgdGFncy5cbiAgICAgICAgICAgICAgICAvLyBJZiB0aGVyZSdzIG5vIGVxdWFscywgd2UgYXNzaWduIHRoZSB0YWcgYSB2YWx1ZSBvZiB0cnVlLlxuICAgICAgICAgICAgICAgIHZhciB0YWcgPSByYXdUYWdzW2ldO1xuICAgICAgICAgICAgICAgIHZhciBwYWlyID0gdGFnLnNwbGl0KFwiPVwiKTtcbiAgICAgICAgICAgICAgICBtZXNzYWdlLnRhZ3NbcGFpclswXV0gPSB0YWcuc3Vic3RyaW5nKHRhZy5pbmRleE9mKFwiPVwiKSArIDEpIHx8IHRydWU7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHBvc2l0aW9uID0gbmV4dHNwYWNlICsgMTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIFNraXAgYW55IHRyYWlsaW5nIHdoaXRlc3BhY2UuLlxuICAgICAgICB3aGlsZSAoZGF0YS5jaGFyQ29kZUF0KHBvc2l0aW9uKSA9PT0gMzIpIHtcbiAgICAgICAgICAgIHBvc2l0aW9uKys7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBFeHRyYWN0IHRoZSBtZXNzYWdlJ3MgcHJlZml4IGlmIHByZXNlbnQuIFByZWZpeGVzIGFyZSBwcmVwZW5kZWQgd2l0aCBhIGNvbG9uLi5cbiAgICAgICAgaWYgKGRhdGEuY2hhckNvZGVBdChwb3NpdGlvbikgPT09IDU4KSB7XG4gICAgICAgICAgICBuZXh0c3BhY2UgPSBkYXRhLmluZGV4T2YoXCIgXCIsIHBvc2l0aW9uKTtcblxuICAgICAgICAgICAgLy8gSWYgdGhlcmUncyBub3RoaW5nIGFmdGVyIHRoZSBwcmVmaXgsIGRlZW0gdGhpcyBtZXNzYWdlIHRvIGJlIG1hbGZvcm1lZC5cbiAgICAgICAgICAgIGlmIChuZXh0c3BhY2UgPT09IC0xKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIG1lc3NhZ2UucHJlZml4ID0gZGF0YS5zbGljZShwb3NpdGlvbiArIDEsIG5leHRzcGFjZSk7XG4gICAgICAgICAgICBwb3NpdGlvbiA9IG5leHRzcGFjZSArIDE7XG5cbiAgICAgICAgICAgIC8vIFNraXAgYW55IHRyYWlsaW5nIHdoaXRlc3BhY2UuLlxuICAgICAgICAgICAgd2hpbGUgKGRhdGEuY2hhckNvZGVBdChwb3NpdGlvbikgPT09IDMyKSB7XG4gICAgICAgICAgICAgICAgcG9zaXRpb24rKztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIG5leHRzcGFjZSA9IGRhdGEuaW5kZXhPZihcIiBcIiwgcG9zaXRpb24pO1xuXG4gICAgICAgIC8vIElmIHRoZXJlJ3Mgbm8gbW9yZSB3aGl0ZXNwYWNlIGxlZnQsIGV4dHJhY3QgZXZlcnl0aGluZyBmcm9tIHRoZVxuICAgICAgICAvLyBjdXJyZW50IHBvc2l0aW9uIHRvIHRoZSBlbmQgb2YgdGhlIHN0cmluZyBhcyB0aGUgY29tbWFuZC4uXG4gICAgICAgIGlmIChuZXh0c3BhY2UgPT09IC0xKSB7XG4gICAgICAgICAgICBpZiAoZGF0YS5sZW5ndGggPiBwb3NpdGlvbikge1xuICAgICAgICAgICAgICAgIG1lc3NhZ2UuY29tbWFuZCA9IGRhdGEuc2xpY2UocG9zaXRpb24pO1xuICAgICAgICAgICAgICAgIHJldHVybiBtZXNzYWdlO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIEVsc2UsIHRoZSBjb21tYW5kIGlzIHRoZSBjdXJyZW50IHBvc2l0aW9uIHVwIHRvIHRoZSBuZXh0IHNwYWNlLiBBZnRlclxuICAgICAgICAvLyB0aGF0LCB3ZSBleHBlY3Qgc29tZSBwYXJhbWV0ZXJzLlxuICAgICAgICBtZXNzYWdlLmNvbW1hbmQgPSBkYXRhLnNsaWNlKHBvc2l0aW9uLCBuZXh0c3BhY2UpO1xuXG4gICAgICAgIHBvc2l0aW9uID0gbmV4dHNwYWNlICsgMTtcblxuICAgICAgICAvLyBTa2lwIGFueSB0cmFpbGluZyB3aGl0ZXNwYWNlLi5cbiAgICAgICAgd2hpbGUgKGRhdGEuY2hhckNvZGVBdChwb3NpdGlvbikgPT09IDMyKSB7XG4gICAgICAgICAgICBwb3NpdGlvbisrO1xuICAgICAgICB9XG5cbiAgICAgICAgd2hpbGUgKHBvc2l0aW9uIDwgZGF0YS5sZW5ndGgpIHtcbiAgICAgICAgICAgIG5leHRzcGFjZSA9IGRhdGEuaW5kZXhPZihcIiBcIiwgcG9zaXRpb24pO1xuXG4gICAgICAgICAgICAvLyBJZiB0aGUgY2hhcmFjdGVyIGlzIGEgY29sb24sIHdlJ3ZlIGdvdCBhIHRyYWlsaW5nIHBhcmFtZXRlci5cbiAgICAgICAgICAgIC8vIEF0IHRoaXMgcG9pbnQsIHRoZXJlIGFyZSBubyBleHRyYSBwYXJhbXMsIHNvIHdlIHB1c2ggZXZlcnl0aGluZ1xuICAgICAgICAgICAgLy8gZnJvbSBhZnRlciB0aGUgY29sb24gdG8gdGhlIGVuZCBvZiB0aGUgc3RyaW5nLCB0byB0aGUgcGFyYW1zIGFycmF5XG4gICAgICAgICAgICAvLyBhbmQgYnJlYWsgb3V0IG9mIHRoZSBsb29wLlxuICAgICAgICAgICAgaWYgKGRhdGEuY2hhckNvZGVBdChwb3NpdGlvbikgPT09IDU4KSB7XG4gICAgICAgICAgICAgICAgbWVzc2FnZS5wYXJhbXMucHVzaChkYXRhLnNsaWNlKHBvc2l0aW9uICsgMSkpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBJZiB3ZSBzdGlsbCBoYXZlIHNvbWUgd2hpdGVzcGFjZS4uLlxuICAgICAgICAgICAgaWYgKG5leHRzcGFjZSAhPT0gLTEpIHtcbiAgICAgICAgICAgICAgICAvLyBQdXNoIHdoYXRldmVyJ3MgYmV0d2VlbiB0aGUgY3VycmVudCBwb3NpdGlvbiBhbmQgdGhlIG5leHRcbiAgICAgICAgICAgICAgICAvLyBzcGFjZSB0byB0aGUgcGFyYW1zIGFycmF5LlxuICAgICAgICAgICAgICAgIG1lc3NhZ2UucGFyYW1zLnB1c2goZGF0YS5zbGljZShwb3NpdGlvbiwgbmV4dHNwYWNlKSk7XG4gICAgICAgICAgICAgICAgcG9zaXRpb24gPSBuZXh0c3BhY2UgKyAxO1xuXG4gICAgICAgICAgICAgICAgLy8gU2tpcCBhbnkgdHJhaWxpbmcgd2hpdGVzcGFjZSBhbmQgY29udGludWUgbG9vcGluZy5cbiAgICAgICAgICAgICAgICB3aGlsZSAoZGF0YS5jaGFyQ29kZUF0KHBvc2l0aW9uKSA9PT0gMzIpIHtcbiAgICAgICAgICAgICAgICAgICAgcG9zaXRpb24rKztcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gSWYgd2UgZG9uJ3QgaGF2ZSBhbnkgbW9yZSB3aGl0ZXNwYWNlIGFuZCB0aGUgcGFyYW0gaXNuJ3QgdHJhaWxpbmcsXG4gICAgICAgICAgICAvLyBwdXNoIGV2ZXJ5dGhpbmcgcmVtYWluaW5nIHRvIHRoZSBwYXJhbXMgYXJyYXkuXG4gICAgICAgICAgICBpZiAobmV4dHNwYWNlID09PSAtMSkge1xuICAgICAgICAgICAgICAgIG1lc3NhZ2UucGFyYW1zLnB1c2goZGF0YS5zbGljZShwb3NpdGlvbikpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIG1lc3NhZ2U7XG4gICAgfVxufVxuIiwiLy8gSW5pdGlhbGl6ZSB0aGUgcXVldWUgd2l0aCBhIHNwZWNpZmljIGRlbGF5Li5cbmZ1bmN0aW9uIHF1ZXVlKGRlZmF1bHREZWxheSkge1xuICAgIHRoaXMucXVldWUgPSBbXTtcbiAgICB0aGlzLmluZGV4ID0gMDtcbiAgICB0aGlzLmRlZmF1bHREZWxheSA9IGRlZmF1bHREZWxheSB8fCAzMDAwO1xufVxuXG4vLyBBZGQgYSBuZXcgZnVuY3Rpb24gdG8gdGhlIHF1ZXVlLi5cbnF1ZXVlLnByb3RvdHlwZS5hZGQgPSBmdW5jdGlvbiBhZGQoZm4sIGRlbGF5KSB7XG4gICAgdGhpcy5xdWV1ZS5wdXNoKHtcbiAgICAgICAgZm46IGZuLFxuICAgICAgICBkZWxheTogZGVsYXlcbiAgICB9KTtcbn07XG5cbi8vIFJ1biB0aGUgY3VycmVudCBxdWV1ZS4uXG5xdWV1ZS5wcm90b3R5cGUucnVuID0gZnVuY3Rpb24gcnVuKGluZGV4KSB7XG4gICAgKGluZGV4IHx8IGluZGV4ID09PSAwKSAmJiAodGhpcy5pbmRleCA9IGluZGV4KTtcbiAgICB0aGlzLm5leHQoKTtcbn07XG5cbi8vIEdvIHRvIHRoZSBuZXh0IGluIHF1ZXVlLi5cbnF1ZXVlLnByb3RvdHlwZS5uZXh0ID0gZnVuY3Rpb24gbmV4dCgpIHtcbiAgICB2YXIgaSA9IHRoaXMuaW5kZXgrKztcbiAgICB2YXIgYXQgPSB0aGlzLnF1ZXVlW2ldO1xuICAgIHZhciBuZXh0ID0gdGhpcy5xdWV1ZVt0aGlzLmluZGV4XTtcblxuICAgIGlmICghYXQpIHsgcmV0dXJuOyB9XG5cbiAgICBhdC5mbigpO1xuICAgIG5leHQgJiYgc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgIHRoaXMubmV4dCgpO1xuICAgIH0sIG5leHQuZGVsYXkgfHwgdGhpcy5kZWZhdWx0RGVsYXkpO1xufTtcblxuLy8gUmVzZXQgdGhlIHF1ZXVlLi5cbnF1ZXVlLnByb3RvdHlwZS5yZXNldCA9IGZ1bmN0aW9uIHJlc2V0KCkge1xuICAgIHRoaXMuaW5kZXggPSAwO1xufTtcblxuLy8gQ2xlYXIgdGhlIHF1ZXVlLi5cbnF1ZXVlLnByb3RvdHlwZS5jbGVhciA9IGZ1bmN0aW9uIGNsZWFyKCkge1xuICAgIHRoaXMuaW5kZXggPSAwO1xuICAgIHRoaXMucXVldWUgPSBbXTtcbn07XG5cbmV4cG9ydHMucXVldWUgPSBxdWV1ZTtcbiIsInZhciBhY3Rpb25NZXNzYWdlUmVnZXggPSAvXlxcdTAwMDFBQ1RJT04gKFteXFx1MDAwMV0rKVxcdTAwMDEkLztcbnZhciBqdXN0aW5GYW5SZWdleCA9IC9eKGp1c3RpbmZhbikoXFxkKyQpLztcbnZhciB1bmVzY2FwZUlSQ1JlZ2V4ID0gL1xcXFwoW3NuOnJcXFxcXSkvZztcbnZhciBpcmNFc2NhcGVkQ2hhcnMgPSB7IHM6ICcgJywgbjogJycsICc6JzogJzsnLCByOiAnJyB9O1xudmFyIHNlbGYgPSBtb2R1bGUuZXhwb3J0cyA9IHtcbiAgICAvLyBSZXR1cm4gdGhlIHNlY29uZCB2YWx1ZSBpZiB0aGUgZmlyc3QgdmFsdWUgaXMgdW5kZWZpbmVkLi5cbiAgICBnZXQ6IChvYmoxLCBvYmoyKSA9PiB7IHJldHVybiB0eXBlb2Ygb2JqMSA9PT0gXCJ1bmRlZmluZWRcIiA/IG9iajIgOiBvYmoxOyB9LFxuXG4gICAgLy8gVmFsdWUgaXMgYSBib29sZWFuLi5cbiAgICBpc0Jvb2xlYW46IChvYmopID0+IHsgcmV0dXJuIHR5cGVvZihvYmopID09PSBcImJvb2xlYW5cIjsgfSxcblxuICAgIC8vIFZhbHVlIGlzIGEgZmluaXRlIG51bWJlci4uXG4gICAgaXNGaW5pdGU6IChpbnQpID0+IHsgcmV0dXJuIGlzRmluaXRlKGludCkgJiYgIWlzTmFOKHBhcnNlRmxvYXQoaW50KSk7IH0sXG5cbiAgICAvLyBWYWx1ZSBpcyBhbiBpbnRlZ2VyLi5cbiAgICBpc0ludGVnZXI6IChpbnQpID0+IHsgcmV0dXJuICFpc05hTihzZWxmLnRvTnVtYmVyKGludCwgMCkpOyB9LFxuXG4gICAgLy8gVXNlcm5hbWUgaXMgYSBqdXN0aW5mYW4gdXNlcm5hbWUuLlxuICAgIGlzSnVzdGluZmFuOiAodXNlcm5hbWUpID0+IHsgcmV0dXJuIGp1c3RpbkZhblJlZ2V4LnRlc3QodXNlcm5hbWUpOyB9LFxuXG4gICAgLy8gVmFsdWUgaXMgbnVsbC4uXG4gICAgaXNOdWxsOiAob2JqKSA9PiB7IHJldHVybiBvYmogPT09IG51bGw7IH0sXG5cbiAgICAvLyBWYWx1ZSBpcyBhIHJlZ2V4Li5cbiAgICBpc1JlZ2V4OiAoc3RyKSA9PiB7IHJldHVybiAvW1xcfFxcXFxcXF5cXCRcXCpcXCtcXD9cXDpcXCNdLy50ZXN0KHN0cik7IH0sXG5cbiAgICAvLyBWYWx1ZSBpcyBhIHN0cmluZy4uXG4gICAgaXNTdHJpbmc6IChzdHIpID0+IHsgcmV0dXJuIHR5cGVvZihzdHIpID09PSBcInN0cmluZ1wiOyB9LFxuXG4gICAgLy8gVmFsdWUgaXMgYSB2YWxpZCB1cmwuLlxuICAgIGlzVVJMOiAoc3RyKSA9PiB7IHJldHVybiBSZWdFeHAoXCJeKD86KD86aHR0cHM/fGZ0cCk6Ly8pKD86XFxcXFMrKD86OlxcXFxTKik/QCk/KD86KD8hKD86MTB8MTI3KSg/OlxcXFwuXFxcXGR7MSwzfSl7M30pKD8hKD86MTY5XFxcXC4yNTR8MTkyXFxcXC4xNjgpKD86XFxcXC5cXFxcZHsxLDN9KXsyfSkoPyExNzJcXFxcLig/OjFbNi05XXwyXFxcXGR8M1swLTFdKSg/OlxcXFwuXFxcXGR7MSwzfSl7Mn0pKD86WzEtOV1cXFxcZD98MVxcXFxkXFxcXGR8MlswMV1cXFxcZHwyMlswLTNdKSg/OlxcXFwuKD86MT9cXFxcZHsxLDJ9fDJbMC00XVxcXFxkfDI1WzAtNV0pKXsyfSg/OlxcXFwuKD86WzEtOV1cXFxcZD98MVxcXFxkXFxcXGR8MlswLTRdXFxcXGR8MjVbMC00XSkpfCg/Oig/OlthLXpcXFxcdTAwYTEtXFxcXHVmZmZmMC05XS0qKSpbYS16XFxcXHUwMGExLVxcXFx1ZmZmZjAtOV0rKSg/OlxcXFwuKD86W2EtelxcXFx1MDBhMS1cXFxcdWZmZmYwLTldLSopKlthLXpcXFxcdTAwYTEtXFxcXHVmZmZmMC05XSspKig/OlxcXFwuKD86W2EtelxcXFx1MDBhMS1cXFxcdWZmZmZdezIsfSkpXFxcXC4/KSg/OjpcXFxcZHsyLDV9KT8oPzpbLz8jXVxcXFxTKik/JFwiLFwiaVwiKS50ZXN0KHN0cik7IH0sXG5cbiAgICAvLyBSZXR1cm4gYSByYW5kb20ganVzdGluZmFuIHVzZXJuYW1lLi5cbiAgICBqdXN0aW5mYW46ICgpID0+IHsgcmV0dXJuIGBqdXN0aW5mYW4ke01hdGguZmxvb3IoKE1hdGgucmFuZG9tKCkgKiA4MDAwMCkgKyAxMDAwKX1gOyB9LFxuXG4gICAgLy8gUmV0dXJuIGEgdmFsaWQgcGFzc3dvcmQuLlxuICAgIHBhc3N3b3JkOiAoc3RyKSA9PiB7IHJldHVybiBbXCJTQ0hNT09QSUlFXCIsIFwiXCIsIG51bGxdLmluY2x1ZGVzKHN0cikgPyBcIlNDSE1PT1BJSUVcIiA6IGBvYXV0aDoke3N0ci50b0xvd2VyQ2FzZSgpLnJlcGxhY2UoXCJvYXV0aDpcIiwgXCJcIil9YDsgfSxcblxuICAgIC8vIFJhY2UgYSBwcm9taXNlIGFnYWluc3QgYSBkZWxheS4uXG4gICAgcHJvbWlzZURlbGF5OiAodGltZSkgPT4geyByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUpIHsgc2V0VGltZW91dChyZXNvbHZlLCB0aW1lKTsgfSk7IH0sXG5cbiAgICAvLyBSZXBsYWNlIGFsbCBvY2N1cmVuY2VzIG9mIGEgc3RyaW5nIHVzaW5nIGFuIG9iamVjdC4uXG4gICAgcmVwbGFjZUFsbDogKHN0ciwgb2JqKSA9PiB7XG4gICAgICAgIGlmIChzdHIgPT09IG51bGwgfHwgdHlwZW9mIHN0ciA9PT0gXCJ1bmRlZmluZWRcIikgeyByZXR1cm4gbnVsbDsgfVxuICAgICAgICBmb3IgKHZhciB4IGluIG9iaikge1xuICAgICAgICAgICAgc3RyID0gc3RyLnJlcGxhY2UobmV3IFJlZ0V4cCh4LCBcImdcIiksIG9ialt4XSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHN0cjtcbiAgICB9LFxuXG4gICAgdW5lc2NhcGVIdG1sOiAoc2FmZSkgPT4ge1xuICAgICAgICByZXR1cm4gc2FmZS5yZXBsYWNlKC9cXFxcJmFtcFxcXFw7L2csIFwiJlwiKVxuICAgICAgICAgICAgLnJlcGxhY2UoL1xcXFwmbHRcXFxcOy9nLCBcIjxcIilcbiAgICAgICAgICAgIC5yZXBsYWNlKC9cXFxcJmd0XFxcXDsvZywgXCI+XCIpXG4gICAgICAgICAgICAucmVwbGFjZSgvXFxcXCZxdW90XFxcXDsvZywgXCJcXFwiXCIpXG4gICAgICAgICAgICAucmVwbGFjZSgvXFxcXCYjMDM5XFxcXDsvZywgXCInXCIpO1xuICAgIH0sXG5cbiAgICAvLyBFc2NhcGluZyB2YWx1ZXM6IGh0dHA6Ly9pcmN2My5uZXQvc3BlY3MvY29yZS9tZXNzYWdlLXRhZ3MtMy4yLmh0bWwjZXNjYXBpbmctdmFsdWVzXG4gICAgdW5lc2NhcGVJUkM6IChtc2cpID0+IHtcbiAgICAgICAgcmV0dXJuICFtc2cgfHwgIW1zZy5pbmNsdWRlcygnXFxcXCcpID8gbXNnIDogbXNnLnJlcGxhY2UodW5lc2NhcGVJUkNSZWdleCwgKG0sIHApID0+IHsgcmV0dXJuIHAgaW4gaXJjRXNjYXBlZENoYXJzID8gaXJjRXNjYXBlZENoYXJzW3BdIDogcCB9KTtcbiAgICB9LFxuXG4gICAgYWN0aW9uTWVzc2FnZTogKG1zZykgPT4ge1xuICAgICAgICByZXR1cm4gbXNnLm1hdGNoKGFjdGlvbk1lc3NhZ2VSZWdleCk7XG4gICAgfSxcblxuICAgIC8vIEFkZCB3b3JkIHRvIGEgc3RyaW5nLi5cbiAgICBhZGRXb3JkOiAobGluZSwgd29yZCkgPT4ge1xuICAgICAgICByZXR1cm4gbGluZS5sZW5ndGggPyBsaW5lICsgXCIgXCIgKyB3b3JkIDogbGluZSArIHdvcmQ7XG4gICAgfSxcblxuICAgIC8vIFJldHVybiBhIHZhbGlkIGNoYW5uZWwgbmFtZS4uXG4gICAgY2hhbm5lbDogKHN0cikgPT4ge1xuICAgICAgICB2YXIgY2hhbm5lbCA9IChzdHIgPyBzdHIgOiBcIlwiKS50b0xvd2VyQ2FzZSgpO1xuICAgICAgICByZXR1cm4gY2hhbm5lbFswXSA9PT0gXCIjXCIgPyBjaGFubmVsIDogXCIjXCIgKyBjaGFubmVsO1xuICAgIH0sXG5cbiAgICAvLyBFeHRyYWN0IGEgbnVtYmVyIGZyb20gYSBzdHJpbmcuLlxuICAgIGV4dHJhY3ROdW1iZXI6IChzdHIpID0+IHtcbiAgICAgICAgdmFyIHBhcnRzID0gc3RyLnNwbGl0KFwiIFwiKTtcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBwYXJ0cy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgaWYgKHNlbGYuaXNJbnRlZ2VyKHBhcnRzW2ldKSkgeyByZXR1cm4gfn5wYXJ0c1tpXTsgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiAwO1xuICAgIH0sXG5cbiAgICAvLyBGb3JtYXQgdGhlIGRhdGUuLlxuICAgIGZvcm1hdERhdGU6IChkYXRlKSA9PiB7XG4gICAgICAgIHZhciBob3VycyA9IGRhdGUuZ2V0SG91cnMoKTtcbiAgICAgICAgdmFyIG1pbnMgID0gZGF0ZS5nZXRNaW51dGVzKCk7XG5cbiAgICAgICAgaG91cnMgPSAoaG91cnMgPCAxMCA/IFwiMFwiIDogXCJcIikgKyBob3VycztcbiAgICAgICAgbWlucyA9IChtaW5zIDwgMTAgPyBcIjBcIiA6IFwiXCIpICsgbWlucztcblxuICAgICAgICByZXR1cm4gYCR7aG91cnN9OiR7bWluc31gO1xuICAgIH0sXG5cbiAgICAvLyBJbmhlcml0IHRoZSBwcm90b3R5cGUgbWV0aG9kcyBmcm9tIG9uZSBjb25zdHJ1Y3RvciBpbnRvIGFub3RoZXIuLlxuICAgIGluaGVyaXRzOiAoY3Rvciwgc3VwZXJDdG9yKSA9PiB7XG4gICAgICAgIGN0b3Iuc3VwZXJfID0gc3VwZXJDdG9yXG4gICAgICAgIHZhciBUZW1wQ3RvciA9IGZ1bmN0aW9uICgpIHt9O1xuICAgICAgICBUZW1wQ3Rvci5wcm90b3R5cGUgPSBzdXBlckN0b3IucHJvdG90eXBlO1xuICAgICAgICBjdG9yLnByb3RvdHlwZSA9IG5ldyBUZW1wQ3RvcigpO1xuICAgICAgICBjdG9yLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IGN0b3I7XG4gICAgfSxcblxuICAgIC8vIFJldHVybiB3aGV0aGVyIGluc2lkZSBhIE5vZGUgYXBwbGljYXRpb24gb3Igbm90Li5cbiAgICBpc05vZGU6ICgpID0+IHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHJldHVybiBcIm9iamVjdFwiID09PSB0eXBlb2YgcHJvY2VzcyAmJiBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwocHJvY2VzcykgPT09IFwiW29iamVjdCBwcm9jZXNzXVwiO1xuICAgICAgICB9IGNhdGNoKGUpIHt9XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9LFxuXG4gICAgLy8gUmV0dXJuIHdoZXRoZXIgaW5zaWRlIGEgQ2hyb21lIGV4dGVuc2lvbiBvciBub3QuLlxuICAgIGlzRXh0ZW5zaW9uOiAoKSA9PiB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICByZXR1cm4gd2luZG93LmNocm9tZSAmJiBjaHJvbWUucnVudGltZSAmJiBjaHJvbWUucnVudGltZS5pZDtcbiAgICAgICAgfSBjYXRjaChlKSB7fVxuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfSxcblxuICAgIC8vIFJldHVybiB3aGV0aGVyIGluc2lkZSBhIFJlYWN0IE5hdGl2ZSBhcHAuLlxuICAgIGlzUmVhY3ROYXRpdmU6ICgpID0+IHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHJldHVybiBuYXZpZ2F0b3IgJiYgbmF2aWdhdG9yLnByb2R1Y3QgPT0gXCJSZWFjdE5hdGl2ZVwiO1xuICAgICAgICB9IGNhdGNoKGUpIHt9XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9LFxuXG4gICAgLy8gTWVyZ2UgdHdvIG9iamVjdHMuLlxuICAgIG1lcmdlOiBPYmplY3QuYXNzaWduLFxuXG4gICAgLy8gU3BsaXQgYSBsaW5lIGJ1dCB0cnkgbm90IHRvIGN1dCBhIHdvcmQgaW4gaGFsZi4uXG4gICAgc3BsaXRMaW5lOiAoaW5wdXQsIGxlbmd0aCkgPT4ge1xuICAgICAgICB2YXIgbGFzdFNwYWNlID0gaW5wdXQuc3Vic3RyaW5nKDAsIGxlbmd0aCkubGFzdEluZGV4T2YoXCIgXCIpO1xuICAgICAgICAvLyBObyBzcGFjZXMgZm91bmQsIHNwbGl0IGF0IHRoZSB2ZXJ5IGVuZCB0byBhdm9pZCBhIGxvb3AuLlxuICAgICAgICBpZiAobGFzdFNwYWNlID09PSAtMSkge1xuICAgICAgICAgICAgbGFzdFNwYWNlID0gbGVuZ3RoIC0gMTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gW2lucHV0LnN1YnN0cmluZygwLCBsYXN0U3BhY2UpLCBpbnB1dC5zdWJzdHJpbmcobGFzdFNwYWNlICsgMSldO1xuICAgIH0sXG5cbiAgICAvLyBQYXJzZSBzdHJpbmcgdG8gbnVtYmVyLiBSZXR1cm5zIE5hTiBpZiBzdHJpbmcgY2FuJ3QgYmUgcGFyc2VkIHRvIG51bWJlci4uXG4gICAgdG9OdW1iZXI6IChudW0sIHByZWNpc2lvbikgPT4ge1xuICAgICAgICBpZiAobnVtID09PSBudWxsKSByZXR1cm4gMDtcbiAgICAgICAgdmFyIGZhY3RvciA9IE1hdGgucG93KDEwLCBzZWxmLmlzRmluaXRlKHByZWNpc2lvbikgPyBwcmVjaXNpb24gOiAwKTtcbiAgICAgICAgcmV0dXJuIE1hdGgucm91bmQobnVtICogZmFjdG9yKSAvIGZhY3RvcjtcbiAgICB9LFxuXG4gICAgLy8gTWVyZ2UgdHdvIGFycmF5cy4uXG4gICAgdW5pb246IChhcnIxLCBhcnIyKSA9PiB7XG4gICAgICAgIHZhciBoYXNoID0ge307XG4gICAgICAgIHZhciByZXQgPSBbXTtcbiAgICAgICAgZm9yKHZhciBpPTA7IGkgPCBhcnIxLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICB2YXIgZSA9IGFycjFbaV07XG4gICAgICAgICAgICBpZiAoIWhhc2hbZV0pIHtcbiAgICAgICAgICAgICAgICBoYXNoW2VdID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICByZXQucHVzaChlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBmb3IodmFyIGk9MDsgaSA8IGFycjIubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIHZhciBlID0gYXJyMltpXTtcbiAgICAgICAgICAgIGlmICghaGFzaFtlXSkge1xuICAgICAgICAgICAgICAgIGhhc2hbZV0gPSB0cnVlO1xuICAgICAgICAgICAgICAgIHJldC5wdXNoKGUpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZXQ7XG4gICAgfSxcblxuICAgIC8vIFJldHVybiBhIHZhbGlkIHVzZXJuYW1lLi5cbiAgICB1c2VybmFtZTogKHN0cikgPT4ge1xuICAgICAgICB2YXIgdXNlcm5hbWUgPSAoc3RyID8gc3RyIDogXCJcIikudG9Mb3dlckNhc2UoKTtcbiAgICAgICAgcmV0dXJuIHVzZXJuYW1lWzBdID09PSBcIiNcIiA/IHVzZXJuYW1lLnNsaWNlKDEpIDogdXNlcm5hbWU7XG4gICAgfVxufVxuIiwiLyogUiBFIFMgTyBVIFIgQyBFIFMgKi9cbmltcG9ydCBcIi4vYXNzZXRzL3N0eWxlcy9tYWluLnNjc3NcIjtcbmltcG9ydCBcIi4vYXNzZXRzL2ltZy9pbWdfYmFyLnBuZ1wiO1xuaW1wb3J0IFwiLi9hc3NldHMvaW1nL2ltZ19waWUucG5nXCI7XG5pbXBvcnQgXCIuL2J1aWxkZXIuaHRtbFwiO1xuXG5pbXBvcnQgeyBKb2IgfSBmcm9tIFwiLi90cy9qb2JcIjtcbmltcG9ydCB7IFJlYWN0aW9uIH0gZnJvbSBcIi4vdHMva2V5d29yZHNcIjtcbmltcG9ydCB7IENoYXJ0IH0gZnJvbSBcIi4vdHMvY2hhcnRzL2NoYXJ0XCI7XG5pbXBvcnQgeyBDaGF0IH0gZnJvbSBcIi4vdHMvY2hhdHMvY2hhdFwiO1xuaW1wb3J0IHsgVHdpdGNoQ2hhdCB9IGZyb20gXCIuL3RzL2NoYXRzL3R3aXRjaC5jaGF0XCI7XG5pbXBvcnQgeyBSZWFjdGlvblN0b3JhZ2UsIFVwZGF0ZU1vZGUgfSBmcm9tIFwiLi90cy9yZWFjdGlvbnN0b3JhZ2VcIjtcbmltcG9ydCB7IFBpZSB9IGZyb20gXCIuL3RzL2NoYXJ0cy9waWVcIjtcbmltcG9ydCB7IEJhciB9IGZyb20gXCIuL3RzL2NoYXJ0cy9iYXJcIjtcbmltcG9ydCB7IENhbnZhc0FuaW1hdGlvbiwgRmFkZURpcmVjdGlvbiB9IGZyb20gXCIuL3RzL2FuaW1hdGlvblwiO1xuXG4vLyBnZXQgY2hhbm5lbCBmcm9tIHVybFxuY29uc3QgcGFyYW1zOiBVUkxTZWFyY2hQYXJhbXMgPSBuZXcgVVJMU2VhcmNoUGFyYW1zKHdpbmRvdy5sb2NhdGlvbi5zZWFyY2gpO1xuY29uc3QgY2hhbm5lbDogc3RyaW5nID0gcGFyYW1zLmdldChcImNoYW5uZWxcIikgPz8gXCJcIjtcblxuY29uc3QgdGltZW91dDogbnVtYmVyID0gcGFyc2VJbnQocGFyYW1zLmdldChcInRpbWVvdXRcIikgPz8gXCIxMFwiKTtcbmNvbnN0IHJlcXVpcmVkUGluZ3M6IG51bWJlciA9IHBhcnNlSW50KHBhcmFtcy5nZXQoXCJyZXF1aXJlZFBpbmdzXCIpID8/IFwiNVwiKTtcblxuY29uc3Qgam9iOiBKb2IgPSBuZXcgSm9iKHRpbWVvdXQsIHJlcXVpcmVkUGluZ3MpO1xuY29uc3QgY2hhdDogQ2hhdCA9IG5ldyBUd2l0Y2hDaGF0KGNoYW5uZWwpO1xuXG5mdW5jdGlvbiBidWlsZENoYXJ0RnJvbVBhcmFtcygpOiBDaGFydCB7XG4gIGNvbnN0IHR5cGUgPSBwYXJhbXMuaGFzKFwidHlwZVwiKSA/IHBhcmFtcy5nZXQoXCJ0eXBlXCIpIDogbnVsbDsgLy8gbnVsbCA9IGJhclxuXG4gIC8vIHJldHVybiBiYXJcbiAgaWYgKHR5cGUgPT0gXCJwaWVcIikge1xuICAgIHJldHVybiBuZXcgUGllKHtcbiAgICAgIGVsZW1lbnRJZDogXCJiYXJcIixcbiAgICAgIGJhY2tncm91bmQ6IFwibm9uZVwiLFxuICAgICAgeDogLTEsXG4gICAgICB5OiAtMSxcbiAgICAgIHJhZGl1c0ZhY3RvcjogMixcbiAgICB9KTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gbmV3IEJhcih7XG4gICAgICBlbGVtZW50SWQ6IFwiYmFyXCIsXG4gICAgICAvLyBoZWlnaHQ6IDUwLFxuICAgICAgYmFja2dyb3VuZDogXCJub25lXCIsXG4gICAgICBiYXJNYXJnaW5IZWlnaHQ6IDAsXG4gICAgICBiYXJNYXJnaW5XaWR0aDogMCxcbiAgICAgIHN0cm9rZU1hcmdpbkhlaWdodDogMCxcbiAgICAgIHN0cm9rZU1hcmdpbldpZHRoOiAwLFxuICAgIH0pO1xuICB9XG59XG5cbmNvbnN0IGNoYXJ0OiBDaGFydCA9IGJ1aWxkQ2hhcnRGcm9tUGFyYW1zKCk7XG5cbmNvbnN0IHN0b3JhZ2U6IFJlYWN0aW9uU3RvcmFnZSA9IG5ldyBSZWFjdGlvblN0b3JhZ2UoY2hhdCwgam9iKTtcblxuY29uc3QgYW5pbWF0aW9uOiBDYW52YXNBbmltYXRpb24gPSBuZXcgQ2FudmFzQW5pbWF0aW9uKFwiYmFyXCIpO1xuXG4vLyBjbGVhciBiYXIgYWZ0ZXIgZmFkZWQgb3V0XG5hbmltYXRpb24ub24oXG4gIFwiZmFkZUVuZFwiLFxuICAoZHVyYXRpb25Jbk1zOiBudW1iZXIsIHNtb290aG5lc3M6IG51bWJlciwgZGlyOiBGYWRlRGlyZWN0aW9uKSA9PiB7XG4gICAgY29uc29sZS5sb2coXCJmYWRlRW5kOlwiLCBkdXJhdGlvbkluTXMsIHNtb290aG5lc3MsIGRpcik7XG5cbiAgICBpZiAoZGlyID09IEZhZGVEaXJlY3Rpb24uT1VUKSB7XG4gICAgICAvLyBjbGVhciBiYXJcbiAgICAgIGNoYXJ0LmNsZWFyKCk7XG4gICAgfVxuICB9XG4pO1xuXG4vLyBSZWFjdGlvblN0b3JhZ2Ujb24odXBkYXRlKVxuLy8gVGhpcyBldmVudCBpcyBleGVjdXRlZCB3aGVuIGEgcmVhY3Rpb24gY291bnQgd2FzIGluY3JlbWVudGVkLlxuLy8gSW4gdGhpcyBldmVudCB0aGUgY2hhcnQgc2hvdWxkIGJlIChyZSlwYWludGVkIHdpdGggdGhlIHZhbHVlcyBmcm9tOlxuLy8gUmVhY3Rpb25TdG9yYWdlI2dldFZhbHVlcygpXG5zdG9yYWdlLm9uKFwidXBkYXRlXCIsIChyZWFjdGlvbjogUmVhY3Rpb24sIHZhbHVlOiBudW1iZXIsIG1vZGU6IFVwZGF0ZU1vZGUpID0+IHtcbiAgY29uc29sZS5sb2coXG4gICAgXCJvbjogdXBkYXRlID1cIixcbiAgICB2YWx1ZSxcbiAgICBtb2RlLFxuICAgIGpvYi5pc0FjdGl2ZSgpLFxuICAgIG1vZGUgPT0gVXBkYXRlTW9kZS5JTkNSRU1FTlRcbiAgKTtcbiAgaWYgKG1vZGUgPT0gVXBkYXRlTW9kZS5JTkNSRU1FTlQgJiYgam9iLmlzQWN0aXZlKCkpIHtcbiAgICAvLyBzdG9yYWdlLmRyYXdDaGFydChjaGFydCk7XG4gIH1cbn0pO1xuXG5qb2Iub24oXCJzdGFydFwiLCAoKSA9PiB7XG4gIGNvbnNvbGUubG9nKFwiSm9iIHN0YXJ0ZWQhXCIpO1xuXG4gIHN0b3JhZ2UuZHJhd0NoYXJ0KGNoYXJ0KTtcblxuICAvLyBmYWRlIGluXG4gIGFuaW1hdGlvbi5mYWRlKDUwMCwgMjUsIEZhZGVEaXJlY3Rpb24uSU4pO1xufSk7XG5cbmpvYi5vbihcImNhbmNlbFwiLCAoKSA9PiB7XG4gIGNvbnNvbGUubG9nKFwiSm9iIGNhbmNlbGVkIVwiKTtcblxuICAvLyByZXNldCB2YWx1ZXNcbiAgc3RvcmFnZS5yZXNldFN0b3JhZ2UoKTtcblxuICBhbmltYXRpb24uZmFkZSg1MDAsIDI1LCBGYWRlRGlyZWN0aW9uLk9VVCk7XG59KTtcbiIsImltcG9ydCB7IEV2ZW50RW1pdHRlciB9IGZyb20gXCJldmVudHNcIjtcblxuLy8vIEZhZGUgQW5pbWF0aW9uXG5leHBvcnQgYWJzdHJhY3QgY2xhc3MgQW5pbWF0aW9uIGV4dGVuZHMgRXZlbnRFbWl0dGVyIHt9XG5cbmV4cG9ydCBlbnVtIEZhZGVEaXJlY3Rpb24ge1xuICBJTixcbiAgT1VULFxufVxuXG5leHBvcnQgY2xhc3MgQ2FudmFzQW5pbWF0aW9uIGV4dGVuZHMgQW5pbWF0aW9uIHtcbiAgcHJpdmF0ZSBjYW52YXM6IEhUTUxDYW52YXNFbGVtZW50O1xuICAvL1xuICBwcml2YXRlIGludGVydmFsVGltZXI6IG51bWJlciB8IG51bGw7XG4gIHByaXZhdGUgdGltZW91dFRpbWVyOiBudW1iZXIgfCBudWxsO1xuICAvL1xuICBjb25zdHJ1Y3RvcihwdWJsaWMgZWxlbWVudElkOiBzdHJpbmcpIHtcbiAgICBzdXBlcigpO1xuXG4gICAgLy8gZ2V0IGNhbnZhc1xuICAgIGNvbnN0IGVsZW06IEhUTUxFbGVtZW50ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQodGhpcy5lbGVtZW50SWQpO1xuICAgIGlmICghKGVsZW0gaW5zdGFuY2VvZiBIVE1MQ2FudmFzRWxlbWVudCkpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcIkNhbnZhcyBub3QgZm91bmQuXCIpO1xuICAgIH1cblxuICAgIHRoaXMuY2FudmFzID0gZWxlbTtcbiAgfVxuXG4gIHB1YmxpYyBjYW5jZWxJbnRlcnZhbCgpOiB2b2lkIHtcbiAgICBpZiAodGhpcy5pbnRlcnZhbFRpbWVyICE9IG51bGwpIHtcbiAgICAgIHdpbmRvdy5jbGVhckludGVydmFsKHRoaXMuaW50ZXJ2YWxUaW1lcik7XG4gICAgICB0aGlzLmludGVydmFsVGltZXIgPSBudWxsO1xuXG4gICAgICB0aGlzLmVtaXQoXCJjYW5jZWxJbnRlcnZhbFwiKTtcbiAgICB9XG4gIH1cblxuICBwdWJsaWMgY2FuY2VsVGltZXIoKTogdm9pZCB7XG4gICAgaWYgKHRoaXMudGltZW91dFRpbWVyICE9IG51bGwpIHtcbiAgICAgIHdpbmRvdy5jbGVhclRpbWVvdXQodGhpcy50aW1lb3V0VGltZXIpO1xuICAgICAgdGhpcy50aW1lb3V0VGltZXIgPSBudWxsO1xuXG4gICAgICB0aGlzLmVtaXQoXCJjYW5jZWxJbnRlcnZhbFwiKTtcbiAgICB9XG4gIH1cblxuICBwdWJsaWMgY2FuY2VsQW5pbWF0aW9ucygpOiB2b2lkIHtcbiAgICB0aGlzLmNhbmNlbEludGVydmFsKCk7XG4gICAgdGhpcy5jYW5jZWxUaW1lcigpO1xuICB9XG5cbiAgLy8gMTAwXG4gIHB1YmxpYyBmYWRlKFxuICAgIGR1cmF0aW9uSW5NczogbnVtYmVyLFxuICAgIHNtb290aG5lc3M6IG51bWJlcixcbiAgICBkaXI6IEZhZGVEaXJlY3Rpb25cbiAgKTogdm9pZCB7XG4gICAgdGhpcy5jYW5jZWxJbnRlcnZhbCgpO1xuXG4gICAgbGV0IGN1cnJlbnQ6IG51bWJlciA9IDA7XG4gICAgdGhpcy5pbnRlcnZhbFRpbWVyID0gd2luZG93LnNldEludGVydmFsKCgpID0+IHtcbiAgICAgIGN1cnJlbnQgKz0gc21vb3RobmVzcztcblxuICAgICAgbGV0IG9wYWNpdHkgPSBjdXJyZW50IC8gZHVyYXRpb25Jbk1zO1xuICAgICAgaWYgKGRpciA9PSBGYWRlRGlyZWN0aW9uLk9VVCkge1xuICAgICAgICBvcGFjaXR5ID0gMSAtIG9wYWNpdHk7XG4gICAgICB9XG5cbiAgICAgIHRoaXMuY2FudmFzLnN0eWxlLm9wYWNpdHkgPSBgJHtvcGFjaXR5fWA7XG5cbiAgICAgIGNvbnNvbGUubG9nKGAtPiAke2N1cnJlbnR9OiAke29wYWNpdHl9JWApO1xuXG4gICAgICBpZiAoY3VycmVudCA+PSBkdXJhdGlvbkluTXMpIHtcbiAgICAgICAgdGhpcy5jYW5jZWxJbnRlcnZhbCgpO1xuICAgICAgICB0aGlzLmVtaXQoXCJmYWRlRW5kXCIsIGR1cmF0aW9uSW5Ncywgc21vb3RobmVzcywgZGlyKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgIH0sIHNtb290aG5lc3MpOyAvLyAxMG1zXG4gIH1cblxuICBwdWJsaWMgZmFkZUluKGR1cmF0aW9uSW5NczogbnVtYmVyLCBzbW9vdGhuZXNzOiBudW1iZXIpOiB2b2lkIHtcbiAgICB0aGlzLmZhZGUoZHVyYXRpb25Jbk1zLCBzbW9vdGhuZXNzLCBGYWRlRGlyZWN0aW9uLklOKTtcbiAgfVxuXG4gIHB1YmxpYyBmYWRlT3V0KGR1cmF0aW9uSW5NczogbnVtYmVyLCBzbW9vdGhuZXNzOiBudW1iZXIpOiB2b2lkIHtcbiAgICB0aGlzLmZhZGUoZHVyYXRpb25Jbk1zLCBzbW9vdGhuZXNzLCBGYWRlRGlyZWN0aW9uLk9VVCk7XG4gIH1cbn1cbiIsImltcG9ydCB7IGNvbG9ycywgZGFya2VuSGV4Q29sb3IgfSBmcm9tIFwiLi4vY29sb3JcIjtcbmltcG9ydCB7IENoYXJ0LCBDaGFydFByb3BlcnRpZXMgfSBmcm9tIFwiLi9jaGFydFwiO1xuXG5jb25zdCBGT05UX0RZTkFNSUM6IG51bWJlciA9IC0xO1xuZXhwb3J0IHsgRk9OVF9EWU5BTUlDIH07XG5cbi8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuXG5leHBvcnQgaW50ZXJmYWNlIEJhclByb3BlcnRpZXMgZXh0ZW5kcyBDaGFydFByb3BlcnRpZXMge1xuICAvKipcbiAgICogVGhlIGRpc3RhbmNlIG9mIHRoZSBoZWlnaHQgKGJvdHRvbSBhbmQgdG9wKSB0byB0aGUgZWRnZSBvZiB0aGUgY2FudmFzXG4gICAqIEBkZWZhdWx0IDBcbiAgICovXG4gIGJhck1hcmdpbkhlaWdodD86IG51bWJlcjtcblxuICAvKipcbiAgICogVGhlIGRpc3RhbmNlIG9mIHRoZSB3aWR0aCAobGVmdCBhbmQgcmlnaHQpIHRvIHRoZSBlZGdlIG9mIHRoZSBjYW52YXNcbiAgICogQGRlZmF1bHQgMFxuICAgKi9cbiAgYmFyTWFyZ2luV2lkdGg/OiBudW1iZXI7XG5cbiAgLyoqXG4gICAqIFRoZSB0b3AgYW5kIGJvdHRvbSBkaXN0YW5jZSBiZXR3ZWVuXG4gICAqIHRoZSBvdXRsaW5lIG9mIHRoZSBQcm9ncmVzc0JhciBhbmQgdGhlIGZpbGxlZCBpblxuICAgKiBAZGVmYXVsdCA1XG4gICAqL1xuICBzdHJva2VNYXJnaW5IZWlnaHQ/OiBudW1iZXI7XG5cbiAgLyoqXG4gICAqIFRoZSBsZWZ0IGFuZCByaWdodCBkaXN0YW5jZSBiZXR3ZWVuXG4gICAqIHRoZSBvdXRsaW5lIG9mIHRoZSBQcm9ncmVzc0JhciBhbmQgdGhlIGZpbGxlZCBpblxuICAgKiBAZGVmYXVsdCA1XG4gICAqL1xuICBzdHJva2VNYXJnaW5XaWR0aD86IG51bWJlcjtcblxuICAvKipcbiAgICogVGhlIGNvbG9ycyBmcm9tIHRoaXMgYXJyYXkgYXJlIGdyYWR1YWxseSB1c2VkIGZvciB0aGUgY29sb3JzIG9mIHRoZSB2YWx1ZXMgb2YgdGhlIGJhci5cbiAgICogSWYgdGhlcmUgYXJlIGxlc3MgY29sb3JzIGluIHRoZSBhcnJheSB0aGFuIHZhbHVlcyxcbiAgICogdGhlIG5leHQgY29sb3IgaXMgdGFrZW4gZnJvbSB0aGUgYmVnaW5uaW5nIGFnYWluLlxuICAgKiBAZGVmYXVsdCB7Li4vY29sb3IudHM6OmNvbG9yc31cbiAgICovXG4gIHZhbHVlQ29sb3JzPzogc3RyaW5nW107XG5cbiAgLyoqXG4gICAqIFRoaXMgY29sb3IgaXMgdXNlZCBmb3IgdGhlIGJvcmRlciBvZiB0aGUgYmFyLlxuICAgKiBAZGVmYXVsdCAjMzQ0OTVlIChsaWdodCBncmF5KVxuICAgKi9cbiAgc3Ryb2tlQ29sb3I/OiBzdHJpbmc7XG5cbiAgLyoqXG4gICAqIEhvdyBvZnRlbiBzaG91bGQgdGhlIGNvbnRvdXIgYmUgZHJhd24/IChPciBhbHNvOiB0aGUgdGhpY2tuZXNzIG9mIHRoZSBzdHJva2UpXG4gICAqL1xuICBzdHJva2VJdGVyYXRpb25zPzogbnVtYmVyO1xuXG4gIC8qKlxuICAgKiBUaGUgZm9udCBzaXplIG9mIHRoZSBmb250IHRoYXQgc2VydmVzIGFzIGEgcGVyY2VudGFnZSBkaXNwbGF5IGFib3ZlIHRoZSBjaGFydC5cbiAgICogVXNlIEZPTlRfRFlOQU1JQyB0byBoYXZlIHRoZSBmb250IHNpemUgY2FsY3VsYXRlZCBhY2NvcmRpbmcgdG8gdGhlIHRvdGFsIHNpemUgb2YgdGhlIGNoYXJ0IChkeW5hbWljKVxuICAgKiBAZGVmYXVsdCBGT05UX0RZTkFNSUNcbiAgICovXG4gIGZvbnRTaXplPzogbnVtYmVyO1xuXG4gIC8qKlxuICAgKiBUaGUgZm9udCBmYW1pbHkgZm9yIHRoZSB2YWx1ZXNcbiAgICogQGRlZmF1bHQgY2FsaWJyaVxuICAgKi9cbiAgZm9udEZhbWlseT86IHN0cmluZztcblxuICAvKipcbiAgICogSG93IG11Y2ggdGhlIHRleHQgY29sb3Igc2hvdWxkIGJlIGRhcmtlbmVkXG4gICAqIEBkZWZhdWx0IC42NVxuICAgKi9cbiAgZm9udENvbG9yRmFjdG9yPzogbnVtYmVyO1xuXG4gIC8qKlxuICAgKiBUaGUgZm9udCBpbiB0aGUgY2FsY3VsYXRpb24gYnkgdGhlIGZhY3RvciB7Zm9udFNpemVGYWN0b3J9XG4gICAqIEBkZWZhdWx0IDEvOFxuICAgKi9cbiAgZm9udFNpemVGYWN0b3I/OiBudW1iZXI7XG5cbiAgLyoqXG4gICAqIFJvdW5kIHRoZSB2YWx1ZT9cbiAgICovXG4gIHRleHRSb3VuZD86IGJvb2xlYW47XG59XG5cbmNvbnN0IGRlZmF1bHRCYXJQcm9wZXJ0aWVzOiBCYXJQcm9wZXJ0aWVzID0ge1xuICBlbGVtZW50SWQ6IFwiXCIsXG4gIGJhck1hcmdpbkhlaWdodDogMTAsXG4gIGJhck1hcmdpbldpZHRoOiAxMCxcbiAgc3Ryb2tlTWFyZ2luSGVpZ2h0OiA1LFxuICBzdHJva2VNYXJnaW5XaWR0aDogNSxcbiAgdmFsdWVDb2xvcnM6IGNvbG9ycyxcbiAgc3Ryb2tlQ29sb3I6IFwiIzM0NDk1ZVwiLFxuICBzdHJva2VJdGVyYXRpb25zOiAxLFxuICBmb250U2l6ZTogRk9OVF9EWU5BTUlDLFxuICBmb250RmFtaWx5OiBcImNvdXJpZXJcIixcbiAgZm9udFNpemVGYWN0b3I6IDEuOCxcbiAgZm9udENvbG9yRmFjdG9yOiAwLjY1LFxuICB0ZXh0Um91bmQ6IHRydWUsXG59O1xuXG4vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cblxuZXhwb3J0IGNsYXNzIEJhciBleHRlbmRzIENoYXJ0IHtcbiAgY29uc3RydWN0b3IocHVibGljIHByb3BlcnRpZXM6IEJhclByb3BlcnRpZXMpIHtcbiAgICBzdXBlcihwcm9wZXJ0aWVzKTtcbiAgICB0aGlzLnByb3BlcnRpZXMgPSB7IC4uLmRlZmF1bHRCYXJQcm9wZXJ0aWVzLCAuLi50aGlzLnByb3BlcnRpZXMgfTtcbiAgICBjb25zb2xlLmxvZyh0aGlzLnByb3BlcnRpZXMpO1xuICB9XG5cbiAgcHVibGljIGluaXQoKTogdm9pZCB7fVxuXG4gIC8qKlxuICAgKiBEcmF3IHRoZSBiYXJcbiAgICpcbiAgICogQHBhcmFtIHZhbHVlcyBBbiBhcnJheSBvZiB2YWx1ZXNcbiAgICogQHBhcmFtIGRyYXdUZXh0IERyYXcgdGhlIHBlcmNlbnRhZ2Ugb24gdG9wP1xuICAgKiBAcGFyYW0gY2xlYXIgQ2xlYXIgdGhlIGNhbnZhcyBiZWZvcmUgZHJhd2luZz9cbiAgICovXG4gIHB1YmxpYyBkcmF3KFxuICAgIHZhbHVlczogbnVtYmVyW10sXG4gICAgZHJhd1RleHQ6IGJvb2xlYW4gPSB0cnVlLFxuICAgIGNsZWFyOiBib29sZWFuID0gdHJ1ZVxuICApOiB2b2lkIHtcbiAgICAvLyBkcmF3XG4gICAgaWYgKGNsZWFyKSB7XG4gICAgICB0aGlzLmNsZWFyKCk7XG4gICAgfVxuXG4gICAgY29uc3QgcHJvcCA9IHRoaXMucHJvcGVydGllcztcblxuICAgIGNvbnN0IHJlY3RXaWR0aDogbnVtYmVyID0gdGhpcy53aWR0aCAtIHByb3AuYmFyTWFyZ2luV2lkdGggKiAyO1xuICAgIGNvbnN0IHJlY3RIZWlnaHQ6IG51bWJlciA9IHRoaXMuaGVpZ2h0IC0gcHJvcC5iYXJNYXJnaW5IZWlnaHQgKiAyO1xuXG4gICAgLy8gcHJvcGVydGllc1xuICAgIGxldCBmb250U2l6ZSA9IHByb3AuZm9udFNpemU7XG4gICAgaWYgKGZvbnRTaXplID09PSBGT05UX0RZTkFNSUMpIHtcbiAgICAgIGZvbnRTaXplID0gcmVjdEhlaWdodCAqICgyIC8gMyk7XG4gICAgfVxuXG4gICAgY29uc3QgZm9udE1wID0gZm9udFNpemUgLyBwcm9wLmZvbnRTaXplRmFjdG9yO1xuICAgIHRoaXMuY3R4LmZvbnQgPSBgJHtNYXRoLnJvdW5kKGZvbnRTaXplKX1weCAke3Byb3AuZm9udEZhbWlseX1gO1xuICAgIHRoaXMuY3R4LnN0cm9rZVN0eWxlID0gcHJvcC5zdHJva2VDb2xvcjtcblxuICAgIC8vIHN0cm9rZVxuICAgIGZvciAobGV0IGo6IG51bWJlciA9IDA7IGogPCBwcm9wLnN0cm9rZUl0ZXJhdGlvbnM7IGorKykge1xuICAgICAgdGhpcy5jdHguYmVnaW5QYXRoKCk7XG4gICAgICB0aGlzLmN0eC5yZWN0KFxuICAgICAgICB0aGlzLnggKyBwcm9wLmJhck1hcmdpbldpZHRoIC0gcHJvcC5zdHJva2VNYXJnaW5XaWR0aCAtIGosXG4gICAgICAgIHRoaXMueSArIHByb3AuYmFyTWFyZ2luSGVpZ2h0IC0gcHJvcC5zdHJva2VNYXJnaW5IZWlnaHQgLSBqLFxuICAgICAgICByZWN0V2lkdGggKyBwcm9wLnN0cm9rZU1hcmdpbldpZHRoICogMiArIGosXG4gICAgICAgIHJlY3RIZWlnaHQgKyBwcm9wLnN0cm9rZU1hcmdpbkhlaWdodCAqIDIgKyBqXG4gICAgICApO1xuICAgICAgdGhpcy5jdHguc3Ryb2tlKCk7XG4gICAgICB0aGlzLmN0eC5jbG9zZVBhdGgoKTtcbiAgICB9XG5cbiAgICAvLyBjb3VudCB0aGUgc3VtIG9mIGFsbCByZWFjdGlvbnNcbiAgICAvLyBsZXQgc3VtID0gdmFsLm1hcChjID0+IGMudmFsdWUpLnJlZHVjZSgoYSwgYykgPT4gYSArIGMpO1xuICAgIGNvbnN0IHN1bSA9IHZhbHVlcy5yZWR1Y2UoKGEsIGMpID0+IGEgKyBjKTtcblxuICAgIGxldCBsYXN0WCA9IHByb3AuYmFyTWFyZ2luV2lkdGg7IC8vIDUwIC0+IHN0YXJ0aW5nIHBvc1xuICAgIGZvciAobGV0IGk6IG51bWJlciA9IDA7IGkgPCB2YWx1ZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgIGNvbnN0IHY6IG51bWJlciA9IHZhbHVlc1tpXTtcbiAgICAgIGNvbnN0IHBlcmNlbnRhZ2U6IG51bWJlciA9IHYgLyBzdW07XG5cbiAgICAgIGlmIChwZXJjZW50YWdlID09IDApIHtcbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG5cbiAgICAgIGNvbnN0IHZhbHVlV2lkdGg6IG51bWJlciA9IHJlY3RXaWR0aCAqIHBlcmNlbnRhZ2U7XG5cbiAgICAgIHRoaXMuY3R4LmZpbGxTdHlsZSA9IHByb3AudmFsdWVDb2xvcnNbaSAlIHByb3AudmFsdWVDb2xvcnMubGVuZ3RoXTtcbiAgICAgIHRoaXMuY3R4LmJlZ2luUGF0aCgpO1xuICAgICAgdGhpcy5jdHgucmVjdChcbiAgICAgICAgdGhpcy54ICsgbGFzdFgsXG4gICAgICAgIHRoaXMueSArIHByb3AuYmFyTWFyZ2luSGVpZ2h0LFxuICAgICAgICB2YWx1ZVdpZHRoLFxuICAgICAgICByZWN0SGVpZ2h0XG4gICAgICApO1xuICAgICAgdGhpcy5jdHguZmlsbCgpO1xuICAgICAgdGhpcy5jdHguY2xvc2VQYXRoKCk7XG5cbiAgICAgIC8vIGRyYXcgdGV4dFxuICAgICAgaWYgKGRyYXdUZXh0KSB7XG4gICAgICAgIGxldCB0eHQ6IHN0cmluZztcbiAgICAgICAgaWYgKHByb3AudGV4dFJvdW5kKSB7XG4gICAgICAgICAgdHh0ID0gYCR7TWF0aC5yb3VuZChwZXJjZW50YWdlICogMTAwKX0lYDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0eHQgPSBgJHtwZXJjZW50YWdlICogMTAwfSVgO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5jdHguYmVnaW5QYXRoKCk7XG4gICAgICAgIHRoaXMuY3R4LmZpbGxTdHlsZSA9IGRhcmtlbkhleENvbG9yKFxuICAgICAgICAgIHRoaXMuY3R4LmZpbGxTdHlsZSxcbiAgICAgICAgICBwcm9wLmZvbnRDb2xvckZhY3RvclxuICAgICAgICApO1xuICAgICAgICB0aGlzLmN0eC5maWxsVGV4dChcbiAgICAgICAgICB0eHQsXG4gICAgICAgICAgdGhpcy54ICsgbGFzdFggKyB2YWx1ZVdpZHRoIC8gMiAtIChmb250TXAgKiB0eHQubGVuZ3RoKSAvIDIsXG4gICAgICAgICAgdGhpcy55ICsgcHJvcC5iYXJNYXJnaW5IZWlnaHQgKyByZWN0SGVpZ2h0IC8gMiArIGZvbnRNcCAvIDJcbiAgICAgICAgKTtcbiAgICAgICAgdGhpcy5jdHguY2xvc2VQYXRoKCk7XG4gICAgICB9XG5cbiAgICAgIGxhc3RYICs9IHZhbHVlV2lkdGg7XG4gICAgfVxuICB9XG5cbiAgcHVibGljIGNsZWFyKCk6IHZvaWQge1xuICAgIHRoaXMuY3R4LmNsZWFyUmVjdCh0aGlzLngsIHRoaXMueSwgdGhpcy53aWR0aCwgdGhpcy5oZWlnaHQpO1xuICB9XG59XG4iLCJjb25zdCBTSVpFX0ZJTEw6IG51bWJlciA9IC0xO1xuY29uc3QgTE9DQVRJT05fQ0VOVEVSOiBudW1iZXIgPSAtMjtcblxuZXhwb3J0IGludGVyZmFjZSBDaGFydFByb3BlcnRpZXMge1xuICBlbGVtZW50SWQ6IHN0cmluZztcbiAgeD86IG51bWJlcjtcbiAgeT86IG51bWJlcjtcbiAgd2lkdGg/OiBudW1iZXI7XG4gIGhlaWdodD86IG51bWJlcjtcbiAgYmFja2dyb3VuZD86IHN0cmluZztcbn1cbmV4cG9ydCBhYnN0cmFjdCBjbGFzcyBDaGFydCB7XG4gIC8vXG4gIHB1YmxpYyBjYW52YXNFbGVtZW50SWQ6IHN0cmluZztcbiAgcHVibGljIHg6IG51bWJlcjtcbiAgcHVibGljIHk6IG51bWJlcjtcbiAgcHVibGljIHdpZHRoOiBudW1iZXI7XG4gIHB1YmxpYyBoZWlnaHQ6IG51bWJlcjtcbiAgLy9cbiAgcHVibGljIGNhbnZhczogSFRNTENhbnZhc0VsZW1lbnQ7XG4gIHB1YmxpYyBjdHg6IENhbnZhc1JlbmRlcmluZ0NvbnRleHQyRDtcbiAgcHVibGljIGVycm9yOiBzdHJpbmc7XG4gIC8vXG5cbiAgY29uc3RydWN0b3IocHJvcGVydGllczogQ2hhcnRQcm9wZXJ0aWVzKSB7XG4gICAgdGhpcy5jYW52YXNFbGVtZW50SWQgPSBwcm9wZXJ0aWVzLmVsZW1lbnRJZDtcbiAgICB0aGlzLnggPSBwcm9wZXJ0aWVzLnggPz8gMDtcbiAgICB0aGlzLnkgPSBwcm9wZXJ0aWVzLnkgPz8gMDtcbiAgICB0aGlzLndpZHRoID0gcHJvcGVydGllcy53aWR0aCA/PyBTSVpFX0ZJTEw7XG4gICAgdGhpcy5oZWlnaHQgPSBwcm9wZXJ0aWVzLmhlaWdodCA/PyBTSVpFX0ZJTEw7XG5cbiAgICAvLyBpZiB3aWR0aCA9PSAtMTogd2lkdGggb2YgZGlzcGxheVxuICAgIGlmICh0aGlzLndpZHRoID09PSBTSVpFX0ZJTEwpIHtcbiAgICAgIHRoaXMud2lkdGggPSBkb2N1bWVudC5kZWZhdWx0Vmlldy5pbm5lcldpZHRoO1xuICAgIH0gZWxzZSBpZiAodGhpcy54ID09PSBMT0NBVElPTl9DRU5URVIpIHtcbiAgICAgIHRoaXMueCA9IGRvY3VtZW50LmRlZmF1bHRWaWV3LmlubmVyV2lkdGggLyAyIC0gdGhpcy53aWR0aCAvIDI7XG4gICAgfVxuXG4gICAgLy8gaWYgaGVpZ2h0ID09IC0xOiBoZWlnaHQgb2YgZGlzcGxheVxuICAgIGlmICh0aGlzLmhlaWdodCA9PSBTSVpFX0ZJTEwpIHtcbiAgICAgIHRoaXMuaGVpZ2h0ID0gZG9jdW1lbnQuZGVmYXVsdFZpZXcuaW5uZXJIZWlnaHQ7XG4gICAgfSBlbHNlIGlmICh0aGlzLnggPT09IExPQ0FUSU9OX0NFTlRFUikge1xuICAgICAgdGhpcy55ID0gZG9jdW1lbnQuZGVmYXVsdFZpZXcuaW5uZXJIZWlnaHQgLyAyIC0gdGhpcy5oZWlnaHQgLyAyO1xuICAgIH1cblxuICAgIC8vIGZpbmQgY2FudmFzXG4gICAgY29uc3QgY2FudmFzID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQodGhpcy5jYW52YXNFbGVtZW50SWQpO1xuICAgIGlmIChjYW52YXMgPT0gbnVsbCkge1xuICAgICAgdGhpcy5lcnJvciA9IFwiQ2FudmFzIG5vdCBmb3VuZC5cIjtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgdGhpcy5jYW52YXMgPSA8SFRNTENhbnZhc0VsZW1lbnQ+Y2FudmFzO1xuXG4gICAgLy8gZ2V0IGNvbnRleHRcbiAgICBjb25zdCBjdHggPSB0aGlzLmNhbnZhcy5nZXRDb250ZXh0KFwiMmRcIik7XG4gICAgaWYgKGN0eCA9PSBudWxsKSB7XG4gICAgICB0aGlzLmVycm9yID0gXCJDb250ZXh0IG5vdCBmb3VuZC5cIjtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgdGhpcy5jdHggPSBjdHg7XG5cbiAgICAvLyBtYWtlIHRoZSBjYW52YXMgdGhlIHNpemUgb2Ygd2lkdGggYW5kIGhlaWdodFxuICAgIHRoaXMuY2FudmFzLmhlaWdodCA9IHRoaXMuaGVpZ2h0O1xuICAgIHRoaXMuY2FudmFzLndpZHRoID0gdGhpcy53aWR0aDtcblxuICAgIC8vIGJhY2tncm91bmRcbiAgICBpZiAoKHByb3BlcnRpZXMuYmFja2dyb3VuZCA/PyBcIiMyYzNlNTBcIikgIT0gXCJub25lXCIpIHtcbiAgICAgIHRoaXMuY2FudmFzLnN0eWxlLmJhY2tncm91bmQgPSBwcm9wZXJ0aWVzLmJhY2tncm91bmQgPz8gXCIjMmMzZTUwXCI7XG4gICAgfVxuXG4gICAgaWYgKCF0aGlzLmVycm9yKSB7XG4gICAgICB0aGlzLmluaXQoKTtcbiAgICB9XG4gIH1cblxuICBhYnN0cmFjdCBpbml0KCk6IHZvaWQ7XG4gIGFic3RyYWN0IGRyYXcodmFsdWVzOiBudW1iZXJbXSwgZHJhd1RleHQ/OiBib29sZWFuLCBjbGVhcj86IGJvb2xlYW4pOiB2b2lkO1xuICBhYnN0cmFjdCBjbGVhcigpOiB2b2lkO1xufSIsImltcG9ydCB7IENoYXJ0LCBDaGFydFByb3BlcnRpZXMgfSBmcm9tIFwiLi9jaGFydFwiO1xuaW1wb3J0IHsgY29sb3JzLCBkYXJrZW5IZXhDb2xvciB9IGZyb20gXCIuLi9jb2xvclwiO1xuXG5jb25zdCBMT0NBVElPTl9DRU5URVI6IG51bWJlciA9IC0xO1xuXG5leHBvcnQgeyBMT0NBVElPTl9DRU5URVIgfTtcblxuLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG5cbmludGVyZmFjZSBQaWVQcm9wZXJ0aWVzIGV4dGVuZHMgQ2hhcnRQcm9wZXJ0aWVzIHtcbiAgLyoqXG4gICAqIFxuICAgKiBUaGUgZm9udCBzaXplIG9mIHRoZSBmb250IHRoYXQgc2VydmVzIGFzIGEgcGVyY2VudGFnZSBkaXNwbGF5IGFib3ZlIHRoZSBjaGFydC5cbiAgICogVXNlIEZPTlRfRFlOQU1JQyB0byBoYXZlIHRoZSBmb250IHNpemUgY2FsY3VsYXRlZCBhY2NvcmRpbmcgdG8gdGhlIHRvdGFsIHNpemUgb2YgdGhlIGNoYXJ0IChkeW5hbWljKVxuICAgKiBAZGVmYXVsdCAyNVxuICAgKi9cbiAgZm9udFNpemU/OiBudW1iZXI7XG5cbiAgLyoqXG4gICAqIFJvdW5kIHRoZSB2YWx1ZT9cbiAgICovXG4gIHJvdW5kPzogYm9vbGVhbjtcblxuICAvKipcbiAgICogKGhlaWdodCBvciB3aWR0aCkgLyB7cmFkaXVzRmFjdG9yfVxuICAgKi9cbiAgcmFkaXVzRmFjdG9yPzogbnVtYmVyO1xuXG4gIC8qKlxuICAgKiBUaGUgZm9udCBmYW1pbHkgZm9yIHRoZSB2YWx1ZXNcbiAgICogQGRlZmF1bHQgY2FsaWJyaVxuICAgKi9cbiAgZm9udEZhbWlseT86IHN0cmluZztcblxuICAvKipcbiAgICogSG93IG11Y2ggdGhlIHRleHQgY29sb3Igc2hvdWxkIGJlIGRhcmtlbmVkXG4gICAqIEBkZWZhdWx0IC42NVxuICAgKi9cbiAgZm9udENvbG9yRmFjdG9yPzogbnVtYmVyO1xufVxuXG5jb25zdCBkZWZhdWx0UGllUGFyYW1zOiBQaWVQcm9wZXJ0aWVzID0ge1xuICBlbGVtZW50SWQ6IFwiXCIsXG4gIGZvbnRTaXplOiAyNSxcbiAgcm91bmQ6IHRydWUsXG4gIHJhZGl1c0ZhY3RvcjogNC41LFxuICBmb250RmFtaWx5OiBcImNvdXJpZXJcIixcbiAgZm9udENvbG9yRmFjdG9yOiAwLjY1LFxufTtcblxuLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG5cbmV4cG9ydCBjbGFzcyBQaWUgZXh0ZW5kcyBDaGFydCB7XG4gIC8qKlxuICAgKiBSYWRpdXMgb2YgcGllXG4gICAqL1xuICBwdWJsaWMgcjogbnVtYmVyO1xuICBwcml2YXRlIGVuZEFuZ2xlOiBudW1iZXI7XG5cbiAgY29uc3RydWN0b3IocHVibGljIHByb3BlcnRpZXM6IFBpZVByb3BlcnRpZXMpIHtcbiAgICBzdXBlcihwcm9wZXJ0aWVzKTtcblxuICAgIHRoaXMucHJvcGVydGllcyA9IHsgLi4uZGVmYXVsdFBpZVBhcmFtcywgLi4udGhpcy5wcm9wZXJ0aWVzIH07XG5cbiAgICBpZiAodGhpcy54ID09PSBMT0NBVElPTl9DRU5URVIpIHtcbiAgICAgIHRoaXMueCA9IHRoaXMud2lkdGggLyAyO1xuICAgIH1cbiAgICBpZiAodGhpcy55ID09PSBMT0NBVElPTl9DRU5URVIpIHtcbiAgICAgIHRoaXMueSA9IHRoaXMuaGVpZ2h0IC8gMjtcbiAgICB9XG5cbiAgICB0aGlzLnIgPSBNYXRoLm1pbih0aGlzLmhlaWdodCwgdGhpcy53aWR0aCkgLyB0aGlzLnByb3BlcnRpZXMucmFkaXVzRmFjdG9yO1xuICB9XG5cbiAgcHVibGljIGluaXQoKTogdm9pZCB7fVxuXG4gIHB1YmxpYyBkcmF3KFxuICAgIHZhbHVlczogbnVtYmVyW10sXG4gICAgZHJhd1RleHQ6IGJvb2xlYW4gPSB0cnVlLFxuICAgIGNsZWFyOiBib29sZWFuID0gdHJ1ZVxuICApOiB2b2lkIHtcbiAgICAvLyBkcmF3XG4gICAgaWYgKGNsZWFyKSB7XG4gICAgICB0aGlzLmNsZWFyKCk7XG4gICAgfVxuXG4gICAgLy8gQWxpYXMgdG8gcHJvcGVydGllc1xuICAgIGNvbnN0IHByb3AgPSB0aGlzLnByb3BlcnRpZXM7XG5cbiAgICBjb25zdCBzdW0gPSB2YWx1ZXMucmVkdWNlKChhLCBjKSA9PiBhICsgYyk7XG5cbiAgICAvLyByZXNldCBlbmRBbmdsZVxuICAgIHRoaXMuZW5kQW5nbGUgPSAwO1xuXG4gICAgLy8gZHJhdyBwaWVcbiAgICBmb3IgKGxldCBpOiBudW1iZXIgPSAwOyBpIDwgdmFsdWVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICBjb25zdCB2YWx1ZTogbnVtYmVyID0gKHZhbHVlc1tpXSAvIHN1bSkgKiAxMDA7XG4gICAgICBpZiAodmFsdWUgPT0gMCkge1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cblxuICAgICAgY29uc3QgY29sb3I6IHN0cmluZyA9IGNvbG9yc1tpICUgY29sb3JzLmxlbmd0aF07XG5cbiAgICAgIGNvbnN0IGN1cnJlbnRBbmdsZSA9IChNYXRoLlBJIC8gNTApICogdmFsdWU7XG5cbiAgICAgIC8vIGRyYXcgYmFzaWMgcGllIGNoYXJ0XG4gICAgICB0aGlzLmN0eC5iZWdpblBhdGgoKTtcbiAgICAgIHRoaXMuY3R4Lm1vdmVUbyh0aGlzLngsIHRoaXMueSk7XG4gICAgICB0aGlzLmN0eC5hcmMoXG4gICAgICAgIHRoaXMueCxcbiAgICAgICAgdGhpcy55LFxuICAgICAgICB0aGlzLnIsXG4gICAgICAgIHRoaXMuZW5kQW5nbGUgLSAwLjUgKiBNYXRoLlBJLFxuICAgICAgICB0aGlzLmVuZEFuZ2xlICsgY3VycmVudEFuZ2xlIC0gMC41ICogTWF0aC5QSVxuICAgICAgKTtcbiAgICAgIHRoaXMuY3R4LmZpbGxTdHlsZSA9IGNvbG9yO1xuICAgICAgdGhpcy5jdHguZmlsbCgpO1xuICAgICAgdGhpcy5jdHguY2xvc2VQYXRoKCk7XG5cbiAgICAgIGNvbnN0IGJldGEgPSB0aGlzLmVuZEFuZ2xlICsgY3VycmVudEFuZ2xlIC8gMjtcblxuICAgICAgLy8gZm9ybWF0IG9mIHRleHRcbiAgICAgIGlmIChkcmF3VGV4dCkge1xuICAgICAgICB0aGlzLmN0eC5maWxsU3R5bGUgPSBkYXJrZW5IZXhDb2xvcihcbiAgICAgICAgICB0aGlzLmN0eC5maWxsU3R5bGUsXG4gICAgICAgICAgcHJvcC5mb250Q29sb3JGYWN0b3JcbiAgICAgICAgKTtcblxuICAgICAgICB0aGlzLmN0eC5mb250ID0gcHJvcC5mb250U2l6ZSArIFwicHggXCIgKyBwcm9wLmZvbnRGYW1pbHk7XG5cbiAgICAgICAgbGV0IHR4dDogc3RyaW5nO1xuICAgICAgICBpZiAocHJvcC5yb3VuZCkge1xuICAgICAgICAgIHR4dCA9IGAke01hdGgucm91bmQodmFsdWUpfSVgO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHR4dCA9IGAke3ZhbHVlfSRgO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gY2FsY3VsYXRlIHRleHQgcG9zaXRpb25cbiAgICAgICAgY29uc3QgdCA9IHR4dC5sZW5ndGggKiAxNTtcbiAgICAgICAgY29uc3QgaCA9IDE1O1xuXG4gICAgICAgIGNvbnN0IEFicyA9IHRoaXMuciAtIDUwO1xuICAgICAgICBjb25zdCBUeCA9XG4gICAgICAgICAgdGhpcy54ICsgKE1hdGguc2luKGJldGEpICogQWJzICsgKHQgLyAyKSAqIChNYXRoLnNpbihiZXRhKSAtIDEpKTtcbiAgICAgICAgY29uc3QgVHkgPVxuICAgICAgICAgIHRoaXMueSAtIChNYXRoLmNvcyhiZXRhKSAqIEFicyArIChoIC8gMikgKiAoTWF0aC5jb3MoYmV0YSkgLSAxKSk7XG5cbiAgICAgICAgLy8gZHJhdyB0ZXh0XG4gICAgICAgIHRoaXMuY3R4LmZpbGxUZXh0KHR4dCwgVHgsIFR5KTtcbiAgICAgIH1cblxuICAgICAgdGhpcy5lbmRBbmdsZSArPSBjdXJyZW50QW5nbGU7XG4gICAgfVxuICB9XG4gIFxuICBwdWJsaWMgY2xlYXIoKTogdm9pZCB7XG4gICAgdGhpcy5jdHguY2xlYXJSZWN0KDAsIDAsIHRoaXMud2lkdGgsIHRoaXMuaGVpZ2h0KTtcbiAgfVxuXG59IiwiaW1wb3J0IHsgRXZlbnRFbWl0dGVyIH0gZnJvbSBcImV2ZW50c1wiO1xuXG5leHBvcnQgYWJzdHJhY3QgY2xhc3MgQ2hhdCBleHRlbmRzIEV2ZW50RW1pdHRlciB7XG4gIGNvbnN0cnVjdG9yKFxuICAgICAgcHVibGljIGNoYW5uZWw6IHN0cmluZ1xuICApIHtcbiAgICBzdXBlcigpO1xuICB9XG5cbiAgLyoqXG4gICAqIFN1YnNjcmliZSB0byB0aGUgXCJtZXNzYWdlXCIgZXZlbnQgYnVzXG4gICAqIEFyZ3M6XG4gICAqL1xuICBwdWJsaWMgb25NZXNzYWdlKFxuICAgIGxpc3RlbmVyOiAodXNlcm5hbWU6IHN0cmluZywgbWVzc2FnZTogc3RyaW5nKSA9PiB2b2lkXG4gICk6IHZvaWQge1xuICAgIHRoaXMub24oXCJtZXNzYWdlXCIsIGxpc3RlbmVyKTtcbiAgfVxuXG4gIHByb3RlY3RlZCBlbWl0TWVzc2FnZSh1c2VybmFtZTogc3RyaW5nLCBtZXNzYWdlOiBzdHJpbmcpOiB2b2lkIHtcbiAgICB0aGlzLmVtaXQoXCJtZXNzYWdlXCIsIHVzZXJuYW1lLCBtZXNzYWdlKTtcbiAgfVxuXG59IiwiaW1wb3J0IHsgQ2hhdCB9IGZyb20gXCIuL2NoYXRcIjtcbmltcG9ydCB7IEFjdGlvbnMsIENoYXRVc2Vyc3RhdGUsIENsaWVudCwgQ2xpZW50QmFzZSB9IGZyb20gXCJ0bWkuanNcIjtcblxuZXhwb3J0IGNsYXNzIFR3aXRjaENoYXQgZXh0ZW5kcyBDaGF0IHtcbiAgLyoqXG4gICAqIHRtaS5qcyBjbGllbnRcbiAgICovXG4gIHB1YmxpYyBjbGllbnQ6IENsaWVudEJhc2UgJiBBY3Rpb25zO1xuXG4gIGNvbnN0cnVjdG9yKGNoYW5uZWw6IHN0cmluZykge1xuICAgIHN1cGVyKGNoYW5uZWwpO1xuXG4gICAgLy8gY3JlYXRlIGNsaWVudFxuICAgIHRoaXMuY2xpZW50ID0gQ2xpZW50KHtcbiAgICAgIGNvbm5lY3Rpb246IHtcbiAgICAgICAgc2VjdXJlOiB0cnVlLFxuICAgICAgICByZWNvbm5lY3Q6IHRydWUsXG4gICAgICB9LFxuICAgICAgY2hhbm5lbHM6IFt0aGlzLmNoYW5uZWxdLFxuICAgIH0pO1xuXG4gICAgLy8gZGVidWdcbiAgICBjb25zb2xlLmxvZyhcIltDaGF0XSBDb25uZWN0aW5nIHRvIGNoYW5uZWw6IFwiICsgY2hhbm5lbCk7XG4gICAgdGhpcy5jbGllbnQuY29ubmVjdCgpO1xuICAgIGNvbnNvbGUubG9nKFwiW0NoYXRdIENvbm5lY3RlZCFcIik7XG5cbiAgICAvLyBldmVudHNcbiAgICB0aGlzLmNsaWVudC5vbihcbiAgICAgIFwibWVzc2FnZVwiLFxuICAgICAgKGM6IHN0cmluZywgdTogQ2hhdFVzZXJzdGF0ZSwgbWVzc2FnZTogc3RyaW5nLCBzOiBib29sZWFuKSA9PiB7XG4gICAgICAgIHRoaXMuZW1pdE1lc3NhZ2UodS51c2VybmFtZSwgbWVzc2FnZSk7XG4gICAgICB9XG4gICAgKTtcbiAgfVxufSIsIi8vIGNvbG9ycyBmb3IgdGhlIGNoYXJ0c1xuLy8gdGFrZW4gZnJvbTogaHR0cHM6Ly9mbGF0dWljb2xvcnMuY29tL1xuY29uc3QgY29sb3JzOiBBcnJheTxzdHJpbmc+ID0gW1xuICBcIiMzNDk4ZGJcIixcbiAgXCIjZjFjNDBmXCIsXG4gIFwiI2U3NGMzY1wiLFxuICBcIiMzNDk4ZGJcIixcbiAgXCIjMmVjYzcxXCIsXG4gIFwiIzFhYmM5Y1wiLFxuICBcIiM5YjU5YjZcIixcbiAgXCIjZjFjNDBmXCIsXG4gIFwiI2U2N2UyMlwiLFxuICBcIiNlNzRjM2NcIixcbiAgXCIjZWNmMGYxXCIsXG5dO1xuLy8gZXhwb3J0IGNvbG9yc1xuZXhwb3J0IHsgY29sb3JzIH07XG5cbmV4cG9ydCBmdW5jdGlvbiBSR0IySGV4KHI6IG51bWJlciwgZzogbnVtYmVyLCBiOiBudW1iZXIsIGxlYWRpbmdIYXNoOiBib29sZWFuID0gdHJ1ZSk6IHN0cmluZyB7XG4gIGNvbnN0IHJnYjogbnVtYmVyID0gKChyIDw8IDE2KSB8IChnIDw8IDgpIHwgYikgJiAweGZmZmZmZjtcbiAgY29uc3QgaGV4ID0gcmdiLnRvU3RyaW5nKDE2KTtcbiAgcmV0dXJuIChsZWFkaW5nSGFzaCA/IFwiI1wiIDogXCJcIikgKyBoZXg7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBIZXgyUkdCKGhleDogc3RyaW5nKTogQXJyYXk8bnVtYmVyPiB7XG4gIGlmIChoZXguc3RhcnRzV2l0aChcIiNcIikpIHtcbiAgICBoZXggPSBoZXguc3Vic3RyaW5nKDEpO1xuICB9XG5cbiAgY29uc3QgcmdiOiBudW1iZXIgPSBwYXJzZUludChoZXgsIDE2KTtcblxuICByZXR1cm4gW1xuICAgIC8qIFIgKi8gKHJnYiA+PiAxNikgJiAweGZmLFxuICAgIC8qIEcgKi8gKHJnYiA+PiA4KSAmIDB4ZmYsXG4gICAgLyogQiAqLyByZ2IgJiAweGZmLFxuICBdO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZGFya2VuUkdCQ29sb3IoXG4gIHI6IG51bWJlcixcbiAgZzogbnVtYmVyLFxuICBiOiBudW1iZXIsXG4gIG1wOiBudW1iZXJcbik6IHN0cmluZyB7XG4gIHIgPSBNYXRoLm1heCgwLCByICogbXApO1xuICBnID0gTWF0aC5tYXgoMCwgZyAqIG1wKTtcbiAgYiA9IE1hdGgubWF4KDAsIGIgKiBtcCk7XG4gIHJldHVybiBSR0IySGV4KHIsIGcsIGIpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZGFya2VuSGV4Q29sb3IoaGV4OiBzdHJpbmcsIG1wOiBudW1iZXIpOiBzdHJpbmcge1xuICBjb25zdCByZ2IgPSBIZXgyUkdCKGhleCk7XG4gIGNvbnN0IGhleDIgPSBkYXJrZW5SR0JDb2xvcihyZ2JbMF0sIHJnYlsxXSwgcmdiWzJdLCBtcCk7XG4gIHJldHVybiBoZXgyO1xufVxuIiwiaW1wb3J0IHsgRXZlbnRFbWl0dGVyIH0gZnJvbSBcImV2ZW50c1wiO1xuXG5leHBvcnQgY2xhc3MgSm9iIGV4dGVuZHMgRXZlbnRFbWl0dGVyIHtcbiAgcHJpdmF0ZSB0aW1lcjogbnVtYmVyIHwgbnVsbDtcblxuICBwcml2YXRlIGN1cnJlbnQ6IG51bWJlciA9IDA7XG4gIHByaXZhdGUgY3VycmVudFBpbmc6IG51bWJlciA9IDA7XG5cbiAgY29uc3RydWN0b3IoXG4gICAgcHVibGljIHRpbWVvdXQ6IG51bWJlciA9IDEwLCAvLyBpbiBzXG4gICAgcHVibGljIHJlcXVpcmVkUGluZ3MgPSAxXG4gICkge1xuICAgIHN1cGVyKCk7XG4gIH1cblxuICAvKipcbiAgICogVGhpcyBpbnRlcm5hbCBtZXRob2QgaXMgZXhlY3V0ZWQgZXZlcnkgc2Vjb25kIGFzIGxvbmcgYXMgdGhlIHRpbWVyIGlzIHJ1bm5pbmcuXG4gICAqL1xuICBwcml2YXRlIG9uVGltZSgpOiB2b2lkIHtcbiAgICB0aGlzLmN1cnJlbnQrKztcbiAgICBpZiAodGhpcy5jdXJyZW50ID49IHRoaXMudGltZW91dCkge1xuICAgICAgdGhpcy5zdG9wVGltZXIoKTtcbiAgICAgIHRoaXMuZW1pdChcImNhbmNlbFwiKTtcbiAgICB9XG4gIH1cblxuICBwdWJsaWMgcGluZygpOiB2b2lkIHtcbiAgICB0aGlzLmN1cnJlbnRQaW5nKys7XG4gICAgaWYgKHRoaXMuY3VycmVudFBpbmcgPCB0aGlzLnJlcXVpcmVkUGluZ3MpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB0aGlzLmN1cnJlbnQgPSAwO1xuICAgIHRoaXMuY3VycmVudFBpbmcgPSAwO1xuXG4gICAgaWYgKHRoaXMudGltZXIgPT0gbnVsbCkge1xuICAgICAgdGhpcy50aW1lciA9IHdpbmRvdy5zZXRJbnRlcnZhbCgoKSA9PiB0aGlzLm9uVGltZSgpLCAxMDAwKTtcbiAgICAgIHRoaXMuZW1pdChcInN0YXJ0XCIpO1xuICAgIH1cbiAgfVxuXG4gIHB1YmxpYyBzdG9wVGltZXIoKTogdm9pZCB7XG4gICAgaWYgKHRoaXMuaXNBY3RpdmUoKSkge1xuICAgICAgd2luZG93LmNsZWFySW50ZXJ2YWwodGhpcy50aW1lcik7XG4gICAgICB0aGlzLnRpbWVyID0gbnVsbDtcbiAgICB9XG5cbiAgICAvLyByZXNldCB2YWx1ZXNcbiAgICB0aGlzLmN1cnJlbnQgPSAwO1xuICAgIHRoaXMuY3VycmVudFBpbmcgPSAwO1xuICB9XG5cbiAgcHVibGljIGlzQWN0aXZlKCk6IGJvb2xlYW4ge1xuICAgIHJldHVybiB0aGlzLnRpbWVyICE9IG51bGw7XG4gIH1cbn1cbiIsImV4cG9ydCBpbnRlcmZhY2UgUmVhY3Rpb24ge1xuICBzb3J0aW5nOiBudW1iZXI7XG4gIGRpc3BsYXk6IHN0cmluZztcbiAga2V5d29yZHM6IHN0cmluZ1tdO1xufVxuXG5jb25zdCByZWFjdGlvbnM6IFJlYWN0aW9uW10gPSBbXG4gIHtcbiAgICBzb3J0aW5nOiAwLFxuICAgIGRpc3BsYXk6IFwiKzFcIixcbiAgICBrZXl3b3JkczogW1wiKzFcIiwgXCIxXCIsIFwieWVzXCIsIFwieWVcIiwgXCJqYVwiXSxcbiAgfSxcbiAge1xuICAgIHNvcnRpbmc6IDIsXG4gICAgZGlzcGxheTogXCJ+XCIsXG4gICAga2V5d29yZHM6IFtcIjJcIiwgXCJ3dGZcIl0sXG4gIH0sXG4gIHtcbiAgICBzb3J0aW5nOiAzLFxuICAgIGRpc3BsYXk6IFwiLTFcIixcbiAgICBrZXl3b3JkczogW1wiLTFcIiwgXCIwXCIsIFwibm9cIiwgXCJuZWluXCJdLFxuICB9LFxuXTtcblxuLyoqXG4gKiBUaGlzIG1ldGhvZCBjaGVja3MgaWYgdGhlIG1lc3NhZ2UgY29udGFpbnMgYSBrZXl3b3JkIG9mIGEgcmVhY3Rpb24gYW5kIHJldHVybnMgaXQgaWYgb25lIHdhcyBmb3VuZC4gXG4gKiBPdGhlcndpc2UgbnVsbFxuICogXG4gKiBAcGFyYW0ga2V5d29yZCBLZXl3b3JkIHRvIGNoZWNrXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBnZXRSZWFjdGlvbkJ5S2V5d29yZChrZXl3b3JkOiBzdHJpbmcpOiBSZWFjdGlvbiB8IG51bGwge1xuICBrZXl3b3JkID0ga2V5d29yZC50b0xvd2VyQ2FzZSgpO1xuXG4gIGZvciAobGV0IGk6IG51bWJlciA9IDA7IGkgPCByZWFjdGlvbnMubGVuZ3RoOyBpKyspIHtcbiAgICBjb25zdCByZWFjdGlvbjogUmVhY3Rpb24gPSByZWFjdGlvbnNbaV07XG4gICAgZm9yIChsZXQgajogbnVtYmVyID0gMDsgaiA8IHJlYWN0aW9uLmtleXdvcmRzLmxlbmd0aDsgaisrKSB7XG4gICAgICBpZiAocmVhY3Rpb24ua2V5d29yZHNbal0gPT0ga2V5d29yZCkge1xuICAgICAgICByZXR1cm4gcmVhY3Rpb247XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIG51bGw7XG59XG5cbmV4cG9ydCB7IHJlYWN0aW9ucyB9OyIsImltcG9ydCB7IEV2ZW50RW1pdHRlciB9IGZyb20gXCJldmVudHNcIjtcbmltcG9ydCB7IENoYXJ0IH0gZnJvbSBcIi4vY2hhcnRzL2NoYXJ0XCI7XG5pbXBvcnQgeyBDaGF0IH0gZnJvbSBcIi4vY2hhdHMvY2hhdFwiO1xuaW1wb3J0IHsgSm9iIH0gZnJvbSBcIi4vam9iXCI7XG5pbXBvcnQgeyBnZXRSZWFjdGlvbkJ5S2V5d29yZCwgUmVhY3Rpb24sIHJlYWN0aW9ucyB9IGZyb20gXCIuL2tleXdvcmRzXCI7XG5cbmV4cG9ydCBlbnVtIFVwZGF0ZU1vZGUge1xuICBJTkNSRU1FTlQgPSAxLFxuICBERUNSRU1FTlQgPSAtMSxcbn1cblxuLyoqXG4gKiBUaGlzIGNsYXNzIHN0b3JlcyB0aGUgcmVhY3Rpb24gY291bnRzIHRlbXBvcmFyaWx5LlxuICogSXQgd2FpdHMgZm9yIGluY29taW5nIG1lc3NhZ2VzIG9mIHRoZSBjaGF0IHtDaGF0I29uTWVzc2FnZX0gYW5kIGNoZWNrcyB0aGVtIGZvciByZWFjdGlvbnMuXG4gKiBJZiBhIHJlYWN0aW9uIHdhcyBmb3VuZCwgaXQgaXMgY291bnRlZCBhbmQgdGhlIGpvYiBpcyBub3RpZmllZC5cbiAqL1xuZXhwb3J0IGNsYXNzIFJlYWN0aW9uU3RvcmFnZSBleHRlbmRzIEV2ZW50RW1pdHRlciB7XG4gIHByaXZhdGUgdXNlcnM6IE1hcDxzdHJpbmcsIFJlYWN0aW9uPiA9IG5ldyBNYXAoKTtcbiAgcHJpdmF0ZSByZWFjdGlvbnM6IE1hcDxSZWFjdGlvbiwgbnVtYmVyPiA9IG5ldyBNYXAoKTtcblxuICBjb25zdHJ1Y3RvcihcbiAgICBwdWJsaWMgY2hhdDogQ2hhdCxcbiAgICBwdWJsaWMgam9iOiBKb2IsXG4gICAgcHVibGljIGR1cGxpY2F0aW9uQ2hlY2tpbmc6IGJvb2xlYW4gPSB0cnVlXG4gICkge1xuICAgIHN1cGVyKCk7XG5cbiAgICB0aGlzLmNoYXQub25NZXNzYWdlKCh1c2VybmFtZTogc3RyaW5nLCBtZXNzYWdlOiBzdHJpbmcpID0+IHtcbiAgICAgIHRoaXMub25NZXNzYWdlKHVzZXJuYW1lLCBtZXNzYWdlKTtcbiAgICB9KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBJbnRlcm5hbCBtZXRob2QsIHdoaWNoIGlzIGNhbGxlZCBhcyBzb29uIGFzIGEgbWVzc2FnZSBpcyByZWNlaXZlZC5cbiAgICpcbiAgICogQHBhcmFtIHVzZXJuYW1lIFVzZXJuYW1lIG9mIHNlbmRlclxuICAgKiBAcGFyYW0gbWVzc2FnZSBNZXNzYWdlIGFzIHRleHRcbiAgICovXG4gIHByaXZhdGUgb25NZXNzYWdlKHVzZXJuYW1lOiBzdHJpbmcsIG1lc3NhZ2U6IHN0cmluZykge1xuICAgIC8vIGNoZWNrIGlmIHRoZSB1c2VybmFtZSB3YXMgbnVsbFxuICAgIC8vIHdlIG5lZWQgYSB1c2VybmFtZSBmb3IgZHVwbGljYXRpb24gY2hlY2tpbmdcbiAgICBpZiAodXNlcm5hbWUgPT0gbnVsbCB8fCBtZXNzYWdlID09IG51bGwpIHtcbiAgICAgIGNvbnNvbGUubG9nKFwiW1N0b3JhZ2VdXCIsIFwiTnVsbDpcIiwgdXNlcm5hbWUsIFwib3JcIiwgbWVzc2FnZSk7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgLy8gZ2V0IHJlYWN0aW9ucyBmcm9tIG1lc3NhZ2VcbiAgICBjb25zdCByZWFjdGlvbjogUmVhY3Rpb24gPSBnZXRSZWFjdGlvbkJ5S2V5d29yZChtZXNzYWdlKTtcbiAgICAvLyBubyByZWFjdGlvbiBmb3VuZFxuICAgIGlmIChyZWFjdGlvbiA9PSBudWxsKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgLy8gcGluZyBqb2JcbiAgICB0aGlzLmpvYi5waW5nKCk7XG5cbiAgICAvLyByZWFjdCB0byByZWFjdGlvblxuICAgIHRoaXMucmVhY3QodXNlcm5hbWUsIHJlYWN0aW9uKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIHRoZSBudW1iZXIgb2YgcmVhY3Rpb25zXG4gICAqXG4gICAqIEBwYXJhbSByZWFjdGlvbiBOdW1iZXIgb2YgcmVhY3Rpb25zXG4gICAqIEBkZWZhdWx0IDBcbiAgICovXG4gIHB1YmxpYyBnZXRSZWFjdGlvbihyZWFjdGlvbjogUmVhY3Rpb24pOiBudW1iZXIge1xuICAgIHJldHVybiB0aGlzLnJlYWN0aW9ucy5nZXQocmVhY3Rpb24pID8/IDA7XG4gIH1cblxuICAvKipcbiAgICogVXBkYXRlcyB0aGUgbnVtYmVyIG9mIGEgcmVhY3Rpb24uXG4gICAqXG4gICAqIElmIElOQ1JFTUVOVCB3YXMgc3BlY2lmaWVkIGluIHttb2RlfSwgdGhlIG51bWJlciBvZiByZWFjdGlvbnMgaXMgaW5jcmVhc2VkIGJ5IDEuXG4gICAqIElmIERFQ1JFTUVOVCBpcyBzcGVjaWZpZWQsIHRoZSBudW1iZXIgaXMgZGVjcmVhc2VkIGJ5IDEuXG4gICAqXG4gICAqIEBwYXJhbSByZWFjdGlvbiBSZWFjdGlvblxuICAgKiBAcGFyYW0gbW9kZSBVcGRhdGVNb2RlOiBJTkNSRU1FTlQgb3IgREVDUkVNRU5UXG4gICAqL1xuICBwdWJsaWMgdXBkYXRlUmVhY3Rpb24ocmVhY3Rpb246IFJlYWN0aW9uLCBtb2RlOiBVcGRhdGVNb2RlKTogbnVtYmVyIHtcbiAgICBsZXQgdmFsdWUgPSB0aGlzLmdldFJlYWN0aW9uKHJlYWN0aW9uKTtcblxuICAgIC8vIHVwZGF0ZSB2YWx1ZVxuICAgIHN3aXRjaCAobW9kZSkge1xuICAgICAgY2FzZSBVcGRhdGVNb2RlLklOQ1JFTUVOVDpcbiAgICAgICAgdmFsdWUrKztcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIFVwZGF0ZU1vZGUuREVDUkVNRU5UOlxuICAgICAgICB2YWx1ZS0tO1xuICAgICAgICBicmVhaztcbiAgICB9XG5cbiAgICB0aGlzLnJlYWN0aW9ucy5zZXQocmVhY3Rpb24sIHZhbHVlKTtcblxuICAgIHRoaXMuZW1pdChcInVwZGF0ZVwiLCByZWFjdGlvbiwgdmFsdWUsIG1vZGUpO1xuICAgIHJldHVybiB2YWx1ZTtcbiAgfVxuXG4gIC8qKlxuICAgKiBUaGlzIG1ldGhvZCBpcyBjYWxsZWQgd2hlbiBhIHVzZXIgaGFzIHJlc3BvbmRlZC4gQW1vbmcgb3RoZXIgdGhpbmdzLCBpdCBjaGVja3Mgd2hldGhlciB0aGUgdXNlciBoYXMgYWxyZWFkeSB2b3RlZC5cbiAgICpcbiAgICogSWYgaGUgaGFzIGFscmVhZHkgdm90ZWQgd2l0aCB0aGUgc2FtZSByZWFjdGlvbiwgbm90aGluZyBmdXJ0aGVyIGlzIGRvbmUuXG4gICAqIElmIGhlIGhhcyB2b3RlZCB3aXRoIGFub3RoZXIgcmVhY3Rpb24sIHRoaXMgaXMgc3VidHJhY3RlZCBhbmQgYWRkZWQgdG8gdGhlIG5ldyByZWFjdGlvbi5cbiAgICpcbiAgICogQHBhcmFtIHVzZXJuYW1lIFJlYWN0b3IncyB1c2VybmFtZVxuICAgKiBAcGFyYW0gcmVhY3Rpb24gUmVhY3Rpb25cbiAgICovXG4gIHB1YmxpYyByZWFjdCh1c2VybmFtZTogc3RyaW5nLCByZWFjdGlvbjogUmVhY3Rpb24pIHtcbiAgICAvLyBjaGVjayBmb3IgZHVwbGljYXRlcz9cbiAgICBpZiAodGhpcy5kdXBsaWNhdGlvbkNoZWNraW5nID09IHRydWUpIHtcbiAgICAgIC8vIGNoZWNrIGlmIHRoZSB1c2VyIGhhZCBhbnkgcHJldmlvdXMgcmVhY3Rpb25zXG4gICAgICBpZiAodGhpcy51c2Vycy5oYXModXNlcm5hbWUpKSB7XG4gICAgICAgIGNvbnN0IG9sZFJlYWN0aW9uOiBSZWFjdGlvbiA9IHRoaXMudXNlcnMuZ2V0KHVzZXJuYW1lKTtcblxuICAgICAgICAvLyBpZiB0aGUgcmVhY3Rpb25zIGFyZSB0aGUgc2FtZSwgaWdub3JlIHJlYWN0aW9uXG4gICAgICAgIGlmIChvbGRSZWFjdGlvbiA9PSByZWFjdGlvbikge1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIG90aGVyd2lzZTogZGVjcmVtZW50IDEgZnJvbSB0aGUgb2xkIHJlYWN0aW9uXG4gICAgICAgIHRoaXMudXBkYXRlUmVhY3Rpb24ob2xkUmVhY3Rpb24sIFVwZGF0ZU1vZGUuREVDUkVNRU5UKTtcbiAgICAgIH1cblxuICAgICAgLy8gbGluayB0byB1c2VybmFtZVxuICAgICAgdGhpcy51c2Vycy5zZXQodXNlcm5hbWUsIHJlYWN0aW9uKTtcbiAgICB9XG5cbiAgICAvLyBpbmNyZW1lbnQgcmVhY3Rpb25cbiAgICB0aGlzLnVwZGF0ZVJlYWN0aW9uKHJlYWN0aW9uLCBVcGRhdGVNb2RlLklOQ1JFTUVOVCk7XG5cbiAgICAvLyBlbWl0IHVwZGF0ZVxuICAgIHRoaXMuZW1pdChcInJlYWN0aW9uXCIsIHVzZXJuYW1lLCByZWFjdGlvbik7XG4gIH1cblxuICAvKipcbiAgICogUmVzZXRzIGFsbCBzdG9yZWQgcmVhY3Rpb24gY291bnRzXG4gICAqL1xuICBwdWJsaWMgcmVzZXRTdG9yYWdlKCk6IHZvaWQge1xuICAgIHRoaXMudXNlcnMuY2xlYXIoKTtcbiAgICB0aGlzLnJlYWN0aW9ucy5jbGVhcigpO1xuXG4gICAgY29uc29sZS5sb2coXCJbU3RvcmFnZV1cIiwgXCJSZXNldCB1c2VycyBhbmQgcmVhY3Rpb25zIVwiKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIHRoZSB2YWx1ZXMgb2YgdGhlIHJlYWN0aW9ucyBpbiB0aGUgb3JkZXIgZ2l2ZW4gZm9yIHRoZSByZWFjdGlvbnMgdW5kZXIgdGhlIHtSZWFjdGlvbi5zb3J0fSBcInNvcnRpbmdcIiBudW1iZXIgKGFzY2VuZGluZykuXG4gICAqIElmIHRoZXJlIHdhcyBubyByZWFjdGlvbiwgMCBpcyByZXR1cm5lZC5cbiAgICogQnV0IHRoZSBsZW5ndGggb2YgdGhlIGFycmF5IGlzIGFsd2F5cyB0aGUgbGVuZ3RoIG9mIHtyZWFjdGlvbnN9XG4gICAqXG4gICAqIEByZXR1cm5zIFZhbHVlcyBvZiB0aGUgcmVhY3Rpb25zXG4gICAqL1xuICBwdWJsaWMgZ2V0VmFsdWVzKCk6IG51bWJlcltdIHtcbiAgICBjb25zdCBrZXlzOiBudW1iZXJbXSA9IFtdO1xuICAgIGNvbnN0IG1hcDogTWFwPG51bWJlciwgbnVtYmVyPiA9IG5ldyBNYXAoKTtcblxuICAgIC8vIGNvbGxlY3QgcmVhY3Rpb25zXG4gICAgcmVhY3Rpb25zLmZvckVhY2goKHJlYWN0aW9uOiBSZWFjdGlvbikgPT4ge1xuICAgICAgbWFwLnNldChyZWFjdGlvbi5zb3J0aW5nLCB0aGlzLmdldFJlYWN0aW9uKHJlYWN0aW9uKSk7XG4gICAgICBrZXlzLnB1c2gocmVhY3Rpb24uc29ydGluZyk7XG4gICAgfSk7XG5cbiAgICAvLyBUb0RvOiBSZXdvcmsgbXkgc2hpdHR5IHNvcnRpbmdcbiAgICAvLyBvciBldmVuIGJldHRlcjogcmV3b3JrIHRoaXMgd2hvbGUgbWV0aG9kXG4gICAgLy8gb3IgZXZlbnQgYmV0dGVyIGJldHRlciBiZXR0ZXI6IHJld29yayB0aGlzIHdob2xlIHByb2plY3RcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGtleXMubGVuZ3RoOyBpKyspIHtcbiAgICAgIGZvciAobGV0IGogPSAwOyBqIDwga2V5cy5sZW5ndGg7IGorKykge1xuICAgICAgICBpZiAoaSA9PSBqKSB7XG4gICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCBhID0ga2V5c1tpXTtcbiAgICAgICAgY29uc3QgYiA9IGtleXNbal07XG5cbiAgICAgICAgaWYgKGEgPCBiKSB7XG4gICAgICAgICAga2V5c1tpXSA9IGI7XG4gICAgICAgICAga2V5c1tqXSA9IGE7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICBjb25zdCByZXM6IG51bWJlcltdID0gW107XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBrZXlzLmxlbmd0aDsgaSsrKSB7XG4gICAgICByZXMucHVzaChtYXAuZ2V0KGtleXNbaV0pKTtcbiAgICB9XG4gICAgcmV0dXJuIHJlcztcbiAgfVxuXG4gIC8qKlxuICAgKiBEcmF3cyB0aGUgY2hhcnQgd2l0aCB0aGUgdmFsdWVzXG4gICAqIEBwYXJhbSBjaGFydCBDaGFydFxuICAgKi9cbiAgcHVibGljIGRyYXdDaGFydChjaGFydDogQ2hhcnQpIHtcbiAgICBjb25zdCB2YWx1ZXM6IG51bWJlcltdID0gdGhpcy5nZXRWYWx1ZXMoKTtcbiAgICBjaGFydC5kcmF3KHZhbHVlcywgdHJ1ZSwgdHJ1ZSk7XG4gIH1cbn1cbiIsIi8vIFRoZSBtb2R1bGUgY2FjaGVcbnZhciBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX18gPSB7fTtcblxuLy8gVGhlIHJlcXVpcmUgZnVuY3Rpb25cbmZ1bmN0aW9uIF9fd2VicGFja19yZXF1aXJlX18obW9kdWxlSWQpIHtcblx0Ly8gQ2hlY2sgaWYgbW9kdWxlIGlzIGluIGNhY2hlXG5cdGlmKF9fd2VicGFja19tb2R1bGVfY2FjaGVfX1ttb2R1bGVJZF0pIHtcblx0XHRyZXR1cm4gX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fW21vZHVsZUlkXS5leHBvcnRzO1xuXHR9XG5cdC8vIENyZWF0ZSBhIG5ldyBtb2R1bGUgKGFuZCBwdXQgaXQgaW50byB0aGUgY2FjaGUpXG5cdHZhciBtb2R1bGUgPSBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX19bbW9kdWxlSWRdID0ge1xuXHRcdGlkOiBtb2R1bGVJZCxcblx0XHQvLyBubyBtb2R1bGUubG9hZGVkIG5lZWRlZFxuXHRcdGV4cG9ydHM6IHt9XG5cdH07XG5cblx0Ly8gRXhlY3V0ZSB0aGUgbW9kdWxlIGZ1bmN0aW9uXG5cdF9fd2VicGFja19tb2R1bGVzX19bbW9kdWxlSWRdLmNhbGwobW9kdWxlLmV4cG9ydHMsIG1vZHVsZSwgbW9kdWxlLmV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pO1xuXG5cdC8vIFJldHVybiB0aGUgZXhwb3J0cyBvZiB0aGUgbW9kdWxlXG5cdHJldHVybiBtb2R1bGUuZXhwb3J0cztcbn1cblxuIiwiLy8gZ2V0RGVmYXVsdEV4cG9ydCBmdW5jdGlvbiBmb3IgY29tcGF0aWJpbGl0eSB3aXRoIG5vbi1oYXJtb255IG1vZHVsZXNcbl9fd2VicGFja19yZXF1aXJlX18ubiA9IChtb2R1bGUpID0+IHtcblx0dmFyIGdldHRlciA9IG1vZHVsZSAmJiBtb2R1bGUuX19lc01vZHVsZSA/XG5cdFx0KCkgPT4gbW9kdWxlWydkZWZhdWx0J10gOlxuXHRcdCgpID0+IG1vZHVsZTtcblx0X193ZWJwYWNrX3JlcXVpcmVfXy5kKGdldHRlciwgeyBhOiBnZXR0ZXIgfSk7XG5cdHJldHVybiBnZXR0ZXI7XG59OyIsIi8vIGRlZmluZSBnZXR0ZXIgZnVuY3Rpb25zIGZvciBoYXJtb255IGV4cG9ydHNcbl9fd2VicGFja19yZXF1aXJlX18uZCA9IChleHBvcnRzLCBkZWZpbml0aW9uKSA9PiB7XG5cdGZvcih2YXIga2V5IGluIGRlZmluaXRpb24pIHtcblx0XHRpZihfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZGVmaW5pdGlvbiwga2V5KSAmJiAhX193ZWJwYWNrX3JlcXVpcmVfXy5vKGV4cG9ydHMsIGtleSkpIHtcblx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBrZXksIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBkZWZpbml0aW9uW2tleV0gfSk7XG5cdFx0fVxuXHR9XG59OyIsIl9fd2VicGFja19yZXF1aXJlX18uZyA9IChmdW5jdGlvbigpIHtcblx0aWYgKHR5cGVvZiBnbG9iYWxUaGlzID09PSAnb2JqZWN0JykgcmV0dXJuIGdsb2JhbFRoaXM7XG5cdHRyeSB7XG5cdFx0cmV0dXJuIHRoaXMgfHwgbmV3IEZ1bmN0aW9uKCdyZXR1cm4gdGhpcycpKCk7XG5cdH0gY2F0Y2ggKGUpIHtcblx0XHRpZiAodHlwZW9mIHdpbmRvdyA9PT0gJ29iamVjdCcpIHJldHVybiB3aW5kb3c7XG5cdH1cbn0pKCk7IiwiX193ZWJwYWNrX3JlcXVpcmVfXy5vID0gKG9iaiwgcHJvcCkgPT4gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwgcHJvcCkiLCIvLyBkZWZpbmUgX19lc01vZHVsZSBvbiBleHBvcnRzXG5fX3dlYnBhY2tfcmVxdWlyZV9fLnIgPSAoZXhwb3J0cykgPT4ge1xuXHRpZih0eXBlb2YgU3ltYm9sICE9PSAndW5kZWZpbmVkJyAmJiBTeW1ib2wudG9TdHJpbmdUYWcpIHtcblx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgU3ltYm9sLnRvU3RyaW5nVGFnLCB7IHZhbHVlOiAnTW9kdWxlJyB9KTtcblx0fVxuXHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7IHZhbHVlOiB0cnVlIH0pO1xufTsiLCIvLyBzdGFydHVwXG4vLyBMb2FkIGVudHJ5IG1vZHVsZVxuX193ZWJwYWNrX3JlcXVpcmVfXyg2MDcpO1xuLy8gVGhpcyBlbnRyeSBtb2R1bGUgdXNlZCAnZXhwb3J0cycgc28gaXQgY2FuJ3QgYmUgaW5saW5lZFxuIl0sInNvdXJjZVJvb3QiOiIifQ==