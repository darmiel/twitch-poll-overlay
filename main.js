(()=>{var e={982:(e,t,s)=>{"use strict";s.d(t,{Z:()=>a});var n=s(15),i=s.n(n),o=s(645),r=s.n(o)()(i());r.push([e.id,"","",{version:3,sources:[],names:[],mappings:"",sourceRoot:""}]);const a=r},645:e=>{"use strict";e.exports=function(e){var t=[];return t.toString=function(){return this.map((function(t){var s=e(t);return t[2]?"@media ".concat(t[2]," {").concat(s,"}"):s})).join("")},t.i=function(e,s,n){"string"==typeof e&&(e=[[null,e,""]]);var i={};if(n)for(var o=0;o<this.length;o++){var r=this[o][0];null!=r&&(i[r]=!0)}for(var a=0;a<e.length;a++){var c=[].concat(e[a]);n&&i[c[0]]||(s&&(c[2]?c[2]="".concat(s," and ").concat(c[2]):c[2]=s),t.push(c))}},t}},15:e=>{"use strict";function t(e,t){(null==t||t>e.length)&&(t=e.length);for(var s=0,n=new Array(t);s<t;s++)n[s]=e[s];return n}e.exports=function(e){var s,n,i=(n=4,function(e){if(Array.isArray(e))return e}(s=e)||function(e,t){if("undefined"!=typeof Symbol&&Symbol.iterator in Object(e)){var s=[],n=!0,i=!1,o=void 0;try{for(var r,a=e[Symbol.iterator]();!(n=(r=a.next()).done)&&(s.push(r.value),!t||s.length!==t);n=!0);}catch(e){i=!0,o=e}finally{try{n||null==a.return||a.return()}finally{if(i)throw o}}return s}}(s,n)||function(e,s){if(e){if("string"==typeof e)return t(e,s);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?t(e,s):void 0}}(s,n)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),o=i[1],r=i[3];if("function"==typeof btoa){var a=btoa(unescape(encodeURIComponent(JSON.stringify(r)))),c="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(a),h="/*# ".concat(c," */"),l=r.sources.map((function(e){return"/*# sourceURL=".concat(r.sourceRoot||"").concat(e," */")}));return[o].concat(l).concat([h]).join("\n")}return[o].join("\n")}},187:e=>{"use strict";var t,s="object"==typeof Reflect?Reflect:null,n=s&&"function"==typeof s.apply?s.apply:function(e,t,s){return Function.prototype.apply.call(e,t,s)};t=s&&"function"==typeof s.ownKeys?s.ownKeys:Object.getOwnPropertySymbols?function(e){return Object.getOwnPropertyNames(e).concat(Object.getOwnPropertySymbols(e))}:function(e){return Object.getOwnPropertyNames(e)};var i=Number.isNaN||function(e){return e!=e};function o(){o.init.call(this)}e.exports=o,e.exports.once=function(e,t){return new Promise((function(s,n){function i(){void 0!==o&&e.removeListener("error",o),s([].slice.call(arguments))}var o;"error"!==t&&(o=function(s){e.removeListener(t,i),n(s)},e.once("error",o)),e.once(t,i)}))},o.EventEmitter=o,o.prototype._events=void 0,o.prototype._eventsCount=0,o.prototype._maxListeners=void 0;var r=10;function a(e){if("function"!=typeof e)throw new TypeError('The "listener" argument must be of type Function. Received type '+typeof e)}function c(e){return void 0===e._maxListeners?o.defaultMaxListeners:e._maxListeners}function h(e,t,s,n){var i,o,r,h;if(a(s),void 0===(o=e._events)?(o=e._events=Object.create(null),e._eventsCount=0):(void 0!==o.newListener&&(e.emit("newListener",t,s.listener?s.listener:s),o=e._events),r=o[t]),void 0===r)r=o[t]=s,++e._eventsCount;else if("function"==typeof r?r=o[t]=n?[s,r]:[r,s]:n?r.unshift(s):r.push(s),(i=c(e))>0&&r.length>i&&!r.warned){r.warned=!0;var l=new Error("Possible EventEmitter memory leak detected. "+r.length+" "+String(t)+" listeners added. Use emitter.setMaxListeners() to increase limit");l.name="MaxListenersExceededWarning",l.emitter=e,l.type=t,l.count=r.length,h=l,console&&console.warn&&console.warn(h)}return e}function l(){if(!this.fired)return this.target.removeListener(this.type,this.wrapFn),this.fired=!0,0===arguments.length?this.listener.call(this.target):this.listener.apply(this.target,arguments)}function u(e,t,s){var n={fired:!1,wrapFn:void 0,target:e,type:t,listener:s},i=l.bind(n);return i.listener=s,n.wrapFn=i,i}function m(e,t,s){var n=e._events;if(void 0===n)return[];var i=n[t];return void 0===i?[]:"function"==typeof i?s?[i.listener||i]:[i]:s?function(e){for(var t=new Array(e.length),s=0;s<t.length;++s)t[s]=e[s].listener||e[s];return t}(i):f(i,i.length)}function p(e){var t=this._events;if(void 0!==t){var s=t[e];if("function"==typeof s)return 1;if(void 0!==s)return s.length}return 0}function f(e,t){for(var s=new Array(t),n=0;n<t;++n)s[n]=e[n];return s}Object.defineProperty(o,"defaultMaxListeners",{enumerable:!0,get:function(){return r},set:function(e){if("number"!=typeof e||e<0||i(e))throw new RangeError('The value of "defaultMaxListeners" is out of range. It must be a non-negative number. Received '+e+".");r=e}}),o.init=function(){void 0!==this._events&&this._events!==Object.getPrototypeOf(this)._events||(this._events=Object.create(null),this._eventsCount=0),this._maxListeners=this._maxListeners||void 0},o.prototype.setMaxListeners=function(e){if("number"!=typeof e||e<0||i(e))throw new RangeError('The value of "n" is out of range. It must be a non-negative number. Received '+e+".");return this._maxListeners=e,this},o.prototype.getMaxListeners=function(){return c(this)},o.prototype.emit=function(e){for(var t=[],s=1;s<arguments.length;s++)t.push(arguments[s]);var i="error"===e,o=this._events;if(void 0!==o)i=i&&void 0===o.error;else if(!i)return!1;if(i){var r;if(t.length>0&&(r=t[0]),r instanceof Error)throw r;var a=new Error("Unhandled error."+(r?" ("+r.message+")":""));throw a.context=r,a}var c=o[e];if(void 0===c)return!1;if("function"==typeof c)n(c,this,t);else{var h=c.length,l=f(c,h);for(s=0;s<h;++s)n(l[s],this,t)}return!0},o.prototype.addListener=function(e,t){return h(this,e,t,!1)},o.prototype.on=o.prototype.addListener,o.prototype.prependListener=function(e,t){return h(this,e,t,!0)},o.prototype.once=function(e,t){return a(t),this.on(e,u(this,e,t)),this},o.prototype.prependOnceListener=function(e,t){return a(t),this.prependListener(e,u(this,e,t)),this},o.prototype.removeListener=function(e,t){var s,n,i,o,r;if(a(t),void 0===(n=this._events))return this;if(void 0===(s=n[e]))return this;if(s===t||s.listener===t)0==--this._eventsCount?this._events=Object.create(null):(delete n[e],n.removeListener&&this.emit("removeListener",e,s.listener||t));else if("function"!=typeof s){for(i=-1,o=s.length-1;o>=0;o--)if(s[o]===t||s[o].listener===t){r=s[o].listener,i=o;break}if(i<0)return this;0===i?s.shift():function(e,t){for(;t+1<e.length;t++)e[t]=e[t+1];e.pop()}(s,i),1===s.length&&(n[e]=s[0]),void 0!==n.removeListener&&this.emit("removeListener",e,r||t)}return this},o.prototype.off=o.prototype.removeListener,o.prototype.removeAllListeners=function(e){var t,s,n;if(void 0===(s=this._events))return this;if(void 0===s.removeListener)return 0===arguments.length?(this._events=Object.create(null),this._eventsCount=0):void 0!==s[e]&&(0==--this._eventsCount?this._events=Object.create(null):delete s[e]),this;if(0===arguments.length){var i,o=Object.keys(s);for(n=0;n<o.length;++n)"removeListener"!==(i=o[n])&&this.removeAllListeners(i);return this.removeAllListeners("removeListener"),this._events=Object.create(null),this._eventsCount=0,this}if("function"==typeof(t=s[e]))this.removeListener(e,t);else if(void 0!==t)for(n=t.length-1;n>=0;n--)this.removeListener(e,t[n]);return this},o.prototype.listeners=function(e){return m(this,e,!0)},o.prototype.rawListeners=function(e){return m(this,e,!1)},o.listenerCount=function(e,t){return"function"==typeof e.listenerCount?e.listenerCount(t):p.call(e,t)},o.prototype.listenerCount=p,o.prototype.eventNames=function(){return this._eventsCount>0?t(this._events):[]}},153:(e,t,s)=>{"use strict";s.r(t),s.d(t,{default:()=>r});var n=s(379),i=s.n(n),o=s(982);i()(o.Z,{insert:"head",singleton:!1});const r=o.Z.locals||{}},379:(e,t,s)=>{"use strict";var n,i=function(){var e={};return function(t){if(void 0===e[t]){var s=document.querySelector(t);if(window.HTMLIFrameElement&&s instanceof window.HTMLIFrameElement)try{s=s.contentDocument.head}catch(e){s=null}e[t]=s}return e[t]}}(),o=[];function r(e){for(var t=-1,s=0;s<o.length;s++)if(o[s].identifier===e){t=s;break}return t}function a(e,t){for(var s={},n=[],i=0;i<e.length;i++){var a=e[i],c=t.base?a[0]+t.base:a[0],h=s[c]||0,l="".concat(c," ").concat(h);s[c]=h+1;var u=r(l),m={css:a[1],media:a[2],sourceMap:a[3]};-1!==u?(o[u].references++,o[u].updater(m)):o.push({identifier:l,updater:d(m,t),references:1}),n.push(l)}return n}function c(e){var t=document.createElement("style"),n=e.attributes||{};if(void 0===n.nonce){var o=s.nc;o&&(n.nonce=o)}if(Object.keys(n).forEach((function(e){t.setAttribute(e,n[e])})),"function"==typeof e.insert)e.insert(t);else{var r=i(e.insert||"head");if(!r)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");r.appendChild(t)}return t}var h,l=(h=[],function(e,t){return h[e]=t,h.filter(Boolean).join("\n")});function u(e,t,s,n){var i=s?"":n.media?"@media ".concat(n.media," {").concat(n.css,"}"):n.css;if(e.styleSheet)e.styleSheet.cssText=l(t,i);else{var o=document.createTextNode(i),r=e.childNodes;r[t]&&e.removeChild(r[t]),r.length?e.insertBefore(o,r[t]):e.appendChild(o)}}function m(e,t,s){var n=s.css,i=s.media,o=s.sourceMap;if(i?e.setAttribute("media",i):e.removeAttribute("media"),o&&"undefined"!=typeof btoa&&(n+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(o))))," */")),e.styleSheet)e.styleSheet.cssText=n;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(n))}}var p=null,f=0;function d(e,t){var s,n,i;if(t.singleton){var o=f++;s=p||(p=c(t)),n=u.bind(null,s,o,!1),i=u.bind(null,s,o,!0)}else s=c(t),n=m.bind(null,s,t),i=function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(s)};return n(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap)return;n(e=t)}else i()}}e.exports=function(e,t){(t=t||{}).singleton||"boolean"==typeof t.singleton||(t.singleton=(void 0===n&&(n=Boolean(window&&document&&document.all&&!window.atob)),n));var s=a(e=e||[],t);return function(e){if(e=e||[],"[object Array]"===Object.prototype.toString.call(e)){for(var n=0;n<s.length;n++){var i=r(s[n]);o[i].references--}for(var c=a(e,t),h=0;h<s.length;h++){var l=r(s[h]);0===o[l].references&&(o[l].updater(),o.splice(l,1))}s=c}}}},993:(e,t,s)=>{e.exports={client:s(839),Client:s(839)}},681:(e,t,s)=>{var n=s(887),i=s(49);e.exports=function(e,t){var s=null===i.get(e.url,null)?i.get(e.uri,null):i.get(e.url,null);if(i.isURL(s)||(s="https://api.twitch.tv/kraken"+("/"===s[0]?s:`/${s}`)),i.isNode())n(i.merge({method:"GET",json:!0},e,{url:s}),t);else if(i.isExtension()||i.isReactNative()){e=i.merge({url:s,method:"GET",headers:{}},e);var o=new XMLHttpRequest;for(var r in o.open(e.method,e.url,!0),e.headers)o.setRequestHeader(r,e.headers[r]);o.responseType="json",o.addEventListener("load",(e=>{4==o.readyState&&(200!=o.status?t(o.status,null,null):t(null,null,o.response))})),o.send()}else{var a=`jsonp_callback_${Math.round(1e5*Math.random())}`;window[a]=function(e){delete window[a],document.body.removeChild(c),t(null,null,e)};var c=document.createElement("script");c.src=`${s}${s.includes("?")?"&":"?"}callback=${a}`,document.body.appendChild(c)}}},839:(e,t,s)=>{var n=s(681),i=s(641),o=s(378).EventEmitter,r=s(352),a=s(549),c=s(776),h=s.g.WebSocket||s.g.MozWebSocket||s(418),l=s(49),u=function e(t){if(this instanceof e==0)return new e(t);this.setMaxListeners(0),this.opts=l.get(t,{}),this.opts.channels=this.opts.channels||[],this.opts.connection=this.opts.connection||{},this.opts.identity=this.opts.identity||{},this.opts.options=this.opts.options||{},this.clientId=l.get(this.opts.options.clientId,null),this.maxReconnectAttempts=l.get(this.opts.connection.maxReconnectAttempts,1/0),this.maxReconnectInterval=l.get(this.opts.connection.maxReconnectInterval,3e4),this.reconnect=l.get(this.opts.connection.reconnect,!1),this.reconnectDecay=l.get(this.opts.connection.reconnectDecay,1.5),this.reconnectInterval=l.get(this.opts.connection.reconnectInterval,1e3),this.reconnecting=!1,this.reconnections=0,this.reconnectTimer=this.reconnectInterval,this.secure=l.get(this.opts.connection.secure,!1),this.emotes="",this.emotesets={},this.channels=[],this.currentLatency=0,this.globaluserstate={},this.lastJoined="",this.latency=new Date,this.moderators={},this.pingLoop=null,this.pingTimeout=null,this.reason="",this.username="",this.userstate={},this.wasCloseCalled=!1,this.ws=null;var s="error";this.opts.options.debug&&(s="info"),this.log=this.opts.logger||r;try{r.setLevel(s)}catch(e){}this.opts.channels.forEach((function(e,t,s){s[t]=l.channel(e)})),o.call(this)};for(var m in l.inherits(u,o),u.prototype.api=n,i)u.prototype[m]=i[m];u.prototype.handleMessage=function(e){if(!l.isNull(e)){this.emit("raw_message",JSON.parse(JSON.stringify(e)),e);var t=l.channel(l.get(e.params[0],null)),s=l.get(e.params[1],null),n=l.get(e.tags["msg-id"],null);if(e.tags=a.badges(a.badgeInfo(a.emotes(e.tags))),e.tags){var i=e.tags;for(var o in i)if("emote-sets"!==o&&"ban-duration"!==o&&"bits"!==o){var r=i[o];l.isBoolean(r)?r=null:"1"===r?r=!0:"0"===r?r=!1:l.isString(r)&&(r=l.unescapeIRC(r)),i[o]=r}}if(l.isNull(e.prefix))switch(e.command){case"PING":this.emit("ping"),l.isNull(this.ws)||1!==this.ws.readyState||this.ws.send("PONG");break;case"PONG":var h=new Date;this.currentLatency=(h.getTime()-this.latency.getTime())/1e3,this.emits(["pong","_promisePing"],[[this.currentLatency]]),clearTimeout(this.pingTimeout);break;default:this.log.warn(`Could not parse message with no prefix:\n${JSON.stringify(e,null,4)}`)}else if("tmi.twitch.tv"===e.prefix)switch(e.command){case"002":case"003":case"004":case"375":case"376":case"CAP":break;case"001":this.username=e.params[0];break;case"372":this.log.info("Connected to server."),this.userstate["#tmijs"]={},this.emits(["connected","_promiseConnect"],[[this.server,this.port],[null]]),this.reconnections=0,this.reconnectTimer=this.reconnectInterval,this.pingLoop=setInterval((()=>{l.isNull(this.ws)||1!==this.ws.readyState||this.ws.send("PING"),this.latency=new Date,this.pingTimeout=setTimeout((()=>{l.isNull(this.ws)||(this.wasCloseCalled=!1,this.log.error("Ping timeout."),this.ws.close(),clearInterval(this.pingLoop),clearTimeout(this.pingTimeout))}),l.get(this.opts.connection.timeout,9999))}),6e4);var u=new c.queue(2e3),m=l.union(this.opts.channels,this.channels);this.channels=[];for(var p=0;p<m.length;p++){let e=m[p];u.add((()=>{l.isNull(this.ws)||1!==this.ws.readyState||this.join(e).catch((e=>{this.log.error(e)}))}))}u.run();break;case"NOTICE":var f=[null],d=[t,n,s],g=[t,!0],_=[t,!1],v=[d,f],y=[d,[n]],b=`[${t}] ${s}`;switch(n){case"subs_on":this.log.info(`[${t}] This room is now in subscribers-only mode.`),this.emits(["subscriber","subscribers","_promiseSubscribers"],[g,g,f]);break;case"subs_off":this.log.info(`[${t}] This room is no longer in subscribers-only mode.`),this.emits(["subscriber","subscribers","_promiseSubscribersoff"],[_,_,f]);break;case"emote_only_on":this.log.info(`[${t}] This room is now in emote-only mode.`),this.emits(["emoteonly","_promiseEmoteonly"],[g,f]);break;case"emote_only_off":this.log.info(`[${t}] This room is no longer in emote-only mode.`),this.emits(["emoteonly","_promiseEmoteonlyoff"],[_,f]);break;case"slow_on":case"slow_off":break;case"followers_on_zero":case"followers_on":case"followers_off":break;case"r9k_on":this.log.info(`[${t}] This room is now in r9k mode.`),this.emits(["r9kmode","r9kbeta","_promiseR9kbeta"],[g,g,f]);break;case"r9k_off":this.log.info(`[${t}] This room is no longer in r9k mode.`),this.emits(["r9kmode","r9kbeta","_promiseR9kbetaoff"],[_,_,f]);break;case"room_mods":var w=s.split(": ")[1].toLowerCase().split(", ").filter((e=>e));this.emits(["_promiseMods","mods"],[[null,w],[t,w]]);break;case"no_mods":this.emits(["_promiseMods","mods"],[[null,[]],[t,[]]]);break;case"vips_success":s.endsWith(".")&&(s=s.slice(0,-1));var C=s.split(": ")[1].toLowerCase().split(", ").filter((e=>e));this.emits(["_promiseVips","vips"],[[null,C],[t,C]]);break;case"no_vips":this.emits(["_promiseVips","vips"],[[null,[]],[t,[]]]);break;case"already_banned":case"bad_ban_admin":case"bad_ban_broadcaster":case"bad_ban_global_mod":case"bad_ban_self":case"bad_ban_staff":case"usage_ban":this.log.info(b),this.emits(["notice","_promiseBan"],y);break;case"ban_success":this.log.info(b),this.emits(["notice","_promiseBan"],v);break;case"usage_clear":this.log.info(b),this.emits(["notice","_promiseClear"],y);break;case"usage_mods":this.log.info(b),this.emits(["notice","_promiseMods"],[d,[n,[]]]);break;case"mod_success":this.log.info(b),this.emits(["notice","_promiseMod"],v);break;case"usage_vips":this.log.info(b),this.emits(["notice","_promiseVips"],[d,[n,[]]]);break;case"usage_vip":case"bad_vip_grantee_banned":case"bad_vip_grantee_already_vip":this.log.info(b),this.emits(["notice","_promiseVip"],[d,[n,[]]]);break;case"vip_success":this.log.info(b),this.emits(["notice","_promiseVip"],v);break;case"usage_mod":case"bad_mod_banned":case"bad_mod_mod":this.log.info(b),this.emits(["notice","_promiseMod"],y);break;case"unmod_success":this.log.info(b),this.emits(["notice","_promiseUnmod"],v);break;case"unvip_success":this.log.info(b),this.emits(["notice","_promiseUnvip"],v);break;case"usage_unmod":case"bad_unmod_mod":this.log.info(b),this.emits(["notice","_promiseUnmod"],y);break;case"usage_unvip":case"bad_unvip_grantee_not_vip":this.log.info(b),this.emits(["notice","_promiseUnvip"],y);break;case"color_changed":this.log.info(b),this.emits(["notice","_promiseColor"],v);break;case"usage_color":case"turbo_only_color":this.log.info(b),this.emits(["notice","_promiseColor"],y);break;case"commercial_success":this.log.info(b),this.emits(["notice","_promiseCommercial"],v);break;case"usage_commercial":case"bad_commercial_error":this.log.info(b),this.emits(["notice","_promiseCommercial"],y);break;case"hosts_remaining":this.log.info(b);var x=isNaN(s[0])?0:parseInt(s[0]);this.emits(["notice","_promiseHost"],[d,[null,~~x]]);break;case"bad_host_hosting":case"bad_host_rate_exceeded":case"bad_host_error":case"usage_host":this.log.info(b),this.emits(["notice","_promiseHost"],[d,[n,null]]);break;case"already_r9k_on":case"usage_r9k_on":this.log.info(b),this.emits(["notice","_promiseR9kbeta"],y);break;case"already_r9k_off":case"usage_r9k_off":this.log.info(b),this.emits(["notice","_promiseR9kbetaoff"],y);break;case"timeout_success":this.log.info(b),this.emits(["notice","_promiseTimeout"],v);break;case"delete_message_success":this.log.info(`[${t} ${s}]`),this.emits(["notice","_promiseDeletemessage"],v);case"already_subs_off":case"usage_subs_off":this.log.info(b),this.emits(["notice","_promiseSubscribersoff"],y);break;case"already_subs_on":case"usage_subs_on":this.log.info(b),this.emits(["notice","_promiseSubscribers"],y);break;case"already_emote_only_off":case"usage_emote_only_off":this.log.info(b),this.emits(["notice","_promiseEmoteonlyoff"],y);break;case"already_emote_only_on":case"usage_emote_only_on":this.log.info(b),this.emits(["notice","_promiseEmoteonly"],y);break;case"usage_slow_on":this.log.info(b),this.emits(["notice","_promiseSlow"],y);break;case"usage_slow_off":this.log.info(b),this.emits(["notice","_promiseSlowoff"],y);break;case"usage_timeout":case"bad_timeout_admin":case"bad_timeout_broadcaster":case"bad_timeout_duration":case"bad_timeout_global_mod":case"bad_timeout_self":case"bad_timeout_staff":this.log.info(b),this.emits(["notice","_promiseTimeout"],y);break;case"untimeout_success":case"unban_success":this.log.info(b),this.emits(["notice","_promiseUnban"],v);break;case"usage_unban":case"bad_unban_no_ban":this.log.info(b),this.emits(["notice","_promiseUnban"],y);break;case"usage_delete":case"bad_delete_message_error":case"bad_delete_message_broadcaster":case"bad_delete_message_mod":this.log.info(b),this.emits(["notice","_promiseDeletemessage"],y);break;case"usage_unhost":case"not_hosting":this.log.info(b),this.emits(["notice","_promiseUnhost"],y);break;case"whisper_invalid_login":case"whisper_invalid_self":case"whisper_limit_per_min":case"whisper_limit_per_sec":case"whisper_restricted_recipient":this.log.info(b),this.emits(["notice","_promiseWhisper"],y);break;case"no_permission":case"msg_banned":case"msg_room_not_found":case"msg_channel_suspended":case"tos_ban":this.log.info(b),this.emits(["notice","_promiseBan","_promiseClear","_promiseUnban","_promiseTimeout","_promiseDeletemessage","_promiseMods","_promiseMod","_promiseUnmod","_promiseVips","_promiseVip","_promiseUnvip","_promiseCommercial","_promiseHost","_promiseUnhost","_promiseJoin","_promisePart","_promiseR9kbeta","_promiseR9kbetaoff","_promiseSlow","_promiseSlowoff","_promiseFollowers","_promiseFollowersoff","_promiseSubscribers","_promiseSubscribersoff","_promiseEmoteonly","_promiseEmoteonlyoff"],[d,[n,t]]);break;case"msg_rejected":case"msg_rejected_mandatory":this.log.info(b),this.emit("automod",t,n,s);break;case"unrecognized_cmd":this.log.info(b),this.emit("notice",t,n,s);break;case"cmds_available":case"host_target_went_offline":case"msg_censored_broadcaster":case"msg_duplicate":case"msg_emoteonly":case"msg_verified_email":case"msg_ratelimit":case"msg_subsonly":case"msg_timedout":case"msg_bad_characters":case"msg_channel_blocked":case"msg_facebook":case"msg_followersonly":case"msg_followersonly_followed":case"msg_followersonly_zero":case"msg_slowmode":case"msg_suspended":case"no_help":case"usage_disconnect":case"usage_help":case"usage_me":this.log.info(b),this.emit("notice",t,n,s);break;case"host_on":case"host_off":break;default:s.includes("Login unsuccessful")||s.includes("Login authentication failed")||s.includes("Error logging in")||s.includes("Improperly formatted auth")?(this.wasCloseCalled=!1,this.reconnect=!1,this.reason=s,this.log.error(this.reason),this.ws.close()):s.includes("Invalid NICK")?(this.wasCloseCalled=!1,this.reconnect=!1,this.reason="Invalid NICK.",this.log.error(this.reason),this.ws.close()):this.log.warn(`Could not parse NOTICE from tmi.twitch.tv:\n${JSON.stringify(e,null,4)}`)}break;case"USERNOTICE":var k=e.tags["display-name"]||e.tags.login,O=e.tags["msg-param-sub-plan"]||"",M=l.unescapeIRC(l.get(e.tags["msg-param-sub-plan-name"],""))||null,P={prime:O.includes("Prime"),plan:O,planName:M},E=e.tags,T=~~(e.tags["msg-param-streak-months"]||0),S=e.tags["msg-param-recipient-display-name"]||e.tags["msg-param-recipient-user-name"],L=~~e.tags["msg-param-mass-gift-count"];switch(E["message-type"]=n,n){case"resub":this.emits(["resub","subanniversary"],[[t,k,T,s,E,P]]);break;case"sub":this.emit("subscription",t,k,P,s,E);break;case"subgift":this.emit("subgift",t,k,T,S,P,E);break;case"anonsubgift":this.emit("anonsubgift",t,T,S,P,E);break;case"submysterygift":this.emit("submysterygift",t,k,L,P,E);break;case"anonsubmysterygift":this.emit("anonsubmysterygift",t,L,P,E);break;case"primepaidupgrade":this.emit("primepaidupgrade",t,k,P,E);break;case"giftpaidupgrade":var N=e.tags["msg-param-sender-name"]||e.tags["msg-param-sender-login"];this.emit("giftpaidupgrade",t,k,N,E);break;case"anongiftpaidupgrade":this.emit("anongiftpaidupgrade",t,k,E);break;case"raid":k=e.tags["msg-param-displayName"]||e.tags["msg-param-login"];var $=e.tags["msg-param-viewerCount"];this.emit("raided",t,k,$)}break;case"HOSTTARGET":var R=s.split(" ");$=~~R[1]||0,"-"===R[0]?(this.log.info(`[${t}] Exited host mode.`),this.emits(["unhost","_promiseUnhost"],[[t,$],[null]])):(this.log.info(`[${t}] Now hosting ${R[0]} for ${$} viewer(s).`),this.emit("hosting",t,R[0],$));break;case"CLEARCHAT":if(e.params.length>1){var j=l.get(e.tags["ban-duration"],null);l.isNull(j)?(this.log.info(`[${t}] ${s} has been banned.`),this.emit("ban",t,s,null,e.tags)):(this.log.info(`[${t}] ${s} has been timed out for ${j} seconds.`),this.emit("timeout",t,s,null,~~j,e.tags))}else this.log.info(`[${t}] Chat was cleared by a moderator.`),this.emits(["clearchat","_promiseClear"],[[t],[null]]);break;case"CLEARMSG":if(e.params.length>1){k=e.tags.login;var I=s;(E=e.tags)["message-type"]="messagedeleted",this.log.info(`[${t}] ${k}'s message has been deleted.`),this.emit("messagedeleted",t,k,I,E)}break;case"RECONNECT":this.log.info("Received RECONNECT request from Twitch.."),this.log.info(`Disconnecting and reconnecting in ${Math.round(this.reconnectTimer/1e3)} seconds..`),this.disconnect(),setTimeout((()=>{this.connect()}),this.reconnectTimer);break;case"USERSTATE":e.tags.username=this.username,"mod"===e.tags["user-type"]&&(this.moderators[this.lastJoined]||(this.moderators[this.lastJoined]=[]),this.moderators[this.lastJoined].includes(this.username)||this.moderators[this.lastJoined].push(this.username)),l.isJustinfan(this.getUsername())||this.userstate[t]||(this.userstate[t]=e.tags,this.lastJoined=t,this.channels.push(t),this.log.info(`Joined ${t}`),this.emit("join",t,l.username(this.getUsername()),!0)),e.tags["emote-sets"]!==this.emotes&&this._updateEmoteset(e.tags["emote-sets"]),this.userstate[t]=e.tags;break;case"GLOBALUSERSTATE":this.globaluserstate=e.tags,void 0!==e.tags["emote-sets"]&&this._updateEmoteset(e.tags["emote-sets"]);break;case"ROOMSTATE":if(l.channel(this.lastJoined)===t&&this.emit("_promiseJoin",null,t),e.tags.channel=t,this.emit("roomstate",t,e.tags),!e.tags.hasOwnProperty("subs-only")){if(e.tags.hasOwnProperty("slow"))if("boolean"!=typeof e.tags.slow||e.tags.slow){var A=[t,!0,~~e.tags.slow];this.log.info(`[${t}] This room is now in slow mode.`),this.emits(["slow","slowmode","_promiseSlow"],[A,A,[null]])}else{var D=[t,!1,0];this.log.info(`[${t}] This room is no longer in slow mode.`),this.emits(["slow","slowmode","_promiseSlowoff"],[D,D,[null]])}e.tags.hasOwnProperty("followers-only")&&("-1"===e.tags["followers-only"]?(D=[t,!1,0],this.log.info(`[${t}] This room is no longer in followers-only mode.`),this.emits(["followersonly","followersmode","_promiseFollowersoff"],[D,D,[null]])):(A=[t,!0,~~e.tags["followers-only"]],this.log.info(`[${t}] This room is now in follower-only mode.`),this.emits(["followersonly","followersmode","_promiseFollowers"],[A,A,[null]])))}break;case"SERVERCHANGE":break;default:this.log.warn(`Could not parse message from tmi.twitch.tv:\n${JSON.stringify(e,null,4)}`)}else if("jtv"===e.prefix)switch(e.command){case"MODE":"+o"===s?(this.moderators[t]||(this.moderators[t]=[]),this.moderators[t].includes(e.params[2])||this.moderators[t].push(e.params[2]),this.emit("mod",t,e.params[2])):"-o"===s&&(this.moderators[t]||(this.moderators[t]=[]),this.moderators[t].filter((t=>t!=e.params[2])),this.emit("unmod",t,e.params[2]));break;default:this.log.warn(`Could not parse message from jtv:\n${JSON.stringify(e,null,4)}`)}else switch(e.command){case"353":this.emit("names",e.params[2],e.params[3].split(" "));break;case"366":break;case"JOIN":var U=e.prefix.split("!")[0];l.isJustinfan(this.getUsername())&&this.username===U&&(this.lastJoined=t,this.channels.push(t),this.log.info(`Joined ${t}`),this.emit("join",t,U,!0)),this.username!==U&&this.emit("join",t,U,!1);break;case"PART":var H,F=!1;U=e.prefix.split("!")[0],this.username===U&&(F=!0,this.userstate[t]&&delete this.userstate[t],-1!==(H=this.channels.indexOf(t))&&this.channels.splice(H,1),-1!==(H=this.opts.channels.indexOf(t))&&this.opts.channels.splice(H,1),this.log.info(`Left ${t}`),this.emit("_promisePart",null)),this.emit("part",t,U,F);break;case"WHISPER":U=e.prefix.split("!")[0],this.log.info(`[WHISPER] <${U}>: ${s}`),e.tags.hasOwnProperty("username")||(e.tags.username=U),e.tags["message-type"]="whisper";var J=l.channel(e.tags.username);this.emits(["whisper","message"],[[J,e.tags,s,!1]]);break;case"PRIVMSG":if(e.tags.username=e.prefix.split("!")[0],"jtv"===e.tags.username){var W=l.username(s.split(" ")[0]),B=s.includes("auto");if(s.includes("hosting you for")){var G=l.extractNumber(s);this.emit("hosted",t,W,G,B)}else s.includes("hosting you")&&this.emit("hosted",t,W,0,B)}else{var V=l.actionMessage(s);V?(e.tags["message-type"]="action",this.log.info(`[${t}] *<${e.tags.username}>: ${V[1]}`),this.emits(["action","message"],[[t,e.tags,V[1],!1]])):e.tags.hasOwnProperty("bits")?this.emit("cheer",t,e.tags,s):(e.tags["message-type"]="chat",this.log.info(`[${t}] <${e.tags.username}>: ${s}`),this.emits(["chat","message"],[[t,e.tags,s,!1]]))}break;default:this.log.warn(`Could not parse message:\n${JSON.stringify(e,null,4)}`)}}},u.prototype.connect=function(){return new Promise(((e,t)=>{this.server=l.get(this.opts.connection.server,"irc-ws.chat.twitch.tv"),this.port=l.get(this.opts.connection.port,80),this.secure&&(this.port=443),443===this.port&&(this.secure=!0),this.reconnectTimer=this.reconnectTimer*this.reconnectDecay,this.reconnectTimer>=this.maxReconnectInterval&&(this.reconnectTimer=this.maxReconnectInterval),this._openConnection(),this.once("_promiseConnect",(s=>{s?t(s):e([this.server,~~this.port])}))}))},u.prototype._openConnection=function(){this.ws=new h(`${this.secure?"wss":"ws"}://${this.server}:${this.port}/`,"irc"),this.ws.onmessage=this._onMessage.bind(this),this.ws.onerror=this._onError.bind(this),this.ws.onclose=this._onClose.bind(this),this.ws.onopen=this._onOpen.bind(this)},u.prototype._onOpen=function(){l.isNull(this.ws)||1!==this.ws.readyState||(this.log.info(`Connecting to ${this.server} on port ${this.port}..`),this.emit("connecting",this.server,~~this.port),this.username=l.get(this.opts.identity.username,l.justinfan()),this.password=l.password(l.get(this.opts.identity.password,"SCHMOOPIIE")),this.log.info("Sending authentication to server.."),this.emit("logon"),this.ws.send("CAP REQ :twitch.tv/tags twitch.tv/commands twitch.tv/membership"),this.ws.send(`PASS ${this.password}`),this.ws.send(`NICK ${this.username}`))},u.prototype._onMessage=function(e){e.data.split("\r\n").forEach((e=>{l.isNull(e)||this.handleMessage(a.msg(e))}))},u.prototype._onError=function(){this.moderators={},this.userstate={},this.globaluserstate={},clearInterval(this.pingLoop),clearTimeout(this.pingTimeout),this.reason=l.isNull(this.ws)?"Connection closed.":"Unable to connect.",this.emits(["_promiseConnect","disconnected"],[[this.reason]]),this.reconnect&&this.reconnections===this.maxReconnectAttempts&&(this.emit("maxreconnect"),this.log.error("Maximum reconnection attempts reached.")),this.reconnect&&!this.reconnecting&&this.reconnections<=this.maxReconnectAttempts-1&&(this.reconnecting=!0,this.reconnections=this.reconnections+1,this.log.error(`Reconnecting in ${Math.round(this.reconnectTimer/1e3)} seconds..`),this.emit("reconnect"),setTimeout((()=>{this.reconnecting=!1,this.connect()}),this.reconnectTimer)),this.ws=null},u.prototype._onClose=function(){this.moderators={},this.userstate={},this.globaluserstate={},clearInterval(this.pingLoop),clearTimeout(this.pingTimeout),this.wasCloseCalled?(this.wasCloseCalled=!1,this.reason="Connection closed.",this.log.info(this.reason),this.emits(["_promiseConnect","_promiseDisconnect","disconnected"],[[this.reason],[null],[this.reason]])):(this.emits(["_promiseConnect","disconnected"],[[this.reason]]),this.reconnect&&this.reconnections===this.maxReconnectAttempts&&(this.emit("maxreconnect"),this.log.error("Maximum reconnection attempts reached.")),this.reconnect&&!this.reconnecting&&this.reconnections<=this.maxReconnectAttempts-1&&(this.reconnecting=!0,this.reconnections=this.reconnections+1,this.log.error(`Could not connect to server. Reconnecting in ${Math.round(this.reconnectTimer/1e3)} seconds..`),this.emit("reconnect"),setTimeout((()=>{this.reconnecting=!1,this.connect()}),this.reconnectTimer))),this.ws=null},u.prototype._getPromiseDelay=function(){return this.currentLatency<=600?600:this.currentLatency+100},u.prototype._sendCommand=function(e,t,s,n){return new Promise(((i,o)=>{if(l.isNull(this.ws)||1!==this.ws.readyState)return o("Not connected to server.");if("number"==typeof e&&l.promiseDelay(e).then((()=>{o("No response from Twitch.")})),l.isNull(t))this.log.info(`Executing command: ${s}`),this.ws.send(s);else{var r=l.channel(t);this.log.info(`[${r}] Executing command: ${s}`),this.ws.send(`PRIVMSG ${r} :${s}`)}n(i,o)}))},u.prototype._sendMessage=function(e,t,s,n){return new Promise(((i,o)=>{if(l.isNull(this.ws)||1!==this.ws.readyState)return o("Not connected to server.");if(l.isJustinfan(this.getUsername()))return o("Cannot send anonymous messages.");var r=l.channel(t);if(this.userstate[r]||(this.userstate[r]={}),s.length>=500){var c=l.splitLine(s,500);s=c[0],setTimeout((()=>{this._sendMessage(e,t,c[1],(()=>{}))}),350)}this.ws.send(`PRIVMSG ${r} :${s}`);var h={};Object.keys(this.emotesets).forEach((e=>{this.emotesets[e].forEach((function(e){if(l.isRegex(e.code))return a.emoteRegex(s,e.code,e.id,h);a.emoteString(s,e.code,e.id,h)}))}));var u=l.merge(this.userstate[r],a.emotes({emotes:a.transformEmotes(h)||null})),m=l.actionMessage(s);m?(u["message-type"]="action",this.log.info(`[${r}] *<${this.getUsername()}>: ${m[1]}`),this.emits(["action","message"],[[r,u,m[1],!0]])):(u["message-type"]="chat",this.log.info(`[${r}] <${this.getUsername()}>: ${s}`),this.emits(["chat","message"],[[r,u,s,!0]])),n(i,o)}))},u.prototype._updateEmoteset=function(e){this.emotes=e,this.api({url:`/chat/emoticon_images?emotesets=${e}`,headers:{Authorization:`OAuth ${l.password(l.get(this.opts.identity.password,"")).replace("oauth:","")}`,"Client-ID":this.clientId}},((t,s,n)=>{if(!t)return this.emotesets=n.emoticon_sets||{},this.emit("emotesets",e,this.emotesets);setTimeout((()=>{this._updateEmoteset(e)}),6e4)}))},u.prototype.getUsername=function(){return this.username},u.prototype.getOptions=function(){return this.opts},u.prototype.getChannels=function(){return this.channels},u.prototype.isMod=function(e,t){var s=l.channel(e);return this.moderators[s]||(this.moderators[s]=[]),this.moderators[s].includes(l.username(t))},u.prototype.readyState=function(){return l.isNull(this.ws)?"CLOSED":["CONNECTING","OPEN","CLOSING","CLOSED"][this.ws.readyState]},u.prototype.disconnect=function(){return new Promise(((e,t)=>{l.isNull(this.ws)||3===this.ws.readyState?(this.log.error("Cannot disconnect from server. Socket is not opened or connection is already closing."),t("Cannot disconnect from server. Socket is not opened or connection is already closing.")):(this.wasCloseCalled=!0,this.log.info("Disconnecting from server.."),this.ws.close(),this.once("_promiseDisconnect",(()=>{e([this.server,~~this.port])})))}))},e.exports&&(e.exports=u),"undefined"!=typeof window&&(window.tmi={},window.tmi.client=u,window.tmi.Client=u)},641:(e,t,s)=>{var n=s(49);function i(e,t){return e=n.channel(e),t=n.get(t,30),this._sendCommand(this._getPromiseDelay(),e,`/followers ${t}`,((s,n)=>{this.once("_promiseFollowers",(i=>{i?n(i):s([e,~~t])}))}))}function o(e){return e=n.channel(e),this._sendCommand(this._getPromiseDelay(),e,"/followersoff",((t,s)=>{this.once("_promiseFollowersoff",(n=>{n?s(n):t([e])}))}))}function r(e){return e=n.channel(e),this._sendCommand(this._getPromiseDelay(),null,`PART ${e}`,((t,s)=>{this.once("_promisePart",(n=>{n?s(n):t([e])}))}))}function a(e){return e=n.channel(e),this._sendCommand(this._getPromiseDelay(),e,"/r9kbeta",((t,s)=>{this.once("_promiseR9kbeta",(n=>{n?s(n):t([e])}))}))}function c(e){return e=n.channel(e),this._sendCommand(this._getPromiseDelay(),e,"/r9kbetaoff",((t,s)=>{this.once("_promiseR9kbetaoff",(n=>{n?s(n):t([e])}))}))}function h(e,t){return e=n.channel(e),t=n.get(t,300),this._sendCommand(this._getPromiseDelay(),e,`/slow ${t}`,((s,n)=>{this.once("_promiseSlow",(i=>{i?n(i):s([e,~~t])}))}))}function l(e){return e=n.channel(e),this._sendCommand(this._getPromiseDelay(),e,"/slowoff",((t,s)=>{this.once("_promiseSlowoff",(n=>{n?s(n):t([e])}))}))}e.exports={action:function(e,t){return e=n.channel(e),t=`ACTION ${t}`,this._sendMessage(this._getPromiseDelay(),e,t,((s,n)=>{s([e,t])}))},ban:function(e,t,s){return e=n.channel(e),t=n.username(t),s=n.get(s,""),this._sendCommand(this._getPromiseDelay(),e,`/ban ${t} ${s}`,((n,i)=>{this.once("_promiseBan",(o=>{o?i(o):n([e,t,s])}))}))},clear:function(e){return e=n.channel(e),this._sendCommand(this._getPromiseDelay(),e,"/clear",((t,s)=>{this.once("_promiseClear",(n=>{n?s(n):t([e])}))}))},color:function(e,t){return t=n.get(t,e),this._sendCommand(this._getPromiseDelay(),"#tmijs",`/color ${t}`,((e,s)=>{this.once("_promiseColor",(n=>{n?s(n):e([t])}))}))},commercial:function(e,t){return e=n.channel(e),t=n.get(t,30),this._sendCommand(this._getPromiseDelay(),e,`/commercial ${t}`,((s,n)=>{this.once("_promiseCommercial",(i=>{i?n(i):s([e,~~t])}))}))},deletemessage:function(e,t){return e=n.channel(e),this._sendCommand(this._getPromiseDelay(),e,`/delete ${t}`,((t,s)=>{this.once("_promiseDeletemessage",(n=>{n?s(n):t([e])}))}))},emoteonly:function(e){return e=n.channel(e),this._sendCommand(this._getPromiseDelay(),e,"/emoteonly",((t,s)=>{this.once("_promiseEmoteonly",(n=>{n?s(n):t([e])}))}))},emoteonlyoff:function(e){return e=n.channel(e),this._sendCommand(this._getPromiseDelay(),e,"/emoteonlyoff",((t,s)=>{this.once("_promiseEmoteonlyoff",(n=>{n?s(n):t([e])}))}))},followersonly:i,followersmode:i,followersonlyoff:o,followersmodeoff:o,host:function(e,t){return e=n.channel(e),t=n.username(t),this._sendCommand(2e3,e,`/host ${t}`,((s,n)=>{this.once("_promiseHost",((i,o)=>{i?n(i):s([e,t,~~o])}))}))},join:function(e){return e=n.channel(e),this._sendCommand(null,null,`JOIN ${e}`,((t,s)=>{var i="_promiseJoin",o=!1,r=(a,c)=>{e===n.channel(c)&&(this.removeListener(i,r),o=!0,a?s(a):t([e]))};this.on(i,r);var a=this._getPromiseDelay();n.promiseDelay(a).then((()=>{o||this.emit(i,"No response from Twitch.",e)}))}))},mod:function(e,t){return e=n.channel(e),t=n.username(t),this._sendCommand(this._getPromiseDelay(),e,`/mod ${t}`,((s,n)=>{this.once("_promiseMod",(i=>{i?n(i):s([e,t])}))}))},mods:function(e){return e=n.channel(e),this._sendCommand(this._getPromiseDelay(),e,"/mods",((t,s)=>{this.once("_promiseMods",((n,i)=>{n?s(n):(i.forEach((t=>{this.moderators[e]||(this.moderators[e]=[]),this.moderators[e].includes(t)||this.moderators[e].push(t)})),t(i))}))}))},part:r,leave:r,ping:function(){return this._sendCommand(this._getPromiseDelay(),null,"PING",((e,t)=>{this.latency=new Date,this.pingTimeout=setTimeout((()=>{null!==this.ws&&(this.wasCloseCalled=!1,this.log.error("Ping timeout."),this.ws.close(),clearInterval(this.pingLoop),clearTimeout(this.pingTimeout))}),n.get(this.opts.connection.timeout,9999)),this.once("_promisePing",(t=>{e([parseFloat(t)])}))}))},r9kbeta:a,r9kmode:a,r9kbetaoff:c,r9kmodeoff:c,raw:function(e){return this._sendCommand(this._getPromiseDelay(),null,e,((t,s)=>{t([e])}))},say:function(e,t){return e=n.channel(e),t.startsWith(".")&&!t.startsWith("..")||t.startsWith("/")||t.startsWith("\\")?"me "===t.substr(1,3)?this.action(e,t.substr(4)):this._sendCommand(this._getPromiseDelay(),e,t,((s,n)=>{s([e,t])})):this._sendMessage(this._getPromiseDelay(),e,t,((s,n)=>{s([e,t])}))},slow:h,slowmode:h,slowoff:l,slowmodeoff:l,subscribers:function(e){return e=n.channel(e),this._sendCommand(this._getPromiseDelay(),e,"/subscribers",((t,s)=>{this.once("_promiseSubscribers",(n=>{n?s(n):t([e])}))}))},subscribersoff:function(e){return e=n.channel(e),this._sendCommand(this._getPromiseDelay(),e,"/subscribersoff",((t,s)=>{this.once("_promiseSubscribersoff",(n=>{n?s(n):t([e])}))}))},timeout:function(e,t,s,i){return e=n.channel(e),t=n.username(t),n.isNull(s)||n.isInteger(s)||(i=s,s=300),s=n.get(s,300),i=n.get(i,""),this._sendCommand(this._getPromiseDelay(),e,`/timeout ${t} ${s} ${i}`,((n,o)=>{this.once("_promiseTimeout",(r=>{r?o(r):n([e,t,~~s,i])}))}))},unban:function(e,t){return e=n.channel(e),t=n.username(t),this._sendCommand(this._getPromiseDelay(),e,`/unban ${t}`,((s,n)=>{this.once("_promiseUnban",(i=>{i?n(i):s([e,t])}))}))},unhost:function(e){return e=n.channel(e),this._sendCommand(2e3,e,"/unhost",((t,s)=>{this.once("_promiseUnhost",(n=>{n?s(n):t([e])}))}))},unmod:function(e,t){return e=n.channel(e),t=n.username(t),this._sendCommand(this._getPromiseDelay(),e,`/unmod ${t}`,((s,n)=>{this.once("_promiseUnmod",(i=>{i?n(i):s([e,t])}))}))},unvip:function(e,t){return e=n.channel(e),t=n.username(t),this._sendCommand(this._getPromiseDelay(),e,`/unvip ${t}`,((s,n)=>{this.once("_promiseUnvip",(i=>{i?n(i):s([e,t])}))}))},vip:function(e,t){return e=n.channel(e),t=n.username(t),this._sendCommand(this._getPromiseDelay(),e,`/vip ${t}`,((s,n)=>{this.once("_promiseVip",(i=>{i?n(i):s([e,t])}))}))},vips:function(e){return e=n.channel(e),this._sendCommand(this._getPromiseDelay(),e,"/vips",((e,t)=>{this.once("_promiseVips",((s,n)=>{s?t(s):e(n)}))}))},whisper:function(e,t){return(e=n.username(e))===this.getUsername()?Promise.reject("Cannot send a whisper to the same account."):this._sendCommand(this._getPromiseDelay(),"#tmijs",`/w ${e} ${t}`,((s,i)=>{var o=n.channel(e),r=n.merge({"message-type":"whisper","message-id":null,"thread-id":null,username:this.getUsername()},this.globaluserstate);this.emits(["whisper","message"],[[o,r,t,!0],[o,r,t,!0]]),s([e,t])}))}}},378:e=>{function t(){this._events=this._events||{},this._maxListeners=this._maxListeners||void 0}function s(e){return"function"==typeof e}function n(e){return"object"==typeof e&&null!==e}function i(e){return void 0===e}String.prototype.startsWith||(String.prototype.startsWith=function(e,t){return t=t||0,this.indexOf(e,t)===t}),e.exports=t,t.EventEmitter=t,t.prototype._events=void 0,t.prototype._maxListeners=void 0,t.defaultMaxListeners=10,t.prototype.setMaxListeners=function(e){if("number"!=typeof e||e<0||isNaN(e))throw TypeError("n must be a positive number");return this._maxListeners=e,this},t.prototype.emits=function(e,t){for(var s=0;s<e.length;s++){var n=s<t.length?t[s]:t[t.length-1];this.emit.apply(this,[e[s]].concat(n))}},t.prototype.emit=function(e){var t,o,r,a,c,h;if(this._events||(this._events={}),"error"===e&&(!this._events.error||n(this._events.error)&&!this._events.error.length)){if((t=arguments[1])instanceof Error)throw t;throw TypeError('Uncaught, unspecified "error" event.')}if(i(o=this._events[e]))return!1;if(s(o))switch(arguments.length){case 1:o.call(this);break;case 2:o.call(this,arguments[1]);break;case 3:o.call(this,arguments[1],arguments[2]);break;default:a=Array.prototype.slice.call(arguments,1),o.apply(this,a)}else if(n(o))for(a=Array.prototype.slice.call(arguments,1),r=(h=o.slice()).length,c=0;c<r;c++)h[c].apply(this,a);return!0},t.prototype.addListener=function(e,o){var r;if(!s(o))throw TypeError("listener must be a function");return this._events||(this._events={}),this._events.newListener&&this.emit("newListener",e,s(o.listener)?o.listener:o),this._events[e]?n(this._events[e])?this._events[e].push(o):this._events[e]=[this._events[e],o]:this._events[e]=o,n(this._events[e])&&!this._events[e].warned&&(r=i(this._maxListeners)?t.defaultMaxListeners:this._maxListeners)&&r>0&&this._events[e].length>r&&(this._events[e].warned=!0,console.error("(node) warning: possible EventEmitter memory leak detected. %d listeners added. Use emitter.setMaxListeners() to increase limit.",this._events[e].length),"function"==typeof console.trace&&console.trace()),this},t.prototype.on=t.prototype.addListener,t.prototype.once=function(e,t){if(!s(t))throw TypeError("listener must be a function");var n=!1;if(this._events.hasOwnProperty(e)&&"_"===e.charAt(0)){var i=1,o=e;for(var r in this._events)this._events.hasOwnProperty(r)&&r.startsWith(o)&&i++;e+=i}function a(){"_"!==e.charAt(0)||isNaN(e.substr(e.length-1))||(e=e.substring(0,e.length-1)),this.removeListener(e,a),n||(n=!0,t.apply(this,arguments))}return a.listener=t,this.on(e,a),this},t.prototype.removeListener=function(e,t){var i,o,r,a;if(!s(t))throw TypeError("listener must be a function");if(!this._events||!this._events[e])return this;if(r=(i=this._events[e]).length,o=-1,i===t||s(i.listener)&&i.listener===t){if(delete this._events[e],this._events.hasOwnProperty(e+"2")&&"_"===e.charAt(0)){var c=e;for(var h in this._events)this._events.hasOwnProperty(h)&&h.startsWith(c)&&(isNaN(parseInt(h.substr(h.length-1)))||(this._events[e+parseInt(h.substr(h.length-1)-1)]=this._events[h],delete this._events[h]));this._events[e]=this._events[e+"1"],delete this._events[e+"1"]}this._events.removeListener&&this.emit("removeListener",e,t)}else if(n(i)){for(a=r;a-- >0;)if(i[a]===t||i[a].listener&&i[a].listener===t){o=a;break}if(o<0)return this;1===i.length?(i.length=0,delete this._events[e]):i.splice(o,1),this._events.removeListener&&this.emit("removeListener",e,t)}return this},t.prototype.removeAllListeners=function(e){var t,n;if(!this._events)return this;if(!this._events.removeListener)return 0===arguments.length?this._events={}:this._events[e]&&delete this._events[e],this;if(0===arguments.length){for(t in this._events)"removeListener"!==t&&this.removeAllListeners(t);return this.removeAllListeners("removeListener"),this._events={},this}if(s(n=this._events[e]))this.removeListener(e,n);else if(n)for(;n.length;)this.removeListener(e,n[n.length-1]);return delete this._events[e],this},t.prototype.listeners=function(e){return this._events&&this._events[e]?s(this._events[e])?[this._events[e]]:this._events[e].slice():[]},t.prototype.listenerCount=function(e){if(this._events){var t=this._events[e];if(s(t))return 1;if(t)return t.length}return 0},t.listenerCount=function(e,t){return e.listenerCount(t)}},352:(e,t,s)=>{var n=s(49),i="info",o={trace:0,debug:1,info:2,warn:3,error:4,fatal:5};function r(e){return function(t){o[e]>=o[i]&&console.log(`[${n.formatDate(new Date)}] ${e}: ${t}`)}}e.exports={setLevel:function(e){i=e},trace:r("trace"),debug:r("debug"),info:r("info"),warn:r("warn"),error:r("error"),fatal:r("fatal")}},549:(e,t,s)=>{var n=s(49),i=/\S+/g;function o(e,t,s=",",i="/",o){var r=e[t];if(void 0===r)return e;var a=n.isString(r);if(e[t+"-raw"]=a?r:null,!0===r)return e[t]=null,e;if(e[t]={},a)for(var c=r.split(s),h=0;h<c.length;h++){var l=c[h].split(i),u=l[1];void 0!==o&&u&&(u=u.split(o)),e[t][l[0]]=u||null}return e}e.exports={badges:function(e){return o(e,"badges")},badgeInfo:function(e){return o(e,"badge-info")},emotes:function(e){return o(e,"emotes","/",":",",")},emoteRegex:function(e,t,s,o){i.lastIndex=0;for(var r,a=new RegExp("(\\b|^|s)"+n.unescapeHtml(t)+"(\\b|$|s)");null!==(r=i.exec(e));)a.test(r[0])&&(o[s]=o[s]||[],o[s].push([r.index,i.lastIndex-1]))},emoteString:function(e,t,s,o){var r;for(i.lastIndex=0;null!==(r=i.exec(e));)r[0]===n.unescapeHtml(t)&&(o[s]=o[s]||[],o[s].push([r.index,i.lastIndex-1]))},transformEmotes:function(e){var t="";return Object.keys(e).forEach((s=>{t=`${t+s}:`,e[s].forEach((e=>{t=`${t+e.join("-")},`})),t=`${t.slice(0,-1)}/`})),t.slice(0,-1)},msg:function(e){var t={raw:e,tags:{},prefix:null,command:null,params:[]},s=0,n=0;if(64===e.charCodeAt(0)){if(-1===(n=e.indexOf(" ")))return null;for(var i=e.slice(1,n).split(";"),o=0;o<i.length;o++){var r=i[o],a=r.split("=");t.tags[a[0]]=r.substring(r.indexOf("=")+1)||!0}s=n+1}for(;32===e.charCodeAt(s);)s++;if(58===e.charCodeAt(s)){if(-1===(n=e.indexOf(" ",s)))return null;for(t.prefix=e.slice(s+1,n),s=n+1;32===e.charCodeAt(s);)s++}if(-1===(n=e.indexOf(" ",s)))return e.length>s?(t.command=e.slice(s),t):null;for(t.command=e.slice(s,n),s=n+1;32===e.charCodeAt(s);)s++;for(;s<e.length;){if(n=e.indexOf(" ",s),58===e.charCodeAt(s)){t.params.push(e.slice(s+1));break}if(-1===n){if(-1===n){t.params.push(e.slice(s));break}}else for(t.params.push(e.slice(s,n)),s=n+1;32===e.charCodeAt(s);)s++}return t}}},776:(e,t)=>{function s(e){this.queue=[],this.index=0,this.defaultDelay=e||3e3}s.prototype.add=function(e,t){this.queue.push({fn:e,delay:t})},s.prototype.run=function(e){(e||0===e)&&(this.index=e),this.next()},s.prototype.next=function(){var e=this.index++,t=this.queue[e],s=this.queue[this.index];t&&(t.fn(),s&&setTimeout((()=>{this.next()}),s.delay||this.defaultDelay))},s.prototype.reset=function(){this.index=0},s.prototype.clear=function(){this.index=0,this.queue=[]},t.queue=s},49:e=>{var t=/^\u0001ACTION ([^\u0001]+)\u0001$/,s=/^(justinfan)(\d+$)/,n=/\\([sn:r\\])/g,i={s:" ",n:"",":":";",r:""},o=e.exports={get:(e,t)=>void 0===e?t:e,isBoolean:e=>"boolean"==typeof e,isFinite:e=>isFinite(e)&&!isNaN(parseFloat(e)),isInteger:e=>!isNaN(o.toNumber(e,0)),isJustinfan:e=>s.test(e),isNull:e=>null===e,isRegex:e=>/[\|\\\^\$\*\+\?\:\#]/.test(e),isString:e=>"string"==typeof e,isURL:e=>RegExp("^(?:(?:https?|ftp)://)(?:\\S+(?::\\S*)?@)?(?:(?!(?:10|127)(?:\\.\\d{1,3}){3})(?!(?:169\\.254|192\\.168)(?:\\.\\d{1,3}){2})(?!172\\.(?:1[6-9]|2\\d|3[0-1])(?:\\.\\d{1,3}){2})(?:[1-9]\\d?|1\\d\\d|2[01]\\d|22[0-3])(?:\\.(?:1?\\d{1,2}|2[0-4]\\d|25[0-5])){2}(?:\\.(?:[1-9]\\d?|1\\d\\d|2[0-4]\\d|25[0-4]))|(?:(?:[a-z\\u00a1-\\uffff0-9]-*)*[a-z\\u00a1-\\uffff0-9]+)(?:\\.(?:[a-z\\u00a1-\\uffff0-9]-*)*[a-z\\u00a1-\\uffff0-9]+)*(?:\\.(?:[a-z\\u00a1-\\uffff]{2,}))\\.?)(?::\\d{2,5})?(?:[/?#]\\S*)?$","i").test(e),justinfan:()=>`justinfan${Math.floor(8e4*Math.random()+1e3)}`,password:e=>["SCHMOOPIIE","",null].includes(e)?"SCHMOOPIIE":`oauth:${e.toLowerCase().replace("oauth:","")}`,promiseDelay:e=>new Promise((function(t){setTimeout(t,e)})),replaceAll:(e,t)=>{if(null==e)return null;for(var s in t)e=e.replace(new RegExp(s,"g"),t[s]);return e},unescapeHtml:e=>e.replace(/\\&amp\\;/g,"&").replace(/\\&lt\\;/g,"<").replace(/\\&gt\\;/g,">").replace(/\\&quot\\;/g,'"').replace(/\\&#039\\;/g,"'"),unescapeIRC:e=>e&&e.includes("\\")?e.replace(n,((e,t)=>t in i?i[t]:t)):e,actionMessage:e=>e.match(t),addWord:(e,t)=>e.length?e+" "+t:e+t,channel:e=>{var t=(e||"").toLowerCase();return"#"===t[0]?t:"#"+t},extractNumber:e=>{for(var t=e.split(" "),s=0;s<t.length;s++)if(o.isInteger(t[s]))return~~t[s];return 0},formatDate:e=>{var t=e.getHours(),s=e.getMinutes();return`${t=(t<10?"0":"")+t}:${s=(s<10?"0":"")+s}`},inherits:(e,t)=>{e.super_=t;var s=function(){};s.prototype=t.prototype,e.prototype=new s,e.prototype.constructor=e},isNode:()=>{try{return"object"==typeof process&&"[object process]"===Object.prototype.toString.call(process)}catch(e){}return!1},isExtension:()=>{try{return window.chrome&&chrome.runtime&&chrome.runtime.id}catch(e){}return!1},isReactNative:()=>{try{return navigator&&"ReactNative"==navigator.product}catch(e){}return!1},merge:Object.assign,splitLine:(e,t)=>{var s=e.substring(0,t).lastIndexOf(" ");return-1===s&&(s=t-1),[e.substring(0,s),e.substring(s+1)]},toNumber:(e,t)=>{if(null===e)return 0;var s=Math.pow(10,o.isFinite(t)?t:0);return Math.round(e*s)/s},union:(e,t)=>{for(var s={},n=[],i=0;i<e.length;i++)s[o=e[i]]||(s[o]=!0,n.push(o));for(i=0;i<t.length;i++){var o;s[o=t[i]]||(s[o]=!0,n.push(o))}return n},username:e=>{var t=(e||"").toLowerCase();return"#"===t[0]?t.slice(1):t}}},607:(e,t,s)=>{"use strict";var n;s(153);var i=s(824),o=s(320),r=s(651),a=s(18),c=s(877),h=new URLSearchParams(window.location.search),l=null!==(n=h.get("channel"))&&void 0!==n?n:"",u=new i.Job(10,5),m=new o.TwitchChat(l),p="pie"==(h.has("type")?h.get("type"):null)?new a.Pie({elementId:"bar",background:"none",x:-1,y:-1,radiusFactor:2}):new c.Bar({elementId:"bar",background:"none",barMarginHeight:0,barMarginWidth:0,strokeMarginHeight:0,strokeMarginWidth:0}),f=new r.ReactionStorage(m,u);f.on("reaction",(function(e,t){console.log("on: reaction =",e,t,u.isActive()),u.isActive()&&f.drawChart(p)})),u.on("start",(function(){console.log("Job started!")})),u.on("cancel",(function(){console.log("Job canceled!"),p.clear(),f.resetStorage()}))},877:function(e,t,s){"use strict";var n,i=this&&this.__extends||(n=function(e,t){return(n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var s in t)Object.prototype.hasOwnProperty.call(t,s)&&(e[s]=t[s])})(e,t)},function(e,t){function s(){this.constructor=e}n(e,t),e.prototype=null===t?Object.create(t):(s.prototype=t.prototype,new s)}),o=this&&this.__assign||function(){return(o=Object.assign||function(e){for(var t,s=1,n=arguments.length;s<n;s++)for(var i in t=arguments[s])Object.prototype.hasOwnProperty.call(t,i)&&(e[i]=t[i]);return e}).apply(this,arguments)};Object.defineProperty(t,"__esModule",{value:!0}),t.Bar=t.FONT_DYNAMIC=void 0;var r=s(256),a=s(613);t.FONT_DYNAMIC=-1;var c={elementId:"",barMarginHeight:10,barMarginWidth:10,strokeMarginHeight:5,strokeMarginWidth:5,valueColors:r.colors,strokeColor:"#34495e",strokeIterations:1,fontSize:-1,fontFamily:"courier",fontSizeFactor:1.8,fontColorFactor:.65,textRound:!0},h=function(e){function t(t){var s=e.call(this,t)||this;return s.properties=t,s.properties=o(o({},c),s.properties),console.log(s.properties),s}return i(t,e),t.prototype.init=function(){},t.prototype.draw=function(e,t,s){void 0===t&&(t=!0),void 0===s&&(s=!0),s&&this.clear();var n=this.properties,i=this.width-2*n.barMarginWidth,o=this.height-2*n.barMarginHeight,a=n.fontSize;-1===a&&(a=o*(2/3));var c=a/n.fontSizeFactor;this.ctx.font=Math.round(a)+"px "+n.fontFamily,this.ctx.strokeStyle=n.strokeColor;for(var h=0;h<n.strokeIterations;h++)this.ctx.beginPath(),this.ctx.rect(this.x+n.barMarginWidth-n.strokeMarginWidth-h,this.y+n.barMarginHeight-n.strokeMarginHeight-h,i+2*n.strokeMarginWidth+h,o+2*n.strokeMarginHeight+h),this.ctx.stroke(),this.ctx.closePath(),console.log(this.x+n.barMarginWidth-n.strokeMarginWidth-h,this.y+n.barMarginHeight-n.strokeMarginHeight-h,i+2*n.strokeMarginWidth+h,o+2*n.strokeMarginHeight+h);for(var l=e.reduce((function(e,t){return e+t})),u=n.barMarginWidth,m=0;m<e.length;m++){var p=e[m]/l;if(0!=p){var f=i*p;if(this.ctx.fillStyle=n.valueColors[m%n.valueColors.length],this.ctx.beginPath(),this.ctx.rect(this.x+u,this.y+n.barMarginHeight,f,o),this.ctx.fill(),this.ctx.closePath(),t){var d;d=n.textRound?Math.round(100*p)+"%":100*p+"%",this.ctx.beginPath(),this.ctx.fillStyle=r.darkenHexColor(this.ctx.fillStyle,n.fontColorFactor),this.ctx.fillText(d,this.x+u+f/2-c*d.length/2,this.y+n.barMarginHeight+o/2+c/2),this.ctx.closePath()}u+=f}}},t.prototype.clear=function(){this.ctx.clearRect(this.x,this.y,this.width,this.height)},t}(a.Chart);t.Bar=h},613:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.Chart=void 0;t.Chart=function(e){var t,s,n,i,o,r;this.canvasElementId=e.elementId,this.x=null!==(t=e.x)&&void 0!==t?t:0,this.y=null!==(s=e.y)&&void 0!==s?s:0,this.width=null!==(n=e.width)&&void 0!==n?n:-1,this.height=null!==(i=e.height)&&void 0!==i?i:-1,-1===this.width?this.width=document.defaultView.innerWidth:-2===this.x&&(this.x=document.defaultView.innerWidth/2-this.width/2),-1==this.height?this.height=document.defaultView.innerHeight:-2===this.x&&(this.y=document.defaultView.innerHeight/2-this.height/2);var a=document.getElementById(this.canvasElementId);if(null!=a){this.canvas=a;var c=this.canvas.getContext("2d");console.log("ctx:",c),null!=c?(this.ctx=c,this.canvas.height=this.height,this.canvas.width=this.width,"none"!=(null!==(o=e.background)&&void 0!==o?o:"#2c3e50")&&(this.canvas.style.background=null!==(r=e.background)&&void 0!==r?r:"#2c3e50"),this.error||this.init()):this.error="Context not found."}else this.error="Canvas not found."}},18:function(e,t,s){"use strict";var n,i=this&&this.__extends||(n=function(e,t){return(n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var s in t)Object.prototype.hasOwnProperty.call(t,s)&&(e[s]=t[s])})(e,t)},function(e,t){function s(){this.constructor=e}n(e,t),e.prototype=null===t?Object.create(t):(s.prototype=t.prototype,new s)}),o=this&&this.__assign||function(){return(o=Object.assign||function(e){for(var t,s=1,n=arguments.length;s<n;s++)for(var i in t=arguments[s])Object.prototype.hasOwnProperty.call(t,i)&&(e[i]=t[i]);return e}).apply(this,arguments)};Object.defineProperty(t,"__esModule",{value:!0}),t.Pie=t.LOCATION_CENTER=void 0;var r=s(613),a=s(256);t.LOCATION_CENTER=-1;var c={elementId:"",fontSize:25,round:!0,radiusFactor:4.5,fontFamily:"courier",fontColorFactor:.65},h=function(e){function t(t){var s=e.call(this,t)||this;return s.properties=t,s.properties=o(o({},c),s.properties),-1===s.x&&(s.x=s.width/2),-1===s.y&&(s.y=s.height/2),console.log(s.x,s.y),s.r=Math.min(s.height,s.width)/s.properties.radiusFactor,s}return i(t,e),t.prototype.init=function(){},t.prototype.draw=function(e,t,s){void 0===t&&(t=!0),void 0===s&&(s=!0),s&&this.clear();var n=this.properties,i=e.reduce((function(e,t){return e+t}));this.endAngle=0;for(var o=0;o<e.length;o++){var r=e[o]/i*100;if(0!=r){var c=a.colors[o%a.colors.length],h=Math.PI/50*r;console.log({value:r,color:c,currentAngle:h,drawText:t}),this.ctx.beginPath(),this.ctx.moveTo(this.x,this.y),this.ctx.arc(this.x,this.y,this.r,this.endAngle-.5*Math.PI,this.endAngle+h-.5*Math.PI),this.ctx.fillStyle=c,this.ctx.fill(),this.ctx.closePath();var l=this.endAngle+h/2;if(t){this.ctx.fillStyle=a.darkenHexColor(this.ctx.fillStyle,n.fontColorFactor),this.ctx.font=n.fontSize+"px "+n.fontFamily;var u,m=15*(u=n.round?Math.round(r)+"%":r+"$").length,p=this.r-50,f=this.x+(Math.sin(l)*p+m/2*(Math.sin(l)-1)),d=this.y-(Math.cos(l)*p+7.5*(Math.cos(l)-1));this.ctx.fillText(u,f,d)}this.endAngle+=h}}},t.prototype.clear=function(){this.ctx.clearRect(0,0,this.width,this.height)},t}(r.Chart);t.Pie=h},131:function(e,t,s){"use strict";var n,i=this&&this.__extends||(n=function(e,t){return(n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var s in t)Object.prototype.hasOwnProperty.call(t,s)&&(e[s]=t[s])})(e,t)},function(e,t){function s(){this.constructor=e}n(e,t),e.prototype=null===t?Object.create(t):(s.prototype=t.prototype,new s)});Object.defineProperty(t,"__esModule",{value:!0}),t.Chat=void 0;var o=function(e){function t(t){var s=e.call(this)||this;return s.channel=t,s}return i(t,e),t.prototype.onMessage=function(e){this.on("message",e)},t.prototype.emitMessage=function(e,t){this.emit("message",e,t)},t}(s(187).EventEmitter);t.Chat=o},320:function(e,t,s){"use strict";var n,i=this&&this.__extends||(n=function(e,t){return(n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var s in t)Object.prototype.hasOwnProperty.call(t,s)&&(e[s]=t[s])})(e,t)},function(e,t){function s(){this.constructor=e}n(e,t),e.prototype=null===t?Object.create(t):(s.prototype=t.prototype,new s)});Object.defineProperty(t,"__esModule",{value:!0}),t.TwitchChat=void 0;var o=s(131),r=s(993),a=function(e){function t(t){var s=e.call(this,t)||this;return s.client=r.Client({connection:{secure:!0,reconnect:!0},channels:[s.channel]}),console.log("[Chat] Connecting to channel: "+t),s.client.connect(),console.log("[Chat] Connected!"),s.client.on("message",(function(e,t,n,i){s.emitMessage(t.username,n)})),s}return i(t,e),t}(o.Chat);t.TwitchChat=a},256:(e,t)=>{"use strict";function s(e,t,s,n){return void 0===n&&(n=!0),(n?"#":"")+(16777215&(e<<16|t<<8|s)).toString(16)}function n(e){e.startsWith("#")&&(e=e.substring(1));var t=parseInt(e,16);return[t>>16&255,t>>8&255,255&t]}function i(e,t,n,i){return s(e=Math.max(0,e*i),t=Math.max(0,t*i),n=Math.max(0,n*i))}Object.defineProperty(t,"__esModule",{value:!0}),t.darkenHexColor=t.darkenRGBColor=t.Hex2RGB=t.RGB2Hex=t.colors=void 0,t.colors=["#3498db","#f1c40f","#e74c3c","#3498db","#2ecc71","#1abc9c","#9b59b6","#f1c40f","#e67e22","#e74c3c","#ecf0f1"],t.RGB2Hex=s,t.Hex2RGB=n,t.darkenRGBColor=i,t.darkenHexColor=function(e,t){var s=n(e);return i(s[0],s[1],s[2],t)}},824:function(e,t,s){"use strict";var n,i=this&&this.__extends||(n=function(e,t){return(n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var s in t)Object.prototype.hasOwnProperty.call(t,s)&&(e[s]=t[s])})(e,t)},function(e,t){function s(){this.constructor=e}n(e,t),e.prototype=null===t?Object.create(t):(s.prototype=t.prototype,new s)});Object.defineProperty(t,"__esModule",{value:!0}),t.Job=void 0;var o=function(e){function t(t,s){void 0===t&&(t=10),void 0===s&&(s=1);var n=e.call(this)||this;return n.timeout=t,n.requiredPings=s,n.current=0,n.currentPing=0,n}return i(t,e),t.prototype.time=function(){this.current++,this.current>=this.timeout&&(this.stopTimer(),this.emit("cancel"))},t.prototype.ping=function(){var e=this;this.currentPing++,console.log("Current:",this.currentPing),this.currentPing<this.requiredPings||(this.current=0,this.currentPing=0,null==this.timer&&(this.timer=window.setInterval((function(){return e.time()}),1e3),this.emit("start")))},t.prototype.stopTimer=function(){this.isActive()&&(window.clearInterval(this.timer),this.timer=null),this.current=0,this.currentPing=0},t.prototype.isActive=function(){return null!=this.timer},t}(s(187).EventEmitter);t.Job=o},834:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.reactions=t.getReactionByKeyword=void 0;var s=[{sorting:0,display:"+1",keywords:["+1","1","yes","ye","ja"]},{sorting:2,display:"~",keywords:["2","wtf"]},{sorting:3,display:"-1",keywords:["-1","0","no","nein"]}];t.reactions=s,t.getReactionByKeyword=function(e){e=e.toLowerCase();for(var t=0;t<s.length;t++)for(var n=s[t],i=0;i<n.keywords.length;i++)if(n.keywords[i]==e)return n;return null}},651:function(e,t,s){"use strict";var n,i=this&&this.__extends||(n=function(e,t){return(n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var s in t)Object.prototype.hasOwnProperty.call(t,s)&&(e[s]=t[s])})(e,t)},function(e,t){function s(){this.constructor=e}n(e,t),e.prototype=null===t?Object.create(t):(s.prototype=t.prototype,new s)});Object.defineProperty(t,"__esModule",{value:!0}),t.ReactionStorage=t.UpdateMode=void 0;var o,r=s(187),a=s(834);!function(e){e[e.INCREMENT=1]="INCREMENT",e[e.DECREMENT=-1]="DECREMENT"}(o=t.UpdateMode||(t.UpdateMode={}));var c=function(e){function t(t,s){var n=e.call(this)||this;return n.chat=t,n.job=s,n.duplicationChecking=!0,n.clients=new Map,n.reactions=new Map,n.chat.onMessage((function(e,t){n.onMessage(e,t)})),n}return i(t,e),t.prototype.onMessage=function(e,t){if(null!=e&&null!=t){var s=a.getReactionByKeyword(t);null!=s&&(console.log("Found reaction:",s),this.job.ping(),this.react(e,s))}else console.log("Null:",e,"or",t)},t.prototype.getReaction=function(e){var t;return null!==(t=this.reactions.get(e))&&void 0!==t?t:0},t.prototype.updateReaction=function(e,t){var s=this.getReaction(e);switch(t){case o.INCREMENT:s++;break;case o.DECREMENT:s--}return this.emit("update",e,s,t),this.reactions.set(e,s),s},t.prototype.react=function(e,t){if(this.clients.has(e)){var s=this.clients.get(e);if(s==t)return;this.updateReaction(s,o.DECREMENT)}this.updateReaction(t,o.INCREMENT),this.clients.set(e,t),this.emit("reaction",e,t)},t.prototype.resetStorage=function(){this.clients.clear(),this.reactions.clear()},t.prototype.getValues=function(){var e=this,t=[],s=new Map;a.reactions.forEach((function(n){s.set(n.sorting,e.getReaction(n)),t.push(n.sorting)}));for(var n=0;n<t.length;n++)for(var i=0;i<t.length;i++)if(n!=i){var o=t[n],r=t[i];o<r&&(t[n]=r,t[i]=o)}var c=[];for(n=0;n<t.length;n++)c.push(s.get(t[n]));return c},t.prototype.drawChart=function(e){var t=this.getValues();console.log("Drawing chart",t),e.draw(t,!0,!0)},t}(r.EventEmitter);t.ReactionStorage=c},887:()=>{},418:()=>{}},t={};function s(n){if(t[n])return t[n].exports;var i=t[n]={id:n,exports:{}};return e[n].call(i.exports,i,i.exports,s),i.exports}s.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return s.d(t,{a:t}),t},s.d=(e,t)=>{for(var n in t)s.o(t,n)&&!s.o(e,n)&&Object.defineProperty(e,n,{enumerable:!0,get:t[n]})},s.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),s.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),s.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},s(607)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,